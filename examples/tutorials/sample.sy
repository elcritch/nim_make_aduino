#!/usr/bin/env ispry
# Fun Fun with Spry!
#
# Spry source code is basically just a list of "words" and "values"
# with sublists created using "[..]" and such a list is called
# a "block". Parenthesis can also be used to control evalation
# order. This file, when parsed by the Parser, is wrapped in
# a block.
#
# This is a word followed by a value. It should print "Hello".
"Hello"
# pause

# Here is a block with all core Spry value types; int, float, bool, nil, string.
# It should print "[3 4.0 true false "hey"]"
[3 4.0 true false "hey"]
# pause

# Just as in Smalltalk we have nil, but also undef which means never
# assigned. All four of true, false, nil and undef are words bound to
# known singleton nodes owned by the interpreter.
[nil undef]
# pause

# A word is just a string until it gets resolved. "echo" above
# got resolved to a primitive function taking 1 argument, when
# this script was called upon to run. It resolved only one
# level deep though, so the words "true", "false", "nil" and "undef"
# are still just words in the block above. When they are resolved
# they would refer to the singletons for those three values.
#
# We can bind stuff to words with regular assignment. After this line
# "myblock" refers to a block with two value nodes and one
# word node - "+". But the "+" is not yet resolved.
myblock = [3 + 4]
# pause

# When the echo function pulls in its argument, it first evaluates
# it. For words it means "look up and evaluate what we found".
# We found a block, which is the basic unit of code in Spry, but
# blocks just return themselves when called
# upon to evaluate. We need to do more to actually "run" them.
# It should print "[3 + 4]" 
myblock
# pause

# The "do" word will resolve the block and then run it as code.
# It's at this point that "+" gets resolved to a primitive infix function.
# This should print "7".
do myblock
# pause

# But we can also turn a block into a function using the "func" function.
# Func takes a block as argument and turns it into a closure with
# its own local context of words.
# Arguments are pulled using so called "arg words", which is just a word
# prefixed with a ":". Let's turn myblock into a function and assign it to "foo".
foo = func myblock
# pause

# Now we can run it just with "foo" because a function will run
# when we evaluate it. It should print "7".
foo
# pause

# The Spry Parser is exposed through the "parse" primitive.
# The bar func we create below is equivalent to foo.
bar = func parse "[3 + 4]"
# pause

# So this should also print "7"
bar
# pause

# The fact that Spry code is just blocks means we can compose and manipulate
# code just as data. First let's make a func calling our previous funcs.
combo = func [foo + bar]
# pause

# It should print "14"
combo
# pause

# Now let's manipulate the combo func.
# To get the func itself and not what it evaluates
# to we can use a "lookup word", which is the word with a "$" prefix.
# This should thus print the combo func itself: "[foo + bar]"
$combo
# pause

# So... blocks are collections
echo (myblock size)     # Prints 3
echo (myblock first)    # Prints 3
(myblock at: 1)	        # Prints +
# pause

# ..and also positionable streams
echo (myblock pos)	# Prints 0
echo (myblock read)	# Gets the element at pos, prints 3
echo (myblock next)	# Gets the element at pos, increment pos, prints 3
echo (myblock next)	# Gets the element at pos, increment pos, prints +
echo (myblock write: 6)	# Writes 6 at current pos, which is 2, prints myblock itself
echo (do myblock)	# Prints 9
foo                     # Prints 7 still, since.. foo copied from myblock
# pause

# Fetch func, pick out body, put in "20" at position 2 so that
# it now reads [foo + 20]
$combo at: 2 put: 20
$combo
# pause

# Fetch foo func, put in "6" at position 2
$foo at: 2 put: 6
$foo
# pause

# Should print 27....nah, 29!
combo
# pause

"Bye bye!"

