/* Generated by the Nim Compiler v0.20.2 */
/*   (c) 2019 Andreas Rumpf */

var framePtr = null;
var excHandler = 0;
var lastJSError = null;
if (typeof Int8Array === 'undefined') Int8Array = Array;
if (typeof Int16Array === 'undefined') Int16Array = Array;
if (typeof Int32Array === 'undefined') Int32Array = Array;
if (typeof Uint8Array === 'undefined') Uint8Array = Array;
if (typeof Uint16Array === 'undefined') Uint16Array = Array;
if (typeof Uint32Array === 'undefined') Uint32Array = Array;
if (typeof Float32Array === 'undefined') Float32Array = Array;
if (typeof Float64Array === 'undefined') Float64Array = Array;
var NTI190491 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI4066 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI187102 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI187097 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI187475 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI187470 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI187509 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI187504 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI142 = {size: 0,kind: 26,base: null,node: null,finalizer: null};
var NTI170197 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI4086 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI190474 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI170072 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI190470 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI186425 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI186360 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI186295 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI63907 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI170161 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI170163 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI170159 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI149814 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI170174 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI170176 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI170172 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI170165 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI98832 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI101647 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI170178 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI170018 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI186220 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI170183 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI170181 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI170180 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI190296 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI170188 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI124 = {size: 0,kind: 36,base: null,node: null,finalizer: null};
var NTI170191 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI170218 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI170216 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI170194 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI170148 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI170167 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI170169 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI170032 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI170156 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI170100 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI190468 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI190487 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI190489 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI190510 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI190465 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI170088 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI190437 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI130 = {size: 0,kind: 1,base: null,node: null,finalizer: null};
var NTI190476 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI170096 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI190484 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI190493 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI170150 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI170154 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI170145 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI170152 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI4030 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI4052 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI4054 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI4044 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI170206 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI170208 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI170204 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI170186 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI170200 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI170202 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI4042 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI4046 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI4058 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI170138 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI170136 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI170133 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI170140 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI170248 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI170098 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI170210 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI170213 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI170212 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI104 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI170220 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI170094 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI170142 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI170030 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI162043 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI170239 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI170236 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI170233 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI170223 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI4062 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI4008 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI4114 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI114 = {size: 0,kind: 40,base: null,node: null,finalizer: null};
var NTI138 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NTI140 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI4108 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI4026 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI4028 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI4050 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NNI4050 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI4050.node = NNI4050;
var NNI4028 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI4028.node = NNI4028;
NTI4108.base = NTI4026;
NTI4114.base = NTI4026;
var NNI4026 = {kind: 2, len: 6, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI4108, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI140, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI138, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI138, name: "trace", sons: null}, 
{kind: 1, offset: "raiseId", len: 0, typ: NTI114, name: "raiseId", sons: null}, 
{kind: 1, offset: "up", len: 0, typ: NTI4114, name: "up", sons: null}]};
NTI4026.node = NNI4026;
var NNI4008 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI4008.node = NNI4008;
NTI4026.base = NTI4008;
NTI4028.base = NTI4026;
NTI4050.base = NTI4028;
var NNI4062 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI4062.node = NNI4062;
NTI4062.base = NTI4028;
var NNI170220 = {kind: 1, offset: "pos", len: 0, typ: NTI104, name: "pos", sons: null};
NTI170220.node = NNI170220;
NTI170213.base = NTI170030;
var NNI170212 = {kind: 1, offset: "nodes", len: 0, typ: NTI170213, name: "nodes", sons: null};
NTI170212.node = NNI170212;
var NNI170210 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI170210.node = NNI170210;
NTI170210.base = NTI170142;
NTI170212.base = NTI170210;
NTI170220.base = NTI170212;
NTI170094.base = NTI170220;
var NNI170142 = {kind: 1, offset: "tags", len: 0, typ: NTI170094, name: "tags", sons: null};
NTI170142.node = NNI170142;
NTI170142.base = NTI4008;
NTI170030.base = NTI170142;
var NNI170248 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "key", len: 0, typ: NTI170030, name: "key", sons: null}, 
{kind: 1, offset: "val", len: 0, typ: NTI170030, name: "val", sons: null}]};
NTI170248.node = NNI170248;
NTI170248.base = NTI170142;
NTI170098.base = NTI170248;
var NNI170239 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI162043, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI170030, name: "Field1", sons: null}, 
{kind: 1, offset: "Field2", len: 0, typ: NTI170098, name: "Field2", sons: null}]};
NTI170239.node = NNI170239;
NTI170236.base = NTI170239;
var NNI170233 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "data", len: 0, typ: NTI170236, name: "data", sons: null}, 
{kind: 1, offset: "counter", len: 0, typ: NTI104, name: "counter", sons: null}]};
NTI170233.node = NNI170233;
var NNI170223 = {kind: 1, offset: "bindings", len: 0, typ: NTI170233, name: "bindings", sons: null};
NTI170223.node = NNI170223;
NTI170223.base = NTI170210;
var NNI170140 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI170140.node = NNI170140;
var NNI170133 = {kind: 1, offset: "token", len: 0, typ: NTI138, name: "token", sons: null};
NTI170133.node = NNI170133;
NTI170133.base = NTI4008;
NTI170140.base = NTI170133;
var NNI170136 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI170136.node = NNI170136;
NTI170136.base = NTI170133;
var NNI170138 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI170138.node = NNI170138;
NTI170138.base = NTI170133;
var NNI4058 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI4058.node = NNI4058;
NTI4058.base = NTI4028;
var NNI4046 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI4046.node = NNI4046;
var NNI4042 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI4042.node = NNI4042;
NTI4042.base = NTI4028;
NTI4046.base = NTI4042;
var NNI170202 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI170202.node = NNI170202;
var NNI170200 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI170200.node = NNI170200;
var NNI170186 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI170186.node = NNI170186;
NTI170186.base = NTI170142;
NTI170200.base = NTI170186;
NTI170202.base = NTI170200;
var NNI170204 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI170204.node = NNI170204;
NTI170204.base = NTI170200;
var NNI170208 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI170208.node = NNI170208;
NTI170208.base = NTI170186;
var NNI170206 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI170206.node = NNI170206;
NTI170206.base = NTI170186;
var NNI4044 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI4044.node = NNI4044;
NTI4044.base = NTI4042;
var NNI4054 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI4054.node = NNI4054;
var NNI4052 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI4052.node = NNI4052;
var NNI4030 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI4030.node = NNI4030;
NTI4030.base = NTI4026;
NTI4052.base = NTI4030;
NTI4054.base = NTI4052;
var NNI170152 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI170152.node = NNI170152;
var NNI170145 = {kind: 1, offset: "word", len: 0, typ: NTI138, name: "word", sons: null};
NTI170145.node = NNI170145;
NTI170145.base = NTI170142;
NTI170152.base = NTI170145;
var NNI170154 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI170154.node = NNI170154;
var NNI170150 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI170150.node = NNI170150;
NTI170150.base = NTI170145;
NTI170154.base = NTI170150;
var NNI190493 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI190493.node = NNI190493;
NTI170096.base = NTI170223;
var NNI190484 = {kind: 1, offset: "locals", len: 0, typ: NTI170096, name: "locals", sons: null};
NTI190484.node = NNI190484;
NTI190437.base = NTI190476;
NTI170088.base = NTI170212;
var NNI190476 = {kind: 2, len: 6, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "last", len: 0, typ: NTI170030, name: "last", sons: null}, 
{kind: 1, offset: "self", len: 0, typ: NTI170030, name: "self", sons: null}, 
{kind: 1, offset: "returned", len: 0, typ: NTI130, name: "returned", sons: null}, 
{kind: 1, offset: "parent", len: 0, typ: NTI190437, name: "parent", sons: null}, 
{kind: 1, offset: "pos", len: 0, typ: NTI104, name: "pos", sons: null}, 
{kind: 1, offset: "body", len: 0, typ: NTI170088, name: "body", sons: null}]};
NTI190476.node = NNI190476;
NTI190476.base = NTI170142;
NTI190484.base = NTI190476;
NTI190493.base = NTI190484;
var NNI190465 = {kind: 1, offset: "primitive", len: 0, typ: NTI190510, name: "primitive", sons: null};
NTI190465.node = NNI190465;
NTI190465.base = NTI170142;
var NNI190489 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI190489.node = NNI190489;
NTI190489.base = NTI190476;
var NNI190487 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI190487.node = NNI190487;
NTI190487.base = NTI190484;
var NNI190468 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI190468.node = NNI190468;
NTI190468.base = NTI190465;
var NNI170100 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI170100.node = NNI170100;
NTI170100.base = NTI4026;
NTI170032.base = NTI170145;
var NNI170156 = {kind: 1, offset: "module", len: 0, typ: NTI170032, name: "module", sons: null};
NTI170156.node = NNI170156;
NTI170156.base = NTI170154;
var NNI170169 = {kind: 1, offset: "module", len: 0, typ: NTI170032, name: "module", sons: null};
NTI170169.node = NNI170169;
var NNI170167 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI170167.node = NNI170167;
var NNI170148 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI170148.node = NNI170148;
NTI170148.base = NTI170145;
NTI170167.base = NTI170148;
NTI170169.base = NTI170167;
var NNI170194 = {kind: 1, offset: "value", len: 0, typ: NTI138, name: "value", sons: null};
NTI170194.node = NNI170194;
NTI170194.base = NTI170186;
var NNI170216 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI170216.node = NNI170216;
NTI170216.base = NTI170212;
var NNI170218 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI170218.node = NNI170218;
NTI170218.base = NTI170212;
var NNI170191 = {kind: 1, offset: "value", len: 0, typ: NTI124, name: "value", sons: null};
NTI170191.node = NNI170191;
NTI170191.base = NTI170186;
var NNI170188 = {kind: 1, offset: "value", len: 0, typ: NTI104, name: "value", sons: null};
NTI170188.node = NNI170188;
NTI170188.base = NTI170186;
NTI190296.base = NTI170030;
NTI170181.base = NTI138;
NTI170183.base = NTI170030;
var NNI170180 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "keys", len: 0, typ: NTI170181, name: "keys", sons: null}, 
{kind: 1, offset: "args", len: 0, typ: NTI170183, name: "args", sons: null}]};
NTI170180.node = NNI170180;
NTI170180.base = NTI170142;
NTI186220.base = NTI170030;
var NNI170018 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI170018.node = NNI170018;
NTI170018.base = NTI4026;
var NNI170178 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI170178.node = NNI170178;
NTI170178.base = NTI170148;
var NNI101647 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "a", len: 0, typ: NTI98832, name: "a", sons: null}, 
{kind: 1, offset: "b", len: 0, typ: NTI104, name: "b", sons: null}]};
NTI101647.node = NNI101647;
var NNI170165 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI170165.node = NNI170165;
NTI170165.base = NTI170150;
var NNI170172 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI170172.node = NNI170172;
NTI170172.base = NTI170148;
var NNI170176 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI170176.node = NNI170176;
NTI170176.base = NTI170148;
var NNI170174 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI170174.node = NNI170174;
NTI170174.base = NTI170148;
NTI149814.base = NTI138;
var NNI170159 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI170159.node = NNI170159;
NTI170159.base = NTI170150;
var NNI170163 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI170163.node = NNI170163;
NTI170163.base = NTI170150;
var NNI170161 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI170161.node = NNI170161;
NTI170161.base = NTI170150;
var NNI63907 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "a", len: 0, typ: NTI104, name: "a", sons: null}, 
{kind: 1, offset: "b", len: 0, typ: NTI104, name: "b", sons: null}]};
NTI63907.node = NNI63907;
NTI186295.base = NTI170030;
NTI186360.base = NTI170030;
NTI186425.base = NTI170030;
NTI170072.base = NTI170194;
var NNI190470 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI190437, name: "parent", sons: null}, 
{kind: 1, offset: "source", len: 0, typ: NTI170072, name: "source", sons: null}]};
NTI190470.node = NNI190470;
NTI190470.base = NTI170220;
var NNI190474 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI190474.node = NNI190474;
NTI190474.base = NTI190470;
var NNI4086 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI4086.node = NNI4086;
NTI4086.base = NTI4028;
var NNI170197 = {kind: 1, offset: "value", len: 0, typ: NTI142, name: "value", sons: null};
NTI170197.node = NNI170197;
NTI170197.base = NTI170186;
NTI187504.base = NTI170030;
NTI187509.base = NTI170030;
NTI187470.base = NTI170030;
NTI187475.base = NTI170030;
NTI187097.base = NTI170030;
NTI187102.base = NTI170030;
var NNI4066 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI4066.node = NNI4066;
NTI4066.base = NTI4028;
var NNI190491 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI190491.node = NNI190491;
NTI190491.base = NTI190484;

function setConstr() {
		    var result = {};
    for (var i = 0; i < arguments.length; ++i) {
      var x = arguments[i];
      if (typeof(x) == "object") {
        for (var j = x[0]; j <= x[1]; ++j) {
          result[j] = true;
        }
      } else {
        result[x] = true;
      }
    }
    return result;
  

	
}
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);

function nimCopy(dest_24427, src_24428, ti_24429) {
	var result_24619 = null;

		switch (ti_24429.kind) {
		case 21:
		case 22:
		case 23:
		case 5:
			if (!(is_fat_pointer_24401(ti_24429))) {
			result_24619 = src_24428;
			}
			else {
				result_24619 = [src_24428[0], src_24428[1]];
			}
			
			break;
		case 19:
			      if (dest_24427 === null || dest_24427 === undefined) {
        dest_24427 = {};
      }
      else {
        for (var key in dest_24427) { delete dest_24427[key]; }
      }
      for (var key in src_24428) { dest_24427[key] = src_24428[key]; }
      result_24619 = dest_24427;
    
			break;
		case 18:
		case 17:
			if (!((ti_24429.base == null))) {
			result_24619 = nimCopy(dest_24427, src_24428, ti_24429.base);
			}
			else {
			if ((ti_24429.kind == 17)) {
			result_24619 = (dest_24427 === null || dest_24427 === undefined) ? {m_type: ti_24429} : dest_24427;
			}
			else {
				result_24619 = (dest_24427 === null || dest_24427 === undefined) ? {} : dest_24427;
			}
			}
			nimCopyAux(result_24619, src_24428, ti_24429.node);
			break;
		case 24:
		case 4:
		case 27:
		case 16:
			      if (src_24428 === null) {
        result_24619 = null;
      }
      else {
        if (dest_24427 === null || dest_24427 === undefined) {
          dest_24427 = new Array(src_24428.length);
        }
        else {
          dest_24427.length = src_24428.length;
        }
        result_24619 = dest_24427;
        for (var i = 0; i < src_24428.length; ++i) {
          result_24619[i] = nimCopy(result_24619[i], src_24428[i], ti_24429.base);
        }
      }
    
			break;
		case 28:
			      if (src_24428 !== null) {
        result_24619 = src_24428.slice(0);
      }
    
			break;
		default: 
			result_24619 = src_24428;
			break;
		}

	return result_24619;

}

function makeNimstrLit(c_23254) {
		  var ln = c_23254.length;
  var result = new Array(ln);
  for (var i = 0; i < ln; ++i) {
    result[i] = c_23254.charCodeAt(i);
  }
  return result;
  

	
}

function toJSStr(s_23288) {
		  if (s_23288 === null) return "";
  var len = s_23288.length;
  var asciiPart = new Array(len);
  var fcc = String.fromCharCode;
  var nonAsciiPart = null;
  var nonAsciiOffset = 0;
  for (var i = 0; i < len; ++i) {
    if (nonAsciiPart !== null) {
      var offset = (i - nonAsciiOffset) * 2;
      var code = s_23288[i].toString(16);
      if (code.length == 1) {
        code = "0"+code;
      }
      nonAsciiPart[offset] = "%";
      nonAsciiPart[offset + 1] = code;
    }
    else if (s_23288[i] < 128)
      asciiPart[i] = fcc(s_23288[i]);
    else {
      asciiPart.length = i;
      nonAsciiOffset = i;
      nonAsciiPart = new Array((len - i) * 2);
      --i;
    }
  }
  asciiPart = asciiPart.join("");
  return (nonAsciiPart === null) ?
      asciiPart : asciiPart + decodeURIComponent(nonAsciiPart.join(""));
  

	
}

function raiseException(e_21618, ename_21619) {
		e_21618.name = ename_21619;
		if ((excHandler == 0)) {
		unhandledException(e_21618);
		}
		
		throw e_21618;

	
}

function chckRange(i_24724, a_24725, b_24726) {
			var Tmp1;

	var result_24727 = 0;

	BeforeRet: do {
			if (!(a_24725 <= i_24724)) Tmp1 = false; else {				Tmp1 = (i_24724 <= b_24726);			}		if (Tmp1) {
		result_24727 = i_24724;
		break BeforeRet;
		}
		else {
		raiseRangeError();
		}
		
	} while (false);

	return result_24727;

}

function cstrToNimstr(c_23271) {
		  var ln = c_23271.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_23271.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else {
      if (ch < 2048) {
        result[r] = (ch >> 6) | 192;
      }
      else {
        if (ch < 55296 || ch >= 57344) {
          result[r] = (ch >> 12) | 224;
        }
        else {
            ++i;
            ch = 65536 + (((ch & 1023) << 10) | (c_23271.charCodeAt(i) & 1023));
            result[r] = (ch >> 18) | 240;
            ++r;
            result[r] = ((ch >> 12) & 63) | 128;
        }
        ++r;
        result[r] = ((ch >> 6) & 63) | 128;
      }
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  return result;
  

	
}

function chckIndx(i_24705, a_24706, b_24707) {
			var Tmp1;

	var result_24708 = 0;

	BeforeRet: do {
			if (!(a_24706 <= i_24705)) Tmp1 = false; else {				Tmp1 = (i_24705 <= b_24707);			}		if (Tmp1) {
		result_24708 = i_24705;
		break BeforeRet;
		}
		else {
		raiseIndexError(i_24705, a_24706, b_24707);
		}
		
	} while (false);

	return result_24708;

}

function addInt(a_23603, b_23604) {
		    var result = a_23603 + b_23604;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

	
}

function divInt(a_23657, b_23658) {
		    if (b_23658 == 0) raiseDivByZero();
    if (b_23658 == -1 && a_23657 == 2147483647) raiseOverflow();
    return Math.trunc(a_23657 / b_23658);
  

	
}

function subInt(a_23621, b_23622) {
		    var result = a_23621 - b_23622;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

	
}

function eqStrings(a_23483, b_23484) {
		    if (a_23483 == b_23484) return true;
    if (a_23483 === null && b_23484.length == 0) return true;
    if (b_23484 === null && a_23483.length == 0) return true;
    if ((!a_23483) || (!b_23484)) return false;
    var alen = a_23483.length;
    if (alen != b_23484.length) return false;
    for (var i = 0; i < alen; ++i)
      if (a_23483[i] != b_23484[i]) return false;
    return true;
  

	
}

function mulInt(a_23639, b_23640) {
		    var result = a_23639 * b_23640;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

	
}

function isObj(obj_24854, subclass_24855) {
	var result_24856 = false;

	BeforeRet: do {
		var x_24857 = obj_24854;
		if ((x_24857 == subclass_24855)) {
		result_24856 = true;
		break BeforeRet;
		}
		
		L1: do {
				L2: while (true) {
				if (!!((x_24857 == subclass_24855))) break L2;
					if ((x_24857 == null)) {
					result_24856 = false;
					break BeforeRet;
					}
					
					x_24857 = x_24857.base;
				}
		} while(false);
		result_24856 = true;
		break BeforeRet;
	} while (false);

	return result_24856;

}

function mnewString(len_23305) {
		    return new Array(len_23305);
  

	
}
var ConstSet2 = setConstr(59, 92, 94, 38, 37, 124, 44, 126);

function addChar(x_24895, c_24896) {
		x_24895.push(c_24896);

	
}

function nimMax(a_24021, b_24022) {
		var Tmp1;

	var result_24023 = 0;

	BeforeRet: do {
		if ((b_24022 <= a_24021)) {
		Tmp1 = a_24021;
		}
		else {
		Tmp1 = b_24022;
		}
		
		result_24023 = Tmp1;
		break BeforeRet;
	} while (false);

	return result_24023;

}

function nimMin(a_24003, b_24004) {
		var Tmp1;

	var result_24005 = 0;

	BeforeRet: do {
		if ((a_24003 <= b_24004)) {
		Tmp1 = a_24003;
		}
		else {
		Tmp1 = b_24004;
		}
		
		result_24005 = Tmp1;
		break BeforeRet;
	} while (false);

	return result_24005;

}
var ConstSet3 = setConstr(32, 9, 11, 13, 10, 12);
var ConstSet4 = setConstr(59, 92, 94, 38, 37, 124, 44, 126);

function rawEcho() {
		      var buf = "";
      for (var i = 0; i < arguments.length; ++i) {
        buf += toJSStr(arguments[i]);
      }
      console.log(buf);
    

	
}
var ConstSet5 = setConstr(120, 88);
var ConstSet6 = setConstr([48, 57]);
var ConstSet7 = setConstr([97, 122], [65, 90], [48, 57], 95);
var ConstSet8 = setConstr([97, 122], [65, 90], [48, 57], 95);
var ConstSet9 = setConstr([48, 57]);
var ConstSet10 = setConstr([48, 57]);
var ConstSet11 = setConstr(101, 69);
var ConstSet12 = setConstr([48, 57]);
var ConstSet13 = setConstr([48, 57]);

function nimParseBiggestFloat(s_24940, number_24942, number_24942_Idx, start_24943) {
	var result_24945 = 0;

	BeforeRet: do {
		var esign_24946 = 1.0000000000000000e+00;
		var sign_24947 = 1.0000000000000000e+00;
		var i_24948 = start_24943;
		var exponent_24949 = 0;
		var flags_24950 = 0;
		number_24942[number_24942_Idx] = 0.0;
		if ((s_24940[i_24948] == 43)) {
		i_24948 += 1;
		}
		else {
		if ((s_24940[i_24948] == 45)) {
		sign_24947 = -1.0000000000000000e+00;
		i_24948 += 1;
		}
		}
		if (((s_24940[i_24948] == 78) || (s_24940[i_24948] == 110))) {
		if (((s_24940[(i_24948 + 1)] == 65) || (s_24940[(i_24948 + 1)] == 97))) {
		if (((s_24940[(i_24948 + 2)] == 78) || (s_24940[(i_24948 + 2)] == 110))) {
		if (!((ConstSet7[s_24940[(i_24948 + 3)]] != undefined))) {
		number_24942[number_24942_Idx] = NaN;
		result_24945 = ((i_24948 + 3) - start_24943);
		break BeforeRet;
		}
		
		}
		
		}
		
		result_24945 = 0;
		break BeforeRet;
		}
		
		if (((s_24940[i_24948] == 73) || (s_24940[i_24948] == 105))) {
		if (((s_24940[(i_24948 + 1)] == 78) || (s_24940[(i_24948 + 1)] == 110))) {
		if (((s_24940[(i_24948 + 2)] == 70) || (s_24940[(i_24948 + 2)] == 102))) {
		if (!((ConstSet8[s_24940[(i_24948 + 3)]] != undefined))) {
		number_24942[number_24942_Idx] = (Infinity * sign_24947);
		result_24945 = ((i_24948 + 3) - start_24943);
		break BeforeRet;
		}
		
		}
		
		}
		
		result_24945 = 0;
		break BeforeRet;
		}
		
		L1: do {
				L2: while (true) {
				if (!(ConstSet9[s_24940[i_24948]] != undefined)) break L2;
					flags_24950 = (flags_24950 | 1);
					number_24942[number_24942_Idx] = ((number_24942[number_24942_Idx] * 1.0000000000000000e+01) + (s_24940[i_24948] - 48));
					i_24948 += 1;
					L3: do {
							L4: while (true) {
							if (!(s_24940[i_24948] == 95)) break L4;
								i_24948 += 1;
							}
					} while(false);
				}
		} while(false);
		if ((s_24940[i_24948] == 46)) {
		var hd_25004 = 1.0000000000000000e+00;
		i_24948 += 1;
		L5: do {
				L6: while (true) {
				if (!(ConstSet10[s_24940[i_24948]] != undefined)) break L6;
					flags_24950 = (flags_24950 | 2);
					number_24942[number_24942_Idx] = ((number_24942[number_24942_Idx] * 1.0000000000000000e+01) + (s_24940[i_24948] - 48));
					hd_25004 = (hd_25004 * 1.0000000000000000e+01);
					i_24948 += 1;
					L7: do {
							L8: while (true) {
							if (!(s_24940[i_24948] == 95)) break L8;
								i_24948 += 1;
							}
					} while(false);
				}
		} while(false);
		number_24942[number_24942_Idx] = (number_24942[number_24942_Idx] / hd_25004);
		}
		
		if ((flags_24950 == 0)) {
		result_24945 = 0;
		break BeforeRet;
		}
		
		if ((ConstSet11[s_24940[i_24948]] != undefined)) {
		i_24948 += 1;
		if ((s_24940[i_24948] == 43)) {
		i_24948 += 1;
		}
		else {
		if ((s_24940[i_24948] == 45)) {
		esign_24946 = -1.0000000000000000e+00;
		i_24948 += 1;
		}
		}
		if (!((ConstSet12[s_24940[i_24948]] != undefined))) {
		result_24945 = 0;
		break BeforeRet;
		}
		
		L9: do {
				L10: while (true) {
				if (!(ConstSet13[s_24940[i_24948]] != undefined)) break L10;
					exponent_24949 = (((exponent_24949 * 10) + s_24940[i_24948]) - 48);
					i_24948 += 1;
					L11: do {
							L12: while (true) {
							if (!(s_24940[i_24948] == 95)) break L12;
								i_24948 += 1;
							}
					} while(false);
				}
		} while(false);
		}
		
		var hd_25098 = ten_to_the_power_of_24910(exponent_24949);
		if ((0.0 < esign_24946)) {
		number_24942[number_24942_Idx] = (number_24942[number_24942_Idx] * hd_25098);
		}
		else {
			number_24942[number_24942_Idx] = (number_24942[number_24942_Idx] / hd_25098);
		}
		
		number_24942[number_24942_Idx] = (number_24942[number_24942_Idx] * sign_24947);
		result_24945 = (i_24948 - start_24943);
	} while (false);

	return result_24945;

}

function reraiseException() {
		if ((lastJSError == null)) {
		var e_21826 = null;
		e_21826 = {m_type: NTI4066, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		e_21826.message = nimCopy(null, makeNimstrLit("no exception to reraise"), NTI138);
		e_21826.parent = null;
		raiseException(e_21826, "ReraiseError");
		}
		else {
			if ((excHandler == 0)) {
			if (is_nim_exception_21077()) {
			unhandledException(lastJSError);
			}
			
			}
			
			throw lastJSError;
		}
		

	
}
var ConstSet14 = setConstr([48, 57]);
var ConstSet15 = setConstr([48, 57]);

function cmpStrings(a_23447, b_23448) {
		    if (a_23447 == b_23448) return 0;
    if (!a_23447) return -1;
    if (!b_23448) return 1;
    for (var i = 0; i < a_23447.length && i < b_23448.length; i++) {
      var result = a_23447[i] - b_23448[i];
      if (result != 0) return result;
    }
    return a_23447.length - b_23448.length;
  

	
}
var nim_program_result = 0;
var global_raise_hook_18618 = [null];
var local_raise_hook_18623 = [null];
var out_of_mem_hook_18626 = [null];
  if (!Math.trunc) {
    Math.trunc = function(v) {
      v = +v;
      if (!isFinite(v)) return v;

      return (v - v % 1)   ||   (v < 0 ? -0 : v === 0 ? v : 0);
    };
  }
var object_id_162237 = [0];

function new_seq_170472(len_170475) {
	var result_170477 = null;

		result_170477 = new Array(len_170475); for (var i=0;i<len_170475;++i) {result_170477[i]=null;}
	return result_170477;

}
var parser_exts_170506 = [new_seq_170472(0)];

function is_power_of_two_59062(x_59064) {
		var Tmp1;

	var result_59065 = false;

	BeforeRet: do {
		if (!(0 < x_59064)) Tmp1 = false; else {			Tmp1 = ((x_59064 & (x_59064 - 1)) == 0);		}		result_59065 = Tmp1;
		break BeforeRet;
	} while (false);

	return result_59065;

}

function is_fat_pointer_24401(ti_24403) {
	var result_24404 = false;

	BeforeRet: do {
		result_24404 = !((ConstSet1[ti_24403.base.kind] != undefined));
		break BeforeRet;
	} while (false);

	return result_24404;

}

function nimCopyAux(dest_24432, src_24433, n_24435) {
		switch (n_24435.kind) {
		case 0:
			break;
		case 1:
			      dest_24432[n_24435.offset] = nimCopy(dest_24432[n_24435.offset], src_24433[n_24435.offset], n_24435.typ);
    
			break;
		case 2:
			    for (var i = 0; i < n_24435.sons.length; i++) {
      nimCopyAux(dest_24432, src_24433, n_24435.sons[i]);
    }
    
			break;
		case 3:
			      dest_24432[n_24435.offset] = nimCopy(dest_24432[n_24435.offset], src_24433[n_24435.offset], n_24435.typ);
      for (var i = 0; i < n_24435.sons.length; ++i) {
        nimCopyAux(dest_24432, src_24433, n_24435.sons[i][1]);
      }
    
			break;
		}

	
}

function add_18638(x_18641, x_18641_Idx, y_18642) {
		      if (x_18641[x_18641_Idx] === null) { x_18641[x_18641_Idx] = []; }
      var off = x_18641[x_18641_Idx].length;
      x_18641[x_18641_Idx].length += y_18642.length;
      for (var i = 0; i < y_18642.length; ++i) {
        x_18641[x_18641_Idx][off+i] = y_18642.charCodeAt(i);
      }
    

	
}

function unhandledException(e_21529) {
		var buf_21530 = [[]];
		if (!(((e_21529.message != null ? e_21529.message.length : 0) == 0))) {
		if (buf_21530[0] != null) { buf_21530[0] = (buf_21530[0]).concat(makeNimstrLit("Error: unhandled exception: ")); } else { buf_21530[0] = makeNimstrLit("Error: unhandled exception: "); };
		if (buf_21530[0] != null) { buf_21530[0] = (buf_21530[0]).concat(e_21529.message); } else { buf_21530[0] = e_21529.message.slice(); };
		}
		else {
		if (buf_21530[0] != null) { buf_21530[0] = (buf_21530[0]).concat(makeNimstrLit("Error: unhandled exception")); } else { buf_21530[0] = makeNimstrLit("Error: unhandled exception"); };
		}
		
		if (buf_21530[0] != null) { buf_21530[0] = (buf_21530[0]).concat(makeNimstrLit(" [")); } else { buf_21530[0] = makeNimstrLit(" ["); };
		add_18638(buf_21530, 0, e_21529.name);
		if (buf_21530[0] != null) { buf_21530[0] = (buf_21530[0]).concat(makeNimstrLit("]\x0A")); } else { buf_21530[0] = makeNimstrLit("]\x0A"); };
		var cbuf_21601 = toJSStr(buf_21530[0]);
		framePtr = null;
		  if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_21601);
  }
  else {
    throw cbuf_21601;
  }
  

	
}

function sys_fatal_14862(message_14866) {
		var e_15003 = null;
		e_15003 = {m_type: NTI4050, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		e_15003.message = nimCopy(null, message_14866, NTI138);
		raiseException(e_15003, "AssertionError");

	
}

function raise_assert_14858(msg_14860) {
		sys_fatal_14862(msg_14860);

	
}

function failed_assert_impl_15051(msg_15053) {
		raise_assert_14858(msg_15053);

	
}

function raiseRangeError() {
		var e_22441 = null;
		e_22441 = {m_type: NTI4062, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		e_22441.message = nimCopy(null, makeNimstrLit("value out of range"), NTI138);
		e_22441.parent = null;
		raiseException(e_22441, "RangeError");

	
}

function init_table_181642(initial_size_181646) {
	var result_181648 = {data: null, counter: 0};

		if (!(is_power_of_two_59062(initial_size_181646))) {
		failed_assert_impl_15051(makeNimstrLit("tableimpl.nim(118, 10) `isPowerOfTwo(initialSize)` "));
		}
		
		result_181648.counter = 0;
		result_181648.data = new Array(chckRange(initial_size_181646, 0, 2147483647)); for (var i=0;i<chckRange(initial_size_181646, 0, 2147483647);++i) {result_181648.data[i]={Field0: 0, Field1: null, Field2: null};}
	return result_181648;

}

function new_map_181637() {
	var result_181639 = null;

		result_181639 = {bindings: init_table_181642(64), m_type: NTI170223, tags: null};

	return result_181639;

}

function new_seq_186216(len_186219) {
	var result_186221 = null;

		result_186221 = new Array(len_186219); for (var i=0;i<len_186219;++i) {result_186221[i]=null;}
	return result_186221;

}

function new_seq_188380(len_188383) {
	var result_188385 = null;

		result_188385 = new Array(len_188383); for (var i=0;i<len_188383;++i) {result_188385[i]=null;}
	return result_188385;

}

function init_table_188416(initial_size_188420) {
	var result_188422 = {data: null, counter: 0};

		if (!(is_power_of_two_59062(initial_size_188420))) {
		failed_assert_impl_15051(makeNimstrLit("tableimpl.nim(118, 10) `isPowerOfTwo(initialSize)` "));
		}
		
		result_188422.counter = 0;
		result_188422.data = new Array(chckRange(initial_size_188420, 0, 2147483647)); for (var i=0;i<chckRange(initial_size_188420, 0, 2147483647);++i) {result_188422.data[i]={Field0: 0, Field1: null, Field2: null};}
	return result_188422;

}

function raiseIndexError(i_22639, a_22640, b_22641) {
		var Tmp1;

		var e_22802 = null;
		e_22802 = {m_type: NTI4058, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		if ((b_22641 < a_22640)) {
		Tmp1 = makeNimstrLit("index out of bounds, the container is empty");
		}
		else {
		Tmp1 = (makeNimstrLit("index ") || []).concat(cstrToNimstr((i_22639)+"") || [],makeNimstrLit(" not in ") || [],cstrToNimstr((a_22640)+"") || [],makeNimstrLit(" .. ") || [],cstrToNimstr((b_22641)+"") || []);
		}
		
		e_22802.message = nimCopy(null, Tmp1, NTI138);
		e_22802.parent = null;
		raiseException(e_22802, "IndexError");

	
}

function raiseOverflow() {
		var e_22042 = null;
		e_22042 = {m_type: NTI4046, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		e_22042.message = nimCopy(null, makeNimstrLit("over- or underflow"), NTI138);
		e_22042.parent = null;
		raiseException(e_22042, "OverflowError");

	
}

function new_parser_188358() {
	var result_188360 = null;

		result_188360 = {stack: new_seq_186216(0), valueParsers: new_seq_188380(0), litWords: init_table_188416(64), token: null, specialCharDetected: false, ws: null};
		if (result_188360.valueParsers != null) { result_188360.valueParsers.push({m_type: NTI170140, token: null}); } else { result_188360.valueParsers = [{m_type: NTI170140, token: null}]; };
		if (result_188360.valueParsers != null) { result_188360.valueParsers.push({m_type: NTI170136, token: null}); } else { result_188360.valueParsers = [{m_type: NTI170136, token: null}]; };
		if (result_188360.valueParsers != null) { result_188360.valueParsers.push({m_type: NTI170138, token: null}); } else { result_188360.valueParsers = [{m_type: NTI170138, token: null}]; };
		L1: do {
			var ex_189014 = null;
			var i_198042 = 0;
			var l_198043 = (parser_exts_170506[0] != null ? parser_exts_170506[0].length : 0);
			L2: do {
					L3: while (true) {
					if (!(i_198042 < l_198043)) break L3;
						ex_189014 = parser_exts_170506[0][chckIndx(i_198042, 0, parser_exts_170506[0].length+0-1)-0];
						ex_189014(result_188360);
						i_198042 = addInt(i_198042, 1);
						if (!(((parser_exts_170506[0] != null ? parser_exts_170506[0].length : 0) == l_198043))) {
						failed_assert_impl_15051(makeNimstrLit("iterators.nim(190, 11) `len(a) == L` the length of the seq changed while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);

	return result_188360;

}

function new_value_186616(v_186618) {
		var Tmp1;

	var result_186619 = null;

		if (v_186618) {
		Tmp1 = {m_type: NTI170202, tags: null};
		}
		else {
		Tmp1 = {m_type: NTI170204, tags: null};
		}
		
		result_186619 = Tmp1;

	return result_186619;

}

function new_nil_val_186649() {
	var result_186651 = null;

		result_186651 = {m_type: NTI170208, tags: null};

	return result_186651;

}

function new_undef_val_186680() {
	var result_186682 = null;

		result_186682 = {m_type: NTI170206, tags: null};

	return result_186682;

}

function new_blok_186326() {
	var result_186328 = null;

		result_186328 = {nodes: new_seq_186216(0), m_type: NTI170220, pos: 0, tags: null};

	return result_186328;

}

function raiseDivByZero() {
		var e_22241 = null;
		e_22241 = {m_type: NTI4044, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		e_22241.message = nimCopy(null, makeNimstrLit("division by zero"), NTI138);
		e_22241.parent = null;
		raiseException(e_22241, "DivByZeroError");

	
}

function HEX21HEX26_162059(h_162061, val_162062) {
	var result_162063 = 0;

		var h_162064 = (h_162061 >>> 0);
		var val_162065 = (val_162062 >>> 0);
		var res_162071 = ((h_162064 + val_162065) >>> 0);
		res_162071 = ((res_162071 + (res_162071 << 10)) >>> 0);
		res_162071 = (res_162071 ^ ((res_162071 >>> 0) >>> 6));
		result_162063 = (res_162071|0);

	return result_162063;

}

function hash_162869(x_162871) {
	var result_162872 = 0;

		result_162872 = x_162871;

	return result_162872;

}

function HEX21HEX24_162109(h_162111) {
	var result_162112 = 0;

		var h_162113 = (h_162111 >>> 0);
		var res_162126 = ((h_162113 + (h_162113 << 3)) >>> 0);
		res_162126 = (res_162126 ^ ((res_162126 >>> 0) >>> 11));
		res_162126 = ((res_162126 + (res_162126 << 15)) >>> 0);
		result_162112 = (res_162126|0);

	return result_162112;

}

function hash_162980(x_162982) {
	var result_162983 = 0;

		var element_size_162985 = 1;
		var step_size_162986 = divInt(4, element_size_162985);
		var i_162987 = 0;
		L1: do {
				L2: while (true) {
				if (!(i_162987 <= subInt(addInt((x_162982 != null ? (x_162982.length-1) : -1), 1), step_size_162986))) break L2;
					var n_162988 = 0;
					n_162988 = x_162982[chckIndx(i_162987, 0, x_162982.length+0-1)-0];
					result_162983 = HEX21HEX26_162059(result_162983, n_162988);
					i_162987 = addInt(i_162987, step_size_162986);
				}
		} while(false);
		L3: do {
			var i_163207 = 0;
			var colontmp__198074 = 0;
			colontmp__198074 = (x_162982 != null ? (x_162982.length-1) : -1);
			var res_198075 = i_162987;
			L4: do {
					L5: while (true) {
					if (!(res_198075 <= colontmp__198074)) break L5;
						i_163207 = res_198075;
						result_162983 = HEX21HEX26_162059(result_162983, hash_162869(x_162982[chckIndx(i_163207, 0, x_162982.length+0-1)-0]));
						res_198075 = addInt(res_198075, 1);
					}
			} while(false);
		} while(false);
		result_162983 = HEX21HEX24_162109(result_162983);

	return result_162983;

}

function is_filled_166418(hcode_166420) {
	var result_166421 = false;

		result_166421 = !((hcode_166420 == 0));

	return result_166421;

}

function next_try_166435(h_166437, max_hash_166438) {
	var result_166439 = 0;

		result_166439 = (addInt(h_166437, 1) & max_hash_166438);

	return result_166439;

}

function raw_get_182230(t_182234, key_182235, hc_182236, hc_182236_Idx) {
						var Tmp3;

	var result_182237 = 0;

	BeforeRet: do {
		hc_182236[hc_182236_Idx] = hash_162980(key_182235);
		if ((hc_182236[hc_182236_Idx] == 0)) {
		hc_182236[hc_182236_Idx] = 314159265;
		}
		
		if (((t_182234.data != null ? t_182234.data.length : 0) == 0)) {
		result_182237 = -1;
		break BeforeRet;
		}
		
		var h_182379 = (hc_182236[hc_182236_Idx] & (t_182234.data != null ? (t_182234.data.length-1) : -1));
		L1: do {
				L2: while (true) {
				if (!is_filled_166418(t_182234.data[chckIndx(h_182379, 0, t_182234.data.length+0-1)-0].Field0)) break L2;
						if (!(t_182234.data[chckIndx(h_182379, 0, t_182234.data.length+0-1)-0].Field0 == hc_182236[hc_182236_Idx])) Tmp3 = false; else {							Tmp3 = eqStrings(t_182234.data[chckIndx(h_182379, 0, t_182234.data.length+0-1)-0].Field1, key_182235);						}					if (Tmp3) {
					result_182237 = h_182379;
					break BeforeRet;
					}
					
					h_182379 = next_try_166435(h_182379, (t_182234.data != null ? (t_182234.data.length-1) : -1));
				}
		} while(false);
		result_182237 = subInt(-1, h_182379);
	} while (false);

	return result_182237;

}

function has_key_182221(t_182226, key_182227) {
	var result_182228 = false;

		var hc_182229 = [0];
		result_182228 = (0 <= raw_get_182230(t_182226, key_182227, hc_182229, 0));

	return result_182228;

}

function HEX5BHEX5D_183005(t_183011, key_183012) {
	var result_183014 = null;
	var result_183014_Idx = 0;

		var hc_183015 = [0];
		var index_183016 = raw_get_182230(t_183011, key_183012, hc_183015, 0);
		if ((0 <= index_183016)) {
		result_183014 = t_183011.data[chckIndx(index_183016, 0, t_183011.data.length+0-1)-0]; result_183014_Idx = "Field2";
		}
		else {
			var e_183203 = null;
			e_183203 = {m_type: NTI4054, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
			e_183203.message = nimCopy(null, (makeNimstrLit("key not found: ") || []).concat(key_183012 || []), NTI138);
			e_183203.parent = null;
			raiseException(e_183203, "KeyError");
		}
		

	return [result_183014, result_183014_Idx];

}

function must_rehash_166453(length_166455, counter_166456) {
	var result_166457 = false;

		if (!((counter_166456 < length_166455))) {
		failed_assert_impl_15051(makeNimstrLit("hashcommon.nim(33, 9) `length > counter` "));
		}
		
		result_166457 = ((mulInt(length_166455, 2) < mulInt(counter_166456, 3)) || (subInt(length_166455, counter_166456) < 4));

	return result_166457;

}

function raw_insert_185108(t_185114, data_185117, data_185117_Idx, key_185118, val_185119, hc_185120, h_185121) {
		data_185117[data_185117_Idx][chckIndx(h_185121, 0, data_185117[data_185117_Idx].length+0-1)-0].Field1 = nimCopy(null, key_185118, NTI138);
		data_185117[data_185117_Idx][chckIndx(h_185121, 0, data_185117[data_185117_Idx].length+0-1)-0].Field2 = val_185119;
		data_185117[data_185117_Idx][chckIndx(h_185121, 0, data_185117[data_185117_Idx].length+0-1)-0].Field0 = hc_185120;

	
}

function enlarge_184148(t_184154) {
		var n_184162 = null;
		n_184162 = new Array(chckRange(mulInt((t_184154.data != null ? t_184154.data.length : 0), 2), 0, 2147483647)); for (var i=0;i<chckRange(mulInt((t_184154.data != null ? t_184154.data.length : 0), 2), 0, 2147483647);++i) {n_184162[i]={Field0: 0, Field1: null, Field2: null};}		var Tmp1 = t_184154.data; t_184154.data = n_184162; n_184162 = Tmp1;		L2: do {
			var i_184321 = 0;
			var colontmp__198087 = 0;
			colontmp__198087 = (n_184162 != null ? (n_184162.length-1) : -1);
			var res_198092 = 0;
			L3: do {
					L4: while (true) {
					if (!(res_198092 <= colontmp__198087)) break L4;
						i_184321 = res_198092;
						var eh_184470 = n_184162[chckIndx(i_184321, 0, n_184162.length+0-1)-0].Field0;
						if (is_filled_166418(eh_184470)) {
						var j_184477 = (eh_184470 & (t_184154.data != null ? (t_184154.data.length-1) : -1));
						L5: do {
								L6: while (true) {
								if (!is_filled_166418(t_184154.data[chckIndx(j_184477, 0, t_184154.data.length+0-1)-0].Field0)) break L6;
									j_184477 = next_try_166435(j_184477, (t_184154.data != null ? (t_184154.data.length-1) : -1));
								}
						} while(false);
						raw_insert_185108(t_184154, t_184154, "data", n_184162[chckIndx(i_184321, 0, n_184162.length+0-1)-0].Field1, n_184162[chckIndx(i_184321, 0, n_184162.length+0-1)-0].Field2, eh_184470, j_184477);
						}
						
						res_198092 = addInt(res_198092, 1);
					}
			} while(false);
		} while(false);

	
}

function raw_get_deep_185624(t_185628, key_185629, hc_185630, hc_185630_Idx) {
	var result_185631 = 0;

		hc_185630[hc_185630_Idx] = hash_162980(key_185629);
		if ((hc_185630[hc_185630_Idx] == 0)) {
		hc_185630[hc_185630_Idx] = 314159265;
		}
		
		var h_185641 = (hc_185630[hc_185630_Idx] & (t_185628.data != null ? (t_185628.data.length-1) : -1));
		L1: do {
				L2: while (true) {
				if (!is_filled_166418(t_185628.data[chckIndx(h_185641, 0, t_185628.data.length+0-1)-0].Field0)) break L2;
					h_185641 = next_try_166435(h_185641, (t_185628.data != null ? (t_185628.data.length-1) : -1));
				}
		} while(false);
		result_185631 = h_185641;

	return result_185631;

}

function add_183511(t_183517, key_183518, val_183519) {
		if (((t_183517.data != null ? t_183517.data.length : 0) == 0)) {
		if (!(is_power_of_two_59062(64))) {
		failed_assert_impl_15051(makeNimstrLit("tableimpl.nim(118, 10) `isPowerOfTwo(defaultInitialSize)` "));
		}
		
		t_183517.counter = 0;
		t_183517.data = new Array(64); for (var i=0;i<64;++i) {t_183517.data[i]={Field0: 0, Field1: null, Field2: null};}		}
		
		if (must_rehash_166453((t_183517.data != null ? t_183517.data.length : 0), t_183517.counter)) {
		enlarge_184148(t_183517);
		}
		
		var hc_185623 = [0];
		var j_185810 = raw_get_deep_185624(t_183517, key_183518, hc_185623, 0);
		raw_insert_185108(t_183517, t_183517, "data", key_183518, val_183519, hc_185623[0], j_185810);
		t_183517.counter = addInt(t_183517.counter, 1);

	
}

function new_or_get_lit_word_182107(self_182109, s_182110) {
		var Tmp1;

	var result_182111 = null;

	BeforeRet: do {
		if (has_key_182221(self_182109.litWords, s_182110)) {
		result_182111 = (Tmp1 = HEX5BHEX5D_183005(self_182109.litWords, s_182110), Tmp1)[0][Tmp1[1]];
		break BeforeRet;
		}
		else {
			result_182111 = {word: nimCopy(null, s_182110, NTI138), m_type: NTI170152, tags: null};
			add_183511(self_182109.litWords, s_182110, result_182111);
		}
		
	} while (false);

	return result_182111;

}

function raw_get_174354(t_174358, key_174359, hc_174360, hc_174360_Idx) {
						var Tmp3;

	var result_174361 = 0;

	BeforeRet: do {
		hc_174360[hc_174360_Idx] = hash_172312(key_174359);
		if ((hc_174360[hc_174360_Idx] == 0)) {
		hc_174360[hc_174360_Idx] = 314159265;
		}
		
		if (((t_174358.data != null ? t_174358.data.length : 0) == 0)) {
		result_174361 = -1;
		break BeforeRet;
		}
		
		var h_174501 = (hc_174360[hc_174360_Idx] & (t_174358.data != null ? (t_174358.data.length-1) : -1));
		L1: do {
				L2: while (true) {
				if (!is_filled_166418(t_174358.data[chckIndx(h_174501, 0, t_174358.data.length+0-1)-0].Field0)) break L2;
						if (!(t_174358.data[chckIndx(h_174501, 0, t_174358.data.length+0-1)-0].Field0 == hc_174360[hc_174360_Idx])) Tmp3 = false; else {							Tmp3 = HEX3DHEX3D_172333(t_174358.data[chckIndx(h_174501, 0, t_174358.data.length+0-1)-0].Field1, key_174359);						}					if (Tmp3) {
					result_174361 = h_174501;
					break BeforeRet;
					}
					
					h_174501 = next_try_166435(h_174501, (t_174358.data != null ? (t_174358.data.length-1) : -1));
				}
		} while(false);
		result_174361 = subInt(-1, h_174501);
	} while (false);

	return result_174361;

}

function has_key_175256(t_175261, key_175262) {
	var result_175263 = false;

		var hc_175264 = [0];
		result_175263 = (0 <= raw_get_174354(t_175261, key_175262, hc_175264, 0));

	return result_175263;

}

function HEX5BHEX5D_175431(t_175437, key_175438) {
	var result_175440 = null;
	var result_175440_Idx = 0;

		var hc_175441 = [0];
		var index_175442 = raw_get_174354(t_175437, key_175438, hc_175441, 0);
		if ((0 <= index_175442)) {
		result_175440 = t_175437.data[chckIndx(index_175442, 0, t_175437.data.length+0-1)-0]; result_175440_Idx = "Field2";
		}
		else {
			var e_175802 = null;
			e_175802 = {m_type: NTI4054, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
			e_175802.message = nimCopy(null, (makeNimstrLit("key not found: ") || []).concat(HEX24_170617(key_175438) || []), NTI138);
			e_175802.parent = null;
			raiseException(e_175802, "KeyError");
		}
		

	return [result_175440, result_175440_Idx];

}

function is_empty_166401(hcode_166403) {
	var result_166404 = false;

		result_166404 = (hcode_166403 == 0);

	return result_166404;

}

function del_176126(t_176132, key_176133) {
										var Tmp6;
										var Tmp7;
										var Tmp8;
											var Tmp9;
											var Tmp10;

		var hc_176138 = [0];
		var i_176147 = raw_get_174354(t_176132, key_176133, hc_176138, 0);
		var msk_176134 = (t_176132.data != null ? (t_176132.data.length-1) : -1);
		if ((0 <= i_176147)) {
		t_176132.counter = subInt(t_176132.counter, 1);
		L1: do {
			L2: do {
					L3: while (true) {
					if (!true) break L3;
						var j_176136 = i_176147;
						var r_176137 = j_176136;
						t_176132.data[chckIndx(i_176147, 0, t_176132.data.length+0-1)-0].Field0 = 0;
						t_176132.data[chckIndx(i_176147, 0, t_176132.data.length+0-1)-0].Field1 = null;
						t_176132.data[chckIndx(i_176147, 0, t_176132.data.length+0-1)-0].Field2 = null;
						L4: do {
								L5: while (true) {
								if (!true) break L5;
									i_176147 = (addInt(i_176147, 1) & msk_176134);
									if (is_empty_166401(t_176132.data[chckIndx(i_176147, 0, t_176132.data.length+0-1)-0].Field0)) {
									break L1;
									}
									
									r_176137 = (t_176132.data[chckIndx(i_176147, 0, t_176132.data.length+0-1)-0].Field0 & msk_176134);
										if (!(r_176137 <= i_176147)) Tmp8 = false; else {											Tmp8 = (j_176136 < r_176137);										}										if (Tmp8) Tmp7 = true; else {											if (!(j_176136 < r_176137)) Tmp9 = false; else {												Tmp9 = (i_176147 < j_176136);											}											Tmp7 = Tmp9;										}										if (Tmp7) Tmp6 = true; else {											if (!(i_176147 < j_176136)) Tmp10 = false; else {												Tmp10 = (r_176137 <= i_176147);											}											Tmp6 = Tmp10;										}									if (!(Tmp6)) {
									break L4;
									}
									
								}
						} while(false);
						nimCopy(t_176132.data[chckIndx(j_176136, 0, t_176132.data.length+0-1)-0], t_176132.data[chckIndx(i_176147, 0, t_176132.data.length+0-1)-0], NTI170239);
					}
			} while(false);
		} while(false);
		}
		

	
}

function remove_binding_175142(self_175144, key_175145) {
		var Tmp1;

	var result_175146 = null;

		if (has_key_175256(self_175144.bindings, key_175145)) {
		result_175146 = (Tmp1 = HEX5BHEX5D_175431(self_175144.bindings, key_175145), Tmp1)[0][Tmp1[1]];
		del_176126(self_175144.bindings, key_175145);
		}
		

	return result_175146;

}

function raw_insert_180308(t_180314, data_180317, data_180317_Idx, key_180318, val_180319, hc_180320, h_180321) {
		data_180317[data_180317_Idx][chckIndx(h_180321, 0, data_180317[data_180317_Idx].length+0-1)-0].Field1 = key_180318;
		data_180317[data_180317_Idx][chckIndx(h_180321, 0, data_180317[data_180317_Idx].length+0-1)-0].Field2 = val_180319;
		data_180317[data_180317_Idx][chckIndx(h_180321, 0, data_180317[data_180317_Idx].length+0-1)-0].Field0 = hc_180320;

	
}

function enlarge_179348(t_179354) {
		var n_179362 = null;
		n_179362 = new Array(chckRange(mulInt((t_179354.data != null ? t_179354.data.length : 0), 2), 0, 2147483647)); for (var i=0;i<chckRange(mulInt((t_179354.data != null ? t_179354.data.length : 0), 2), 0, 2147483647);++i) {n_179362[i]={Field0: 0, Field1: null, Field2: null};}		var Tmp1 = t_179354.data; t_179354.data = n_179362; n_179362 = Tmp1;		L2: do {
			var i_179521 = 0;
			var colontmp__198106 = 0;
			colontmp__198106 = (n_179362 != null ? (n_179362.length-1) : -1);
			var res_198107 = 0;
			L3: do {
					L4: while (true) {
					if (!(res_198107 <= colontmp__198106)) break L4;
						i_179521 = res_198107;
						var eh_179670 = n_179362[chckIndx(i_179521, 0, n_179362.length+0-1)-0].Field0;
						if (is_filled_166418(eh_179670)) {
						var j_179677 = (eh_179670 & (t_179354.data != null ? (t_179354.data.length-1) : -1));
						L5: do {
								L6: while (true) {
								if (!is_filled_166418(t_179354.data[chckIndx(j_179677, 0, t_179354.data.length+0-1)-0].Field0)) break L6;
									j_179677 = next_try_166435(j_179677, (t_179354.data != null ? (t_179354.data.length-1) : -1));
								}
						} while(false);
						raw_insert_180308(t_179354, t_179354, "data", n_179362[chckIndx(i_179521, 0, n_179362.length+0-1)-0].Field1, n_179362[chckIndx(i_179521, 0, n_179362.length+0-1)-0].Field2, eh_179670, j_179677);
						}
						
						res_198107 = addInt(res_198107, 1);
					}
			} while(false);
		} while(false);

	
}

function raw_get_known_hc_180808(t_180812, key_180813, hc_180814) {
	var result_180815 = 0;

	BeforeRet: do {
		if (((t_180812.data != null ? t_180812.data.length : 0) == 0)) {
		result_180815 = -1;
		break BeforeRet;
		}
		
		var h_180954 = (hc_180814 & (t_180812.data != null ? (t_180812.data.length-1) : -1));
		L1: do {
				L2: while (true) {
				if (!is_filled_166418(t_180812.data[chckIndx(h_180954, 0, t_180812.data.length+0-1)-0].Field0)) break L2;
					if (((t_180812.data[chckIndx(h_180954, 0, t_180812.data.length+0-1)-0].Field0 == hc_180814) && HEX3DHEX3D_172333(t_180812.data[chckIndx(h_180954, 0, t_180812.data.length+0-1)-0].Field1, key_180813))) {
					result_180815 = h_180954;
					break BeforeRet;
					}
					
					h_180954 = next_try_166435(h_180954, (t_180812.data != null ? (t_180812.data.length-1) : -1));
				}
		} while(false);
		result_180815 = subInt(-1, h_180954);
	} while (false);

	return result_180815;

}

function HEX5BHEX5DHEX3D_178036(t_178042, key_178043, val_178044) {
		if (((t_178042.data != null ? t_178042.data.length : 0) == 0)) {
		if (!(is_power_of_two_59062(64))) {
		failed_assert_impl_15051(makeNimstrLit("tableimpl.nim(118, 10) `isPowerOfTwo(defaultInitialSize)` "));
		}
		
		t_178042.counter = 0;
		t_178042.data = new Array(64); for (var i=0;i<64;++i) {t_178042.data[i]={Field0: 0, Field1: null, Field2: null};}		}
		
		var hc_178601 = [0];
		var index_178610 = raw_get_174354(t_178042, key_178043, hc_178601, 0);
		if ((0 <= index_178610)) {
		t_178042.data[chckIndx(index_178610, 0, t_178042.data.length+0-1)-0].Field2 = val_178044;
		}
		else {
			if (((t_178042.data != null ? t_178042.data.length : 0) == 0)) {
			if (!(is_power_of_two_59062(64))) {
			failed_assert_impl_15051(makeNimstrLit("tableimpl.nim(118, 10) `isPowerOfTwo(defaultInitialSize)` "));
			}
			
			t_178042.counter = 0;
			t_178042.data = new Array(64); for (var i=0;i<64;++i) {t_178042.data[i]={Field0: 0, Field1: null, Field2: null};}			}
			
			if (must_rehash_166453((t_178042.data != null ? t_178042.data.length : 0), t_178042.counter)) {
			enlarge_179348(t_178042);
			index_178610 = raw_get_known_hc_180808(t_178042, key_178043, hc_178601[0]);
			}
			
			index_178610 = subInt(-1, index_178610);
			raw_insert_180308(t_178042, t_178042, "data", key_178043, val_178044, hc_178601[0], index_178610);
			t_178042.counter = addInt(t_178042.counter, 1);
		}
		

	
}

function make_binding_177643(self_177645, key_177646, val_177647) {
		var Tmp1;

	var result_177648 = null;

	BeforeRet: do {
		if (isObj(val_177647.m_type, NTI170206)) {
		result_177648 = remove_binding_175142(self_177645, key_177646);
		break BeforeRet;
		}
		
		if (has_key_175256(self_177645.bindings, key_177646)) {
		result_177648 = (Tmp1 = HEX5BHEX5D_175431(self_177645.bindings, key_177646), Tmp1)[0][Tmp1[1]];
		result_177648.val = val_177647;
		result_177648.key = key_177646;
		}
		else {
			result_177648 = {key: key_177646, val: val_177647, m_type: NTI170248, tags: null};
			HEX5BHEX5DHEX3D_178036(self_177645.bindings, key_177646, result_177648);
		}
		
	} while (false);

	return result_177648;

}

function new_eval_word_182075(s_182077) {
	var result_182078 = null;

		result_182078 = {word: nimCopy(null, s_182077, NTI138), m_type: NTI170154, tags: null};

	return result_182078;

}

function make_word_192991(self_192993, word_192994, value_192995) {
		make_binding_177643(self_192993.root, new_eval_word_182075(word_192994), value_192995);

	
}

function new_root_activation_191167(root_191169) {
	var result_191170 = null;

		result_191170 = {body: new_blok_186326(), locals: root_191169, m_type: NTI190493, last: null, self: null, returned: false, parent: null, pos: 0, tags: null};

	return result_191170;

}

function new_interpreter_194012() {
			var Tmp1;

	var result_194014 = null;

		var spry_194015 = {root: new_map_181637(), parser: new_parser_188358(), currentActivation: null, rootActivation: null, lastSelf: null, modules: null, trueVal: null, falseVal: null, undefVal: null, nilVal: null, emptyBlok: null, objectTag: null, moduleTag: null};
		result_194014 = spry_194015;
		spry_194015.trueVal = new_value_186616(true);
		spry_194015.falseVal = new_value_186616(false);
		spry_194015.nilVal = new_nil_val_186649();
		spry_194015.undefVal = new_undef_val_186680();
		spry_194015.emptyBlok = new_blok_186326();
		spry_194015.objectTag = new_or_get_lit_word_182107(spry_194015.parser, makeNimstrLit("object"));
		spry_194015.moduleTag = new_or_get_lit_word_182107(spry_194015.parser, makeNimstrLit("module"));
		spry_194015.modules = new_blok_186326();
		make_word_192991(spry_194015, makeNimstrLit("false"), spry_194015.falseVal);
		make_word_192991(spry_194015, makeNimstrLit("true"), spry_194015.trueVal);
		make_word_192991(spry_194015, makeNimstrLit("undef"), spry_194015.undefVal);
		make_word_192991(spry_194015, makeNimstrLit("nil"), spry_194015.nilVal);
		make_word_192991(spry_194015, makeNimstrLit("modules"), spry_194015.modules);
		spry_194015.rootActivation = new_root_activation_191167(spry_194015.root);
		spry_194015.rootActivation.parent = spry_194015.currentActivation;
			if (!(spry_194015.rootActivation.self == null)) Tmp1 = false; else {				Tmp1 = !((spry_194015.rootActivation.parent == null));			}		if (Tmp1) {
		spry_194015.rootActivation.self = spry_194015.rootActivation.parent.self;
		}
		
		spry_194015.currentActivation = spry_194015.rootActivation;

	return result_194014;

}

function new_prim_func_191037(primitive_191039) {
	var result_191040 = null;

		result_191040 = {primitive: primitive_191039, m_type: NTI190465, tags: null};

	return result_191040;

}

function arg_parent_192604(spry_192606) {
	var result_192607 = null;

	BeforeRet: do {
		L1: do {
			var activation_192608 = null;
			var colontmp__198130 = null;
			colontmp__198130 = spry_192606.currentActivation;
			var activation_198136 = colontmp__198130;
			L2: do {
					L3: while (true) {
					if (!!(!(isObj(activation_198136.m_type, NTI190489)))) break L3;
						activation_198136 = activation_198136.parent;
					}
			} while(false);
			activation_198136 = activation_198136.parent;
			L4: do {
					L5: while (true) {
					if (!!((activation_198136 == null))) break L5;
						activation_192608 = activation_198136;
						result_192607 = activation_192608;
						break BeforeRet;
						activation_198136 = activation_198136.parent;
						L6: do {
								L7: while (true) {
								if (!!(!(isObj(activation_198136.m_type, NTI190489)))) break L7;
									activation_198136 = activation_198136.parent;
								}
						} while(false);
					}
			} while(false);
		} while(false);
	} while (false);

	return result_192607;

}

function self_192930(spry_192932) {
	var result_192933 = null;

		if ((spry_192932.currentActivation.self == null)) {
		spry_192932.currentActivation.self = spry_192932.undefVal;
		}
		
		result_192933 = spry_192932.currentActivation.self;

	return result_192933;

}

function new_prim_meth_191069(primitive_191071) {
	var result_191072 = null;

		result_191072 = {primitive: primitive_191071, m_type: NTI190468, tags: null};

	return result_191072;

}

function eval_arg_infix_192913(spry_192915) {
	var result_192916 = null;

		result_192916 = eval_190559(spry_192915.currentActivation.last, spry_192915);
		spry_192915.lastSelf = result_192916;

	return result_192916;

}

function len_191015(self_191017) {
	var result_191018 = 0;

		result_191018 = (self_191017.body.nodes != null ? self_191017.body.nodes.length : 0);

	return result_191018;

}

function at_end_192314(self_192316) {
	var result_192317 = false;

		result_192317 = (self_192316.pos == len_191015(self_192316));

	return result_192317;

}

function raise_runtime_exception_170382(msg_170384) {
		var e_170387 = null;
		e_170387 = {m_type: NTI170100, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		e_170387.message = nimCopy(null, msg_170384, NTI138);
		e_170387.parent = null;
		raiseException(e_170387, "RuntimeException");

	
}

function HEX5BHEX5D_190997(self_190999, i_191000) {
	var result_191001 = null;

		result_191001 = self_190999.body.nodes[chckIndx(i_191000, 0, self_190999.body.nodes.length+0-1)-0];

	return result_191001;

}

function next_192331(self_192333) {
	var result_192334 = null;

		if (at_end_192314(self_192333)) {
		raise_runtime_exception_170382(makeNimstrLit("End of current block, too few arguments?"));
		}
		else {
			result_192334 = HEX5BHEX5D_190997(self_192333, self_192333.pos);
			self_192333.pos = addInt(self_192333.pos, 1);
		}
		

	return result_192334;

}

function eval_arg_192974(spry_192976) {
	var result_192977 = null;

		result_192977 = eval_190559(next_192331(spry_192976.currentActivation), spry_192976);

	return result_192977;

}

function add_186711(self_186713, n_186714) {
		if (self_186713.nodes != null) { self_186713.nodes.push(n_186714); } else { self_186713.nodes = [n_186714]; };

	
}

function litify_193994(spry_193996, word_193997) {
	var result_193998 = null;

		result_193998 = new_or_get_lit_word_182107(spry_193996.parser, HEX24_170617(word_193997));

	return result_193998;

}

function bool_val_193009(val_193011, spry_193012) {
	var result_193013 = null;

		if (val_193011) {
		result_193013 = spry_193012.trueVal;
		}
		else {
			result_193013 = spry_193012.falseVal;
		}
		

	return result_193013;

}

function find_186819(a_186823, item_186824) {
	var result_186825 = 0;

	BeforeRet: do {
		L1: do {
			var i_186856 = null;
			var i_198147 = 0;
			L2: do {
					L3: while (true) {
					if (!(i_198147 < (a_186823 != null ? a_186823.length : 0))) break L3;
						i_186856 = a_186823[chckIndx(i_198147, 0, a_186823.length+0-1)-0];
						if (HEX3DHEX3D_172333(i_186856, item_186824)) {
						break BeforeRet;
						}
						
						result_186825 = addInt(result_186825, 1);
						i_198147 = addInt(i_198147, 1);
					}
			} while(false);
		} while(false);
		result_186825 = -1;
	} while (false);

	return result_186825;

}

function contains_186812(a_186816, item_186817) {
	var result_186818 = false;

	BeforeRet: do {
		result_186818 = (0 <= find_186819(a_186816, item_186817));
		break BeforeRet;
	} while (false);

	return result_186818;

}

function contains_186806(self_186808, n_186809) {
	var result_186810 = false;

		result_186810 = contains_186812(self_186808.nodes, n_186809);

	return result_186810;

}

function assign_192861(spry_192863, word_192864, val_192865) {
		make_binding_in_map_192747(spry_192863, word_192864, val_192865);

	
}

function arg_infix_192879(spry_192881) {
	var result_192882 = null;

		result_192882 = spry_192881.currentActivation.last;
		spry_192881.lastSelf = result_192882;

	return result_192882;

}

function get_or_default_174344(t_174349, key_174350) {
	var result_174351 = null;

		var hc_174352 = [0];
		var index_174353 = raw_get_174354(t_174349, key_174350, hc_174352, 0);
		if ((0 <= index_174353)) {
		result_174351 = t_174349.data[chckIndx(index_174353, 0, t_174349.data.length+0-1)-0].Field2;
		}
		

	return result_174351;

}

function lookup_174154(self_174156, key_174157) {
	var result_174158 = null;

		result_174158 = get_or_default_174344(self_174156.bindings, key_174157);

	return result_174158;

}

function lookup_192520(spry_192522, key_192523) {
										var Tmp6;
							var Tmp7;

	var result_192524 = null;

	BeforeRet: do {
		if (isObj(key_192523.m_type, NTI170156)) {
		var binding_192533 = lookup_192520(spry_192522, key_192523.module);
		if (!((binding_192533 == null))) {
		var module_192540 = binding_192533.val;
		if (!((module_192540 == null))) {
		result_192524 = lookup_174154(module_192540, key_192523);
		}
		
		}
		
		}
		else {
		if (isObj(key_192523.m_type, NTI170169)) {
		var binding_192555 = lookup_192520(spry_192522, key_192523.module);
		if (!((binding_192555 == null))) {
		var module_192562 = binding_192555.val;
		if (!((module_192562 == null))) {
		result_192524 = lookup_174154(module_192562, key_192523);
		}
		
		}
		
		}
		else {
			L1: do {
				var activation_192569 = null;
				var colontmp__198152 = null;
				colontmp__198152 = spry_192522.currentActivation;
				var activation_198153 = colontmp__198152;
				L2: do {
						L3: while (true) {
						if (!!((activation_198153 == null))) break L3;
							L4: do {
									L5: while (true) {
									if (!!(!(isObj(activation_198153.m_type, NTI190489)))) break L5;
										if (isObj(activation_198153.m_type, NTI190487)) {
										Tmp6 = activation_198153.body.parent;
										}
										else {
										Tmp6 = activation_198153.parent;
										}
										
										activation_198153 = Tmp6;
									}
							} while(false);
							activation_192569 = activation_198153;
							var hit_192570 = lookup_192493(activation_192569, key_192523);
							if (!((hit_192570 == null))) {
							result_192524 = hit_192570;
							break BeforeRet;
							}
							
							if (isObj(activation_198153.m_type, NTI190487)) {
							Tmp7 = activation_198153.body.parent;
							}
							else {
							Tmp7 = activation_198153.parent;
							}
							
							activation_198153 = Tmp7;
						}
				} while(false);
			} while(false);
			L8: do {
				var map_192583 = null;
				var colontmp__198160 = null;
				colontmp__198160 = spry_192522.modules.nodes;
				var i_198162 = 0;
				var l_198163 = (colontmp__198160 != null ? colontmp__198160.length : 0);
				L9: do {
						L10: while (true) {
						if (!(i_198162 < l_198163)) break L10;
							map_192583 = colontmp__198160[chckIndx(i_198162, 0, colontmp__198160.length+0-1)-0];
							var hit_192584 = lookup_174154(map_192583, key_192523);
							if (!((hit_192584 == null))) {
							result_192524 = hit_192584;
							break BeforeRet;
							}
							
							i_198162 = addInt(i_198162, 1);
							if (!(((colontmp__198160 != null ? colontmp__198160.length : 0) == l_198163))) {
							failed_assert_impl_15051(makeNimstrLit("iterators.nim(190, 11) `len(a) == L` the length of the seq changed while iterating over it"));
							}
							
						}
				} while(false);
			} while(false);
		}
		}
	} while (false);

	return result_192524;

}

function arg_192896(spry_192898) {
	var result_192899 = null;

		result_192899 = next_192331(spry_192898.currentActivation);

	return result_192899;

}

function new_value_186552(v_186554) {
	var result_186555 = null;

		result_186555 = {value: nimCopy(null, v_186554, NTI138), m_type: NTI170194, tags: null};

	return result_186555;

}

function new_value_186520(v_186522) {
	var result_186523 = null;

		result_186523 = {value: v_186522, m_type: NTI170191, tags: null};

	return result_186523;

}

function new_value_186488(v_186490) {
	var result_186491 = null;

		result_186491 = {value: v_186490, m_type: NTI170188, tags: null};

	return result_186491;

}

function current_keyword_189195(self_189197) {
	var result_189198 = null;

	BeforeRet: do {
		if (isObj(self_189197.stack[chckIndx((self_189197.stack != null ? (self_189197.stack.length-1) : -1), 0, self_189197.stack.length+0-1)-0].m_type, NTI170180)) {
		result_189198 = self_189197.stack[chckIndx((self_189197.stack != null ? (self_189197.stack.length-1) : -1), 0, self_189197.stack.length+0-1)-0];
		break BeforeRet;
		}
		else {
			result_189198 = null;
			break BeforeRet;
		}
		
	} while (false);

	return result_189198;

}

function in_balance_189112(self_189114) {
	var result_189115 = false;

	BeforeRet: do {
		result_189115 = ((self_189114.args != null ? self_189114.args.length : 0) == (self_189114.keys != null ? self_189114.keys.length : 0));
		break BeforeRet;
	} while (false);

	return result_189115;

}

function pop_189253(s_189258, s_189258_Idx) {
	var result_189259 = null;

		var l_189265 = subInt((s_189258[s_189258_Idx] != null ? s_189258[s_189258_Idx].length : 0), 1);
		result_189259 = s_189258[s_189258_Idx][chckIndx(l_189265, 0, s_189258[s_189258_Idx].length+0-1)-0];
		if (s_189258[s_189258_Idx] === null) s_189258[s_189258_Idx] = [];
               if (s_189258[s_189258_Idx].length < chckRange(l_189265, 0, 2147483647)) { for (var i=s_189258[s_189258_Idx].length;i<chckRange(l_189265, 0, 2147483647);++i) s_189258[s_189258_Idx].push(null); }
               else { s_189258[s_189258_Idx].length = chckRange(l_189265, 0, 2147483647); };

	return result_189259;

}

function nsuJoinSep(a_154059, sep_154060) {
	var result_154061 = null;

		if ((0 < (a_154059 != null ? a_154059.length : 0))) {
		var l_154072 = mulInt((sep_154060 != null ? sep_154060.length : 0), subInt((a_154059 != null ? a_154059.length : 0), 1));
		L1: do {
			var i_154086 = 0;
			var colontmp__198188 = 0;
			colontmp__198188 = (a_154059 != null ? (a_154059.length-1) : -1);
			var res_198189 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_198189 <= colontmp__198188)) break L3;
						i_154086 = res_198189;
						l_154072 = addInt(l_154072, (a_154059[chckIndx(i_154086, 0, a_154059.length+0-1)-0] != null ? a_154059[chckIndx(i_154086, 0, a_154059.length+0-1)-0].length : 0));
						res_198189 = addInt(res_198189, 1);
					}
			} while(false);
		} while(false);
		result_154061 = nimCopy(null, mnewString(0), NTI138);
		if (result_154061 != null) { result_154061 = (result_154061).concat(a_154059[chckIndx(0, 0, a_154059.length+0-1)-0]); } else { result_154061 = a_154059[chckIndx(0, 0, a_154059.length+0-1)-0].slice(); };
		L4: do {
			var i_154106 = 0;
			var colontmp__198195 = 0;
			colontmp__198195 = (a_154059 != null ? (a_154059.length-1) : -1);
			var res_198196 = 1;
			L5: do {
					L6: while (true) {
					if (!(res_198196 <= colontmp__198195)) break L6;
						i_154106 = res_198196;
						if (result_154061 != null) { result_154061 = (result_154061).concat(sep_154060); } else { result_154061 = sep_154060.slice(); };
						if (result_154061 != null) { result_154061 = (result_154061).concat(a_154059[chckIndx(i_154106, 0, a_154059.length+0-1)-0]); } else { result_154061 = a_154059[chckIndx(i_154106, 0, a_154059.length+0-1)-0].slice(); };
						res_198196 = addInt(res_198196, 1);
					}
			} while(false);
		} while(false);
		}
		else {
			result_154061 = nimCopy(null, [], NTI138);
		}
		

	return result_154061;

}

function add_186740(x_186745, x_186745_Idx, y_186747) {
		var Tmp1;

		var xl_186753 = (x_186745[x_186745_Idx] != null ? x_186745[x_186745_Idx].length : 0);
		if (x_186745[x_186745_Idx] === null) x_186745[x_186745_Idx] = [];
               if (x_186745[x_186745_Idx].length < (Tmp1 = chckRange(addInt(xl_186753, (y_186747 != null ? y_186747.length : 0)), 0, 2147483647), Tmp1)) { for (var i=x_186745[x_186745_Idx].length;i<Tmp1;++i) x_186745[x_186745_Idx].push(null); }
               else { x_186745[x_186745_Idx].length = Tmp1; };
		L2: do {
			var i_186778 = 0;
			var colontmp__198202 = 0;
			colontmp__198202 = (y_186747 != null ? (y_186747.length-1) : -1);
			var res_198203 = 0;
			L3: do {
					L4: while (true) {
					if (!(res_198203 <= colontmp__198202)) break L4;
						i_186778 = res_198203;
						x_186745[x_186745_Idx][chckIndx(addInt(xl_186753, i_186778), 0, x_186745[x_186745_Idx].length+0-1)-0] = y_186747[chckIndx(i_186778, 0, y_186747.length+0-1)-0];
						res_198203 = addInt(res_198203, 1);
					}
			} while(false);
		} while(false);

	
}

function produce_nodes_189139(self_189141) {
	var result_189143 = [null];

		result_189143[0] = nimCopy(null, new_seq_186216(0), NTI186220);
		if (result_189143[0] != null) { result_189143[0].push(new_eval_word_182075(nsuJoinSep(self_189141.keys, []))); } else { result_189143[0] = [new_eval_word_182075(nsuJoinSep(self_189141.keys, []))]; };
		add_186740(result_189143, 0, self_189141.args);

	return result_189143[0];

}

function delete_187541(x_187546, x_187546_Idx, i_187547) {
		x_187546[x_187546_Idx].splice(i_187547, 1);

	
}

function remove_last_187532(self_187534) {
		delete_187541(self_187534, "nodes", chckRange((self_187534.nodes != null ? (self_187534.nodes.length-1) : -1), 0, 2147483647));

	
}

function add_186735(self_186737, n_186739) {
		add_186740(self_186737, "nodes", n_186739);

	
}

function close_keyword_189240(self_189242) {
		var keyword_189441 = current_keyword_189195(self_189242);
		pop_189253(self_189242, "stack");
		var nodes_189449 = produce_nodes_189139(keyword_189441);
		remove_last_187532(self_189242.stack[chckIndx((self_189242.stack != null ? (self_189242.stack.length-1) : -1), 0, self_189242.stack.length+0-1)-0]);
		add_186735(self_189242.stack[chckIndx((self_189242.stack != null ? (self_189242.stack.length-1) : -1), 0, self_189242.stack.length+0-1)-0], nodes_189449);

	
}

function do_add_node_189483(self_189485, node_189486) {
		var keyword_189487 = current_keyword_189195(self_189485);
		if ((keyword_189487 == null)) {
		add_186711(self_189485.stack[chckIndx((self_189485.stack != null ? (self_189485.stack.length-1) : -1), 0, self_189485.stack.length+0-1)-0], node_189486);
		}
		else {
			if (in_balance_189112(keyword_189487)) {
			close_keyword_189240(self_189485);
			do_add_node_189483(self_189485, node_189486);
			}
			else {
			if (keyword_189487.args != null) { keyword_189487.args.push(node_189486); } else { keyword_189487.args = [node_189486]; };
			}
			
		}
		

	
}

function push_189523(self_189525, n_189526) {
		if (!(((self_189525.stack != null ? self_189525.stack.length : 0) == 0))) {
		do_add_node_189483(self_189525, n_189526);
		}
		
		if (self_189525.stack != null) { self_189525.stack.push(n_189526); } else { self_189525.stack = [n_189526]; };

	
}

function raise_parse_exception_181479(msg_181481) {
		var e_181484 = null;
		e_181484 = {m_type: NTI170018, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		e_181484.message = nimCopy(null, msg_181481, NTI138);
		e_181484.parent = null;
		raiseException(e_181484, "ParseException");

	
}

function new_get_arg_word_186162(s_186164) {
	var result_186165 = null;

		result_186165 = {word: nimCopy(null, s_186164, NTI138), m_type: NTI170178, tags: null};

	return result_186165;

}

function HEX5BHEX5D_101704(s_101708, x_101710) {
	var result_101711 = null;

		var a_101801 = x_101710.a;
		var l_102001 = addInt(subInt(subInt((s_101708 != null ? s_101708.length : 0), x_101710.b), a_101801), 1);
		result_101711 = nimCopy(null, mnewString(chckRange(l_102001, 0, 2147483647)), NTI138);
		L1: do {
			var i_102009 = 0;
			var i_198238 = 0;
			L2: do {
					L3: while (true) {
					if (!(i_198238 < l_102001)) break L3;
						i_102009 = i_198238;
						result_101711[chckIndx(i_102009, 0, result_101711.length+0-1)-0] = s_101708[chckIndx(addInt(i_102009, a_101801), 0, s_101708.length+0-1)-0];
						i_198238 = addInt(i_198238, 1);
					}
			} while(false);
		} while(false);

	return result_101711;

}

function HEX2EHEX2E_101639(a_101643, b_101644) {
	var result_101650 = {a: 0, b: 0};

		nimCopy(result_101650, {a: a_101643, b: b_101644}, NTI101647);

	return result_101650;

}

function new_eval_arg_word_186130(s_186132) {
	var result_186133 = null;

		result_186133 = {word: nimCopy(null, s_186132, NTI138), m_type: NTI170165, tags: null};

	return result_186133;

}

function new_get_self_word_186034(s_186036) {
	var result_186037 = null;

		result_186037 = {word: nimCopy(null, s_186036, NTI138), m_type: NTI170172, tags: null};

	return result_186037;

}

function new_get_outer_word_186098(s_186100) {
	var result_186101 = null;

		result_186101 = {word: nimCopy(null, s_186100, NTI138), m_type: NTI170176, tags: null};

	return result_186101;

}

function new_get_local_word_186066(s_186068) {
	var result_186069 = null;

		result_186069 = {word: nimCopy(null, s_186068, NTI138), m_type: NTI170174, tags: null};

	return result_186069;

}

function nsuFindChar(s_154416, sub_154417, start_154418, last_154419) {
		var Tmp1;

	var result_154421 = 0;

	BeforeRet: do {
		if ((last_154419 == 0)) {
		Tmp1 = (s_154416 != null ? (s_154416.length-1) : -1);
		}
		else {
		Tmp1 = last_154419;
		}
		
		var last_154423 = Tmp1;
		L2: do {
			var i_154806 = 0;
			var colontmp__198257 = 0;
			colontmp__198257 = start_154418;
			var res_198258 = colontmp__198257;
			L3: do {
					L4: while (true) {
					if (!(res_198258 <= last_154423)) break L4;
						i_154806 = res_198258;
						if ((sub_154417 == s_154416[chckIndx(i_154806, 0, s_154416.length+0-1)-0])) {
						result_154421 = i_154806;
						break BeforeRet;
						}
						
						res_198258 = addInt(res_198258, 1);
					}
			} while(false);
		} while(false);
		result_154421 = -1;
		break BeforeRet;
	} while (false);

	return result_154421;

}

function nsuInitSkipTable(a_154144, sub_154145) {
		var m_154146 = (sub_154145 != null ? sub_154145.length : 0);
		var i_154148 = 0;
		L1: do {
				L2: while (true) {
				if (!(i_154148 <= 248)) break L2;
					a_154144[chckIndx(chckRange(addInt(i_154148, 0), 0, 255), 0, a_154144.length+0-1)-0] = m_154146;
					a_154144[chckIndx(chckRange(addInt(i_154148, 1), 0, 255), 0, a_154144.length+0-1)-0] = m_154146;
					a_154144[chckIndx(chckRange(addInt(i_154148, 2), 0, 255), 0, a_154144.length+0-1)-0] = m_154146;
					a_154144[chckIndx(chckRange(addInt(i_154148, 3), 0, 255), 0, a_154144.length+0-1)-0] = m_154146;
					a_154144[chckIndx(chckRange(addInt(i_154148, 4), 0, 255), 0, a_154144.length+0-1)-0] = m_154146;
					a_154144[chckIndx(chckRange(addInt(i_154148, 5), 0, 255), 0, a_154144.length+0-1)-0] = m_154146;
					a_154144[chckIndx(chckRange(addInt(i_154148, 6), 0, 255), 0, a_154144.length+0-1)-0] = m_154146;
					a_154144[chckIndx(chckRange(addInt(i_154148, 7), 0, 255), 0, a_154144.length+0-1)-0] = m_154146;
					i_154148 = addInt(i_154148, 8);
				}
		} while(false);
		L3: do {
			var i_154165 = 0;
			var colontmp__198265 = 0;
			colontmp__198265 = subInt(m_154146, 1);
			var i_198266 = 0;
			L4: do {
					L5: while (true) {
					if (!(i_198266 < colontmp__198265)) break L5;
						i_154165 = i_198266;
						a_154144[chckIndx(sub_154145[chckIndx(i_154165, 0, sub_154145.length+0-1)-0], 0, a_154144.length+0-1)-0] = subInt(subInt(m_154146, 1), i_154165);
						i_198266 = addInt(i_198266, 1);
					}
			} while(false);
		} while(false);

	
}

function nsuFindStrA(a_154181, s_154182, sub_154183, start_154184, last_154185) {
		var Tmp1;

	var result_154187 = 0;

	BeforeRet: do {
		if ((last_154185 == 0)) {
		Tmp1 = (s_154182 != null ? (s_154182.length-1) : -1);
		}
		else {
		Tmp1 = last_154185;
		}
		
		var last_154189 = Tmp1;
		var sub_last_154190 = subInt((sub_154183 != null ? sub_154183.length : 0), 1);
		if ((sub_last_154190 == -1)) {
		result_154187 = start_154184;
		break BeforeRet;
		}
		
		var skip_154192 = start_154184;
		L2: do {
				L3: while (true) {
				if (!(sub_last_154190 <= subInt(last_154189, skip_154192))) break L3;
					var i_154193 = sub_last_154190;
					L4: do {
							L5: while (true) {
							if (!(s_154182[chckIndx(addInt(skip_154192, i_154193), 0, s_154182.length+0-1)-0] == sub_154183[chckIndx(i_154193, 0, sub_154183.length+0-1)-0])) break L5;
								if ((i_154193 == 0)) {
								result_154187 = skip_154192;
								break BeforeRet;
								}
								
								i_154193 = subInt(i_154193, 1);
							}
					} while(false);
					skip_154192 = addInt(skip_154192, a_154181[chckIndx(s_154182[chckIndx(addInt(skip_154192, sub_last_154190), 0, s_154182.length+0-1)-0], 0, a_154181.length+0-1)-0]);
				}
		} while(false);
		result_154187 = -1;
		break BeforeRet;
	} while (false);

	return result_154187;

}

function nsuFindStr(s_155054, sub_155055, start_155056, last_155057) {
	var result_155059 = 0;

	BeforeRet: do {
		if (((s_155054 != null ? s_155054.length : 0) < (sub_155055 != null ? sub_155055.length : 0))) {
		result_155059 = -1;
		break BeforeRet;
		}
		
		if (((sub_155055 != null ? sub_155055.length : 0) == 1)) {
		result_155059 = nsuFindChar(s_155054, sub_155055[chckIndx(0, 0, sub_155055.length+0-1)-0], start_155056, last_155057);
		break BeforeRet;
		}
		
		var a_155061 = [new Int32Array(256)];
		nsuInitSkipTable(a_155061[0], sub_155055);
		result_155059 = nsuFindStrA(a_155061[0], s_155054, sub_155055, start_155056, last_155057);
	} while (false);

	return result_155059;

}

function contains_155677(s_155679, sub_155680) {
	var result_155681 = false;

	BeforeRet: do {
		result_155681 = (0 <= nsuFindStr(s_155679, sub_155680, 0, 0));
		break BeforeRet;
	} while (false);

	return result_155681;

}

function substr_eq_149102(s_149104, pos_149105, substr_149106) {
	var result_149107 = false;

	BeforeRet: do {
		var i_149109 = 0;
		var length_149110 = (substr_149106 != null ? substr_149106.length : 0);
		L1: do {
				L2: while (true) {
				if (!(((i_149109 < length_149110) && (addInt(pos_149105, i_149109) < (s_149104 != null ? s_149104.length : 0))) && (s_149104[chckIndx(addInt(pos_149105, i_149109), 0, s_149104.length+0-1)-0] == substr_149106[chckIndx(i_149109, 0, substr_149106.length+0-1)-0]))) break L2;
					i_149109 = addInt(i_149109, 1);
				}
		} while(false);
		result_149107 = (i_149109 == length_149110);
		break BeforeRet;
	} while (false);

	return result_149107;

}

function substr_29622(s_29624, first_29625, last_29626) {
	var result_29627 = null;

		var first_29628 = nimMax(first_29625, 0);
		var l_29630 = nimMax(addInt(subInt(nimMin(last_29626, (s_29624 != null ? (s_29624.length-1) : -1)), first_29628), 1), 0);
		result_29627 = nimCopy(null, mnewString(chckRange(l_29630, 0, 2147483647)), NTI138);
		L1: do {
			var i_29639 = 0;
			var colontmp__198282 = 0;
			colontmp__198282 = subInt(l_29630, 1);
			var res_198283 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_198283 <= colontmp__198282)) break L3;
						i_29639 = res_198283;
						result_29627[chckIndx(i_29639, 0, result_29627.length+0-1)-0] = s_29624[chckIndx(addInt(i_29639, first_29628), 0, s_29624.length+0-1)-0];
						res_198283 = addInt(res_198283, 1);
					}
			} while(false);
		} while(false);

	return result_29627;

}

function nsuSplitString(s_149739, sep_149740, maxsplit_149742) {
	var result_149744 = null;

		if (!((0 < (sep_149740 != null ? sep_149740.length : 0)))) {
		failed_assert_impl_15051(makeNimstrLit("strutils.nim(768, 11) `sep.len > 0` "));
		}
		
		result_149744 = nimCopy(null, [], NTI149814);
		L1: do {
			var x_149801 = null;
			var last_198275 = 0;
			var splits_198276 = maxsplit_149742;
			L2: do {
					L3: while (true) {
					if (!(last_198275 <= (s_149739 != null ? s_149739.length : 0))) break L3;
						var first_198278 = last_198275;
						L4: do {
								L5: while (true) {
								if (!((last_198275 < (s_149739 != null ? s_149739.length : 0)) && !(substr_eq_149102(s_149739, last_198275, sep_149740)))) break L5;
									last_198275 = addInt(last_198275, 1);
								}
						} while(false);
						if ((splits_198276 == 0)) {
						last_198275 = (s_149739 != null ? s_149739.length : 0);
						}
						
						x_149801 = substr_29622(s_149739, first_198278, subInt(last_198275, 1));
						var Tmp6 = nimCopy(null, x_149801, NTI138);
						if (result_149744 != null) { result_149744.push(Tmp6); } else { result_149744 = [Tmp6]; };
						if ((splits_198276 == 0)) {
						break L2;
						}
						
						splits_198276 = subInt(splits_198276, 1);
						last_198275 = addInt(last_198275, (sep_149740 != null ? sep_149740.length : 0));
					}
			} while(false);
		} while(false);

	return result_149744;

}

function new_get_module_word_186016(s_186018) {
	var result_186019 = null;

		var both_186020 = nsuSplitString(s_186018, makeNimstrLit("::"), -1);
		result_186019 = {word: nimCopy(null, both_186020[chckIndx(1, 0, both_186020.length+0-1)-0], NTI138), module: new_eval_word_182075(both_186020[chckIndx(0, 0, both_186020.length+0-1)-0]), m_type: NTI170169, tags: null};

	return result_186019;

}

function new_get_word_185984(s_185986) {
	var result_185987 = null;

		result_185987 = {word: nimCopy(null, s_185986, NTI138), m_type: NTI170167, tags: null};

	return result_185987;

}

function HEX5BHEX5D_26798(s_26800, i_26801) {
	var result_26802 = 0;

		result_26802 = s_26800[chckIndx(subInt((s_26800 != null ? s_26800.length : 0), i_26801), 0, s_26800.length+0-1)-0];

	return result_26802;

}

function new_seq_39833(len_39836) {
	var result_39838 = null;

		result_39838 = new Array(len_39836); for (var i=0;i<len_39836;++i) {result_39838[i]=null;}
	return result_39838;

}

function new_key_word_186194() {
	var result_186196 = null;

		result_186196 = {keys: new_seq_39833(0), args: new_seq_186216(0), m_type: NTI170180, tags: null};

	return result_186196;

}

function add_key_189088(self_189090, key_189091) {
		var Tmp1 = nimCopy(null, key_189091, NTI138);
		if (self_189090.keys != null) { self_189090.keys.push(Tmp1); } else { self_189090.keys = [Tmp1]; };

	
}

function new_eval_self_word_185888(s_185890) {
	var result_185891 = null;

		result_185891 = {word: nimCopy(null, s_185890, NTI138), m_type: NTI170159, tags: null};

	return result_185891;

}

function new_eval_outer_word_185952(s_185954) {
	var result_185955 = null;

		result_185955 = {word: nimCopy(null, s_185954, NTI138), m_type: NTI170163, tags: null};

	return result_185955;

}

function new_eval_local_word_185920(s_185922) {
	var result_185923 = null;

		result_185923 = {word: nimCopy(null, s_185922, NTI138), m_type: NTI170161, tags: null};

	return result_185923;

}

function new_eval_module_word_185870(s_185872) {
	var result_185873 = null;

		var both_185874 = nsuSplitString(s_185872, makeNimstrLit("::"), -1);
		result_185873 = {word: nimCopy(null, both_185874[chckIndx(1, 0, both_185874.length+0-1)-0], NTI138), module: new_eval_word_182075(both_185874[chckIndx(0, 0, both_185874.length+0-1)-0]), m_type: NTI170156, tags: null};

	return result_185873;

}

function new_word_189553(self_189555, token_189556) {
			var Tmp1;
			var Tmp2;
			var Tmp3;

	var result_189557 = null;

	BeforeRet: do {
		var len_189558 = (token_189556 != null ? token_189556.length : 0);
		var first_189559 = token_189556[chckIndx(0, 0, token_189556.length+0-1)-0];
			if (!(first_189559 == 58)) Tmp1 = false; else {				Tmp1 = (1 < len_189558);			}		if (Tmp1) {
		if ((token_189556[chckIndx(1, 0, token_189556.length+0-1)-0] == 36)) {
		if (((token_189556 != null ? token_189556.length : 0) < 3)) {
		raise_parse_exception_181479(makeNimstrLit("Malformed get argword, missing at least 1 character"));
		}
		
		result_189557 = new_get_arg_word_186162(HEX5BHEX5D_101704(token_189556, HEX2EHEX2E_101639(2, 1)));
		break BeforeRet;
		}
		else {
			result_189557 = new_eval_arg_word_186130(HEX5BHEX5D_101704(token_189556, HEX2EHEX2E_101639(1, 1)));
			break BeforeRet;
		}
		
		}
		
			if (!(first_189559 == 36)) Tmp2 = false; else {				Tmp2 = (1 < len_189558);			}		if (Tmp2) {
		if ((token_189556[chckIndx(1, 0, token_189556.length+0-1)-0] == 64)) {
		if ((2 < len_189558)) {
		result_189557 = new_get_self_word_186034(HEX5BHEX5D_101704(token_189556, HEX2EHEX2E_101639(2, 1)));
		break BeforeRet;
		}
		else {
		raise_parse_exception_181479(makeNimstrLit("Malformed self lookup word, missing at least 1 character"));
		}
		
		}
		else {
		if ((token_189556[chckIndx(1, 0, token_189556.length+0-1)-0] == 46)) {
		if ((2 < len_189558)) {
		if ((token_189556[chckIndx(2, 0, token_189556.length+0-1)-0] == 46)) {
		if ((3 < len_189558)) {
		result_189557 = new_get_outer_word_186098(HEX5BHEX5D_101704(token_189556, HEX2EHEX2E_101639(3, 1)));
		break BeforeRet;
		}
		else {
		raise_parse_exception_181479(makeNimstrLit("Malformed parent lookup word, missing at least 1 character"));
		}
		
		}
		else {
			result_189557 = new_get_local_word_186066(HEX5BHEX5D_101704(token_189556, HEX2EHEX2E_101639(2, 1)));
			break BeforeRet;
		}
		
		}
		else {
		raise_parse_exception_181479(makeNimstrLit("Malformed parent lookup word, missing at least 2 characters"));
		}
		
		}
		else {
			if (contains_155677(token_189556, makeNimstrLit("::"))) {
			result_189557 = new_get_module_word_186016(HEX5BHEX5D_101704(token_189556, HEX2EHEX2E_101639(1, 1)));
			break BeforeRet;
			}
			else {
				result_189557 = new_get_word_185984(HEX5BHEX5D_101704(token_189556, HEX2EHEX2E_101639(1, 1)));
				break BeforeRet;
			}
			
		}
		}
		}
		
		if ((first_189559 == 39)) {
		if ((len_189558 < 2)) {
		raise_parse_exception_181479(makeNimstrLit("Malformed literal word, missing at least 1 character"));
		}
		else {
			result_189557 = new_or_get_lit_word_182107(self_189555, HEX5BHEX5D_101704(token_189556, HEX2EHEX2E_101639(1, 1)));
			break BeforeRet;
		}
		
		}
		
			if (!(1 < len_189558)) Tmp3 = false; else {				Tmp3 = (HEX5BHEX5D_26798(token_189556, 1) == 58);			}		if (Tmp3) {
		if ((self_189555 == null)) {
		result_189557 = new_eval_word_182075(token_189556);
		break BeforeRet;
		}
		else {
			if ((current_keyword_189195(self_189555) == null)) {
			push_189523(self_189555, new_key_word_186194());
			}
			
			if (in_balance_189112(current_keyword_189195(self_189555))) {
			add_key_189088(current_keyword_189195(self_189555), token_189556);
			}
			else {
			raise_parse_exception_181479(makeNimstrLit("Malformed keyword syntax, expecting an argument"));
			}
			
			result_189557 = null;
			break BeforeRet;
		}
		
		}
		
		if ((first_189559 == 64)) {
		if ((1 < len_189558)) {
		result_189557 = new_eval_self_word_185888(HEX5BHEX5D_101704(token_189556, HEX2EHEX2E_101639(1, 1)));
		break BeforeRet;
		}
		else {
		raise_parse_exception_181479(makeNimstrLit("Malformed self eval word, missing at least 1 character"));
		}
		
		}
		else {
		if ((first_189559 == 46)) {
		if ((1 < len_189558)) {
		if ((token_189556[chckIndx(1, 0, token_189556.length+0-1)-0] == 46)) {
		if ((2 < len_189558)) {
		result_189557 = new_eval_outer_word_185952(HEX5BHEX5D_101704(token_189556, HEX2EHEX2E_101639(2, 1)));
		break BeforeRet;
		}
		else {
		raise_parse_exception_181479(makeNimstrLit("Malformed parent eval word, missing at least 1 character"));
		}
		
		}
		else {
			result_189557 = new_eval_local_word_185920(HEX5BHEX5D_101704(token_189556, HEX2EHEX2E_101639(1, 1)));
			break BeforeRet;
		}
		
		}
		else {
		raise_parse_exception_181479(makeNimstrLit("Malformed local eval word, missing at least 1 character"));
		}
		
		}
		else {
			if (contains_155677(token_189556, makeNimstrLit("::"))) {
			result_189557 = new_eval_module_word_185870(token_189556);
			break BeforeRet;
			}
			else {
				result_189557 = new_eval_word_182075(token_189556);
				break BeforeRet;
			}
			
		}
		}
	} while (false);

	return result_189557;

}

function new_word_or_value_189984(self_189986) {
	var result_189987 = null;

	BeforeRet: do {
		var token_189988 = nimCopy(null, self_189986.token, NTI138);
		self_189986.token = nimCopy(null, [], NTI138);
		self_189986.ws = nimCopy(null, [], NTI138);
		L1: do {
			var p_190214 = null;
			var colontmp__198218 = null;
			colontmp__198218 = self_189986.valueParsers;
			var i_198219 = 0;
			var l_198220 = (colontmp__198218 != null ? colontmp__198218.length : 0);
			L2: do {
					L3: while (true) {
					if (!(i_198219 < l_198220)) break L3;
						p_190214 = colontmp__198218[chckIndx(i_198219, 0, colontmp__198218.length+0-1)-0];
						var value_or_nil_190215 = parse_value_188168(p_190214, token_189988);
						if (!((value_or_nil_190215 == null))) {
						result_189987 = value_or_nil_190215;
						break BeforeRet;
						}
						
						i_198219 = addInt(i_198219, 1);
						if (!(((colontmp__198218 != null ? colontmp__198218.length : 0) == l_198220))) {
						failed_assert_impl_15051(makeNimstrLit("iterators.nim(190, 11) `len(a) == L` the length of the seq changed while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		result_189987 = new_word_189553(self_189986, token_189988);
	} while (false);

	return result_189987;

}

function add_node_189435(self_189437) {
		if ((0 < (self_189437.token != null ? self_189437.token.length : 0))) {
		var node_190255 = new_word_or_value_189984(self_189437);
		if (!((node_190255 == null))) {
		do_add_node_189483(self_189437, node_190255);
		}
		
		}
		

	
}

function new_paren_186391() {
	var result_186393 = null;

		result_186393 = {nodes: new_seq_186216(0), m_type: NTI170216, tags: null};

	return result_186393;

}

function new_curly_186456() {
	var result_186458 = null;

		result_186458 = {nodes: new_seq_186216(0), m_type: NTI170218, tags: null};

	return result_186458;

}

function pop_189243(self_189245) {
	var result_189246 = null;

		if (!((current_keyword_189195(self_189245) == null))) {
		close_keyword_189240(self_189245);
		}
		
		result_189246 = pop_189253(self_189245, "stack");

	return result_189246;

}

function HEX5BHEX5D_190372(s_190377, i_190378) {
	var result_190380 = null;
	var result_190380_Idx = 0;

		result_190380 = s_190377; result_190380_Idx = chckIndx(subInt((s_190377 != null ? s_190377.length : 0), i_190378), 0, s_190377.length+0-1)-0;

	return [result_190380, result_190380_Idx];

}

function parse_190275(self_190277, str_190278) {
						var Tmp3;
													var Tmp7;
												var Tmp10;
		var Tmp11;

	var result_190279 = null;

		var ch_190280 = 0;
		var current_value_parser_190281 = null;
		var pos_190283 = 0;
		self_190277.stack = nimCopy(null, [], NTI190296);
		self_190277.token = nimCopy(null, [], NTI138);
		self_190277.ws = nimCopy(null, [], NTI138);
		var blok_190297 = new_blok_186326();
		push_189523(self_190277, blok_190297);
		L1: do {
				L2: while (true) {
				if (!(pos_190283 < (str_190278 != null ? str_190278.length : 0))) break L2;
					ch_190280 = str_190278[chckIndx(pos_190283, 0, str_190278.length+0-1)-0];
					pos_190283 = addInt(pos_190283, 1);
						if (!self_190277.specialCharDetected) Tmp3 = false; else {							Tmp3 = (ConstSet2[ch_190280] != undefined);						}					if (Tmp3) {
					if (self_190277.token != null) { addChar(self_190277.token, ch_190280); } else { self_190277.token = [ch_190280]; };
					}
					else {
						if (self_190277.specialCharDetected) {
						add_node_189435(self_190277);
						self_190277.specialCharDetected = false;
						}
						
						if (!((current_value_parser_190281 == null))) {
						var found_190316 = token_ready_188274(current_value_parser_190281, self_190277.token, ch_190280);
						if (!((found_190316 == null))) {
						self_190277.token = nimCopy(null, found_190316, NTI138);
						add_node_189435(self_190277);
						current_value_parser_190281 = null;
						}
						else {
						if (self_190277.token != null) { addChar(self_190277.token, ch_190280); } else { self_190277.token = [ch_190280]; };
						}
						
						}
						else {
							if (((current_value_parser_190281 == null) && (ConstSet3[ch_190280] != undefined))) {
							add_node_189435(self_190277);
							if (self_190277.ws != null) { addChar(self_190277.ws, ch_190280); } else { self_190277.ws = [ch_190280]; };
							}
							else {
								var token_len_190329 = addInt((self_190277.token != null ? self_190277.token.length : 0), 1);
								if (((current_value_parser_190281 == null) && (token_len_190329 < 5))) {
								L4: do {
									var p_190341 = null;
									var colontmp__198179 = null;
									colontmp__198179 = self_190277.valueParsers;
									var i_198181 = 0;
									var l_198182 = (colontmp__198179 != null ? colontmp__198179.length : 0);
									L5: do {
											L6: while (true) {
											if (!(i_198181 < l_198182)) break L6;
												p_190341 = colontmp__198179[chckIndx(i_198181, 0, colontmp__198179.length+0-1)-0];
													if (!(prefix_length_188252(p_190341) == token_len_190329)) Tmp7 = false; else {														Tmp7 = token_start_188296(p_190341, self_190277.token, ch_190280);													}												if (Tmp7) {
												current_value_parser_190281 = p_190341;
												break L4;
												}
												
												i_198181 = addInt(i_198181, 1);
												if (!(((colontmp__198179 != null ? colontmp__198179.length : 0) == l_198182))) {
												failed_assert_impl_15051(makeNimstrLit("iterators.nim(190, 11) `len(a) == L` the length of the seq changed while iterating over it"));
												}
												
											}
									} while(false);
								} while(false);
								}
								
								if ((current_value_parser_190281 == null)) {
								switch (ch_190280) {
								case 35:
									add_node_189435(self_190277);
									if (self_190277.ws != null) { addChar(self_190277.ws, 35); } else { self_190277.ws = [35]; };
									L8: do {
											L9: while (true) {
												if (!(pos_190283 < (str_190278 != null ? str_190278.length : 0))) Tmp10 = false; else {													Tmp10 = !((str_190278[chckIndx(pos_190283, 0, str_190278.length+0-1)-0] == 10));												}											if (!Tmp10) break L9;
												if (self_190277.ws != null) { addChar(self_190277.ws, str_190278[chckIndx(pos_190283, 0, str_190278.length+0-1)-0]); } else { self_190277.ws = [str_190278[chckIndx(pos_190283, 0, str_190278.length+0-1)-0]]; };
												pos_190283 = addInt(pos_190283, 1);
											}
									} while(false);
									break;
								case 40:
									var n_190353 = new_paren_186391();
									add_node_189435(self_190277);
									push_189523(self_190277, n_190353);
									break;
								case 91:
									var n_190354 = new_blok_186326();
									add_node_189435(self_190277);
									push_189523(self_190277, n_190354);
									break;
								case 123:
									var n_190355 = new_curly_186456();
									add_node_189435(self_190277);
									push_189523(self_190277, n_190355);
									break;
								case 41:
									add_node_189435(self_190277);
									pop_189243(self_190277);
									break;
								case 93:
									add_node_189435(self_190277);
									pop_189243(self_190277);
									break;
								case 125:
									add_node_189435(self_190277);
									pop_189243(self_190277);
									break;
								default: 
									if ((ConstSet4[ch_190280] != undefined)) {
									add_node_189435(self_190277);
									self_190277.specialCharDetected = true;
									if (self_190277.token != null) { addChar(self_190277.token, ch_190280); } else { self_190277.token = [ch_190280]; };
									}
									else {
									if (self_190277.token != null) { addChar(self_190277.token, ch_190280); } else { self_190277.token = [ch_190280]; };
									}
									
									break;
								}
								}
								else {
								if (self_190277.token != null) { addChar(self_190277.token, ch_190280); } else { self_190277.token = [ch_190280]; };
								}
								
							}
							
						}
						
					}
					
				}
		} while(false);
		add_node_189435(self_190277);
		if (!((current_keyword_189195(self_190277) == null))) {
		close_keyword_189240(self_190277);
		}
		
		result_190279 = (Tmp11 = HEX5BHEX5D_190372(blok_190297.nodes, 1), Tmp11)[0][Tmp11[1]];

	return result_190279;

}

function len_170785(t_170790) {
	var result_170791 = 0;

		result_170791 = t_170790.counter;

	return result_170791;

}

function HEX5BHEX5D_190871(self_190873, key_190874) {
	var result_190875 = null;

		result_190875 = self_190873.nodes[chckIndx(key_190874.value, 0, self_190873.nodes.length+0-1)-0];

	return result_190875;

}

function HEX5BHEX5D_190654(self_190656, key_190657) {
	var result_190658 = null;

	BeforeRet: do {
		var val_190851 = get_or_default_174344(self_190656.bindings, key_190657);
		if (!((val_190851 == null))) {
		result_190658 = val_190851.val;
		break BeforeRet;
		}
		
	} while (false);

	return result_190658;

}

function HEX5BHEX5DHEX3D_190943(self_190945, key_190946, val_190947) {
		self_190945.nodes[chckIndx(key_190946.value, 0, self_190945.nodes.length+0-1)-0] = val_190947;

	
}

function HEX5BHEX5DHEX3D_190925(self_190927, key_190928, val_190929) {
		make_binding_177643(self_190927, key_190928, val_190929);

	
}

function contains_187025(t_187030, key_187031) {
	var result_187032 = false;

	BeforeRet: do {
		result_187032 = has_key_175256(t_187030, key_187031);
		break BeforeRet;
	} while (false);

	return result_187032;

}

function contains_186904(self_186906, n_186907) {
	var result_186908 = false;

		result_186908 = contains_187025(self_186906.bindings, n_186907);

	return result_186908;

}

function HEX5BHEX5D_74681(s_74685, x_74687) {
	var result_74688 = null;

		var a_74801 = x_74687.a;
		var l_75001 = addInt(subInt(x_74687.b, a_74801), 1);
		result_74688 = nimCopy(null, mnewString(chckRange(l_75001, 0, 2147483647)), NTI138);
		L1: do {
			var i_75009 = 0;
			var i_198314 = 0;
			L2: do {
					L3: while (true) {
					if (!(i_198314 < l_75001)) break L3;
						i_75009 = i_198314;
						result_74688[chckIndx(i_75009, 0, result_74688.length+0-1)-0] = s_74685[chckIndx(addInt(i_75009, a_74801), 0, s_74685.length+0-1)-0];
						i_198314 = addInt(i_198314, 1);
					}
			} while(false);
		} while(false);

	return result_74688;

}

function HEX2EHEX2E_74620(a_74624, b_74625) {
	var result_74627 = {a: 0, b: 0};

		nimCopy(result_74627, {a: a_74624, b: b_74625}, NTI63907);

	return result_74627;

}

function new_blok_186293(nodes_186296) {
	var result_186297 = null;

		result_186297 = {nodes: nimCopy(null, nodes_186296, NTI186295), m_type: NTI170220, pos: 0, tags: null};

	return result_186297;

}

function HEX5BHEX5D_196265(s_196271, x_196273) {
	var result_196275 = null;

		var a_196401 = x_196273.a;
		var l_196601 = addInt(subInt(x_196273.b, a_196401), 1);
		result_196275 = new Array(chckRange(l_196601, 0, 2147483647)); for (var i=0;i<chckRange(l_196601, 0, 2147483647);++i) {result_196275[i]=null;}		L1: do {
			var i_196616 = 0;
			var i_198323 = 0;
			L2: do {
					L3: while (true) {
					if (!(i_198323 < l_196601)) break L3;
						i_196616 = i_198323;
						result_196275[chckIndx(i_196616, 0, result_196275.length+0-1)-0] = s_196271[chckIndx(addInt(i_196616, a_196401), 0, s_196271.length+0-1)-0];
						i_198323 = addInt(i_198323, 1);
					}
			} while(false);
		} while(false);

	return result_196275;

}

function new_paren_186358(nodes_186361) {
	var result_186362 = null;

		result_186362 = {nodes: nimCopy(null, nodes_186361, NTI186360), m_type: NTI170216, tags: null};

	return result_186362;

}

function new_curly_186423(nodes_186426) {
	var result_186427 = null;

		result_186427 = {nodes: nimCopy(null, nodes_186426, NTI186425), m_type: NTI170218, tags: null};

	return result_186427;

}

function new_activation_191231(body_191233) {
	var result_191234 = null;

		result_191234 = {body: body_191233, m_type: NTI190484, locals: null, last: null, self: null, returned: false, parent: null, pos: 0, tags: null};

	return result_191234;

}

function peek_192354(self_192356) {
	var result_192357 = null;

	BeforeRet: do {
		if (at_end_192314(self_192356)) {
		result_192357 = null;
		break BeforeRet;
		}
		else {
			result_192357 = HEX5BHEX5D_190997(self_192356, self_192356.pos);
			break BeforeRet;
		}
		
	} while (false);

	return result_192357;

}

function eval_193668(current_193670, spry_193671) {
			var Tmp1;

	var result_193672 = null;

	BeforeRet: do {
		current_193670.parent = spry_193671.currentActivation;
			if (!(current_193670.self == null)) Tmp1 = false; else {				Tmp1 = !((current_193670.parent == null));			}		if (Tmp1) {
		current_193670.self = current_193670.parent.self;
		}
		
		spry_193671.currentActivation = current_193670;
		L2: do {
				L3: while (true) {
				if (!(current_193670.pos < len_191015(current_193670))) break L3;
					var next_193684 = next_192331(current_193670);
					if ((current_193670.pos == len_191015(current_193670))) {
					current_193670.last = eval_190559(next_193684, spry_193671);
					if (current_193670.returned) {
					do_return_192411(spry_193671.currentActivation, spry_193671);
					result_193672 = current_193670.last;
					break BeforeRet;
					}
					
					}
					else {
						var peek_193685 = peek_192354(current_193670);
						if (is_method_193106(peek_193685, spry_193671)) {
						current_193670.last = next_193684;
						next_193684 = next_192331(current_193670);
						}
						
						current_193670.last = eval_190559(next_193684, spry_193671);
						if (current_193670.returned) {
						do_return_192411(spry_193671.currentActivation, spry_193671);
						result_193672 = current_193670.last;
						break BeforeRet;
						}
						
					}
					
				}
		} while(false);
		if (isObj(current_193670.last.m_type, NTI170248)) {
		current_193670.last = current_193670.last.val;
		}
		
		spry_193671.lastSelf = spry_193671.currentActivation.self;
		spry_193671.currentActivation = spry_193671.currentActivation.parent;
		result_193672 = current_193670.last;
		break BeforeRet;
	} while (false);

	return result_193672;

}

function reset_191355(self_191357) {
		self_191357.returned = false;
		self_191357.pos = 0;

	
}

function new_funk_191101(body_191103, parent_191104) {
	var result_191105 = null;

		result_191105 = {nodes: nimCopy(null, body_191103.nodes, NTI170213), parent: parent_191104, m_type: NTI190470, source: null, pos: 0, tags: null};

	return result_191105;

}

function funk_190543(spry_190545, body_190546) {
	var result_193056 = null;

		result_193056 = new_funk_191101(body_190546, spry_190545.currentActivation);

	return result_193056;

}

function new_meth_191134(body_191136, parent_191137) {
	var result_191138 = null;

		result_191138 = {nodes: nimCopy(null, body_191136.nodes, NTI170213), parent: parent_191137, m_type: NTI190474, source: null, pos: 0, tags: null};

	return result_191138;

}

function meth_190547(spry_190549, body_190550) {
	var result_193074 = null;

		result_193074 = new_meth_191134(body_190550, spry_190549.currentActivation);

	return result_193074;

}

function reify_193027(word_193029) {
	var result_193030 = null;

		result_193030 = new_word_189553(null, word_193029.word);

	return result_193030;

}

function add_core_195028(spry_195030) {

		function HEX3Aanonymous_195031(spry_195033) {
			var result_195034 = null;

				result_195034 = spry_195033.root;

			return result_195034;

		}

		function HEX3Aanonymous_195048(spry_195050) {
			var result_195051 = null;

				result_195051 = spry_195050.currentActivation;

			return result_195051;

		}

		function HEX3Aanonymous_195065(spry_195067) {
											var Tmp6;
								var Tmp7;

			var result_195068 = null;

			BeforeRet: do {
				L1: do {
					var activation_195069 = null;
					var colontmp__198117 = null;
					colontmp__198117 = spry_195067.currentActivation;
					var activation_198123 = colontmp__198117;
					L2: do {
							L3: while (true) {
							if (!!((activation_198123 == null))) break L3;
								L4: do {
										L5: while (true) {
										if (!!(!(isObj(activation_198123.m_type, NTI190489)))) break L5;
											if (isObj(activation_198123.m_type, NTI190487)) {
											Tmp6 = activation_198123.body.parent;
											}
											else {
											Tmp6 = activation_198123.parent;
											}
											
											activation_198123 = Tmp6;
										}
								} while(false);
								activation_195069 = activation_198123;
								if ((activation_195069.locals == null)) {
								activation_195069.locals = new_map_181637();
								}
								
								result_195068 = activation_195069.locals;
								break BeforeRet;
								if (isObj(activation_198123.m_type, NTI190487)) {
								Tmp7 = activation_198123.body.parent;
								}
								else {
								Tmp7 = activation_198123.parent;
								}
								
								activation_198123 = Tmp7;
							}
					} while(false);
				} while(false);
			} while (false);

			return result_195068;

		}

		function HEX3Aanonymous_195088(spry_195090) {
			var result_195091 = null;

				var act_195092 = arg_parent_192604(spry_195090);
				if (!((act_195092 == null))) {
				result_195091 = act_195092.last;
				if ((result_195091 == null)) {
				spry_195090.currentActivation.self = spry_195090.nilVal;
				result_195091 = spry_195090.nilVal;
				}
				
				}
				

			return result_195091;

		}

		function HEX3Aanonymous_195117(spry_195119) {
			var result_195120 = null;

				result_195120 = self_192930(spry_195119);

			return result_195120;

		}

		function HEX3Aanonymous_195134(spry_195136) {
			var result_195137 = null;

				result_195137 = spry_195136.lastSelf;
				if ((result_195137 == null)) {
				result_195137 = spry_195136.nilVal;
				}
				

			return result_195137;

		}

		function HEX3Aanonymous_195156(spry_195158) {
			var result_195159 = null;

				result_195159 = eval_arg_infix_192913(spry_195158);
				var tag_195160 = eval_arg_192974(spry_195158);
				if ((result_195159.tags == null)) {
				result_195159.tags = new_blok_186326();
				}
				
				if (isObj(tag_195160.m_type, NTI170152)) {
				add_186711(result_195159.tags, tag_195160);
				}
				else {
				add_186711(result_195159.tags, litify_193994(spry_195158, tag_195160));
				}
				

			return result_195159;

		}

		function HEX3Aanonymous_195202(spry_195204) {
			var result_195205 = null;

			BeforeRet: do {
				var node_195206 = eval_arg_infix_192913(spry_195204);
				var tag_195207 = eval_arg_192974(spry_195204);
				if ((node_195206.tags == null)) {
				result_195205 = spry_195204.falseVal;
				break BeforeRet;
				}
				
				if (isObj(tag_195207.m_type, NTI170152)) {
				result_195205 = bool_val_193009(contains_186806(node_195206.tags, tag_195207), spry_195204);
				break BeforeRet;
				}
				else {
					result_195205 = bool_val_193009(contains_186806(node_195206.tags, litify_193994(spry_195204, tag_195207)), spry_195204);
					break BeforeRet;
				}
				
			} while (false);

			return result_195205;

		}

		function HEX3Aanonymous_195234(spry_195236) {
			var result_195237 = null;

			BeforeRet: do {
				var node_195238 = eval_arg_infix_192913(spry_195236);
				if ((node_195238.tags == null)) {
				result_195237 = spry_195236.emptyBlok;
				break BeforeRet;
				}
				
				result_195237 = node_195238.tags;
				break BeforeRet;
			} while (false);

			return result_195237;

		}

		function HEX3Aanonymous_195257(spry_195259) {
			var result_195260 = null;

				result_195260 = eval_arg_infix_192913(spry_195259);
				result_195260.tags = eval_arg_192974(spry_195259);

			return result_195260;

		}

		function HEX3Aanonymous_195274(spry_195276) {
			var result_195277 = null;

				result_195277 = eval_arg_192974(spry_195276);
				assign_192861(spry_195276, arg_infix_192879(spry_195276), result_195277);

			return result_195277;

		}

		function HEX3Aanonymous_195291(spry_195293) {
			var result_195294 = null;

				result_195294 = eval_arg_192974(spry_195293);
				assign_192861(spry_195293, eval_arg_infix_192913(spry_195293), result_195294);

			return result_195294;

		}

		function HEX3Aanonymous_195308(spry_195310) {
			var result_195311 = null;

			BeforeRet: do {
				var binding_195312 = lookup_192520(spry_195310, arg_infix_192879(spry_195310));
				if ((binding_195312 == null)) {
				result_195311 = spry_195310.falseVal;
				break BeforeRet;
				}
				
				result_195311 = spry_195310.trueVal;
				break BeforeRet;
			} while (false);

			return result_195311;

		}

		function HEX3Aanonymous_195331(spry_195333) {
			var result_195334 = null;

			BeforeRet: do {
				var binding_195335 = lookup_192520(spry_195333, arg_infix_192879(spry_195333));
				if ((binding_195335 == null)) {
				result_195334 = spry_195333.falseVal;
				break BeforeRet;
				}
				
				if (HEX3DHEX3D_172333(binding_195335.val, spry_195333.nilVal)) {
				result_195334 = spry_195333.trueVal;
				break BeforeRet;
				}
				
				result_195334 = spry_195333.falseVal;
				break BeforeRet;
			} while (false);

			return result_195334;

		}

		function HEX3Aanonymous_195354(spry_195356) {
			var result_195357 = null;

				result_195357 = new_value_186616(!(isObj(eval_arg_infix_192913(spry_195356).m_type, NTI170206)));

			return result_195357;

		}

		function HEX3Aanonymous_195379(spry_195381) {
			var result_195382 = null;

				result_195382 = HEX2B_191487(eval_arg_infix_192913(spry_195381), eval_arg_192974(spry_195381));

			return result_195382;

		}

		function HEX3Aanonymous_195396(spry_195398) {
			var result_195399 = null;

				result_195399 = HEX2D_191580(eval_arg_infix_192913(spry_195398), eval_arg_192974(spry_195398));

			return result_195399;

		}

		function HEX3Aanonymous_195413(spry_195415) {
			var result_195416 = null;

				result_195416 = HEX2A_191673(eval_arg_infix_192913(spry_195415), eval_arg_192974(spry_195415));

			return result_195416;

		}

		function HEX3Aanonymous_195430(spry_195432) {
			var result_195433 = null;

				result_195433 = HEX2F_191766(eval_arg_infix_192913(spry_195432), eval_arg_192974(spry_195432));

			return result_195433;

		}

		function HEX3Aanonymous_195447(spry_195449) {
			var result_195450 = null;

				result_195450 = HEX3C_191859(eval_arg_infix_192913(spry_195449), eval_arg_192974(spry_195449));

			return result_195450;

		}

		function HEX3Aanonymous_195464(spry_195466) {
			var result_195467 = null;

				result_195467 = HEX3C_191859(eval_arg_192974(spry_195466), eval_arg_infix_192913(spry_195466));

			return result_195467;

		}

		function HEX3Aanonymous_195481(spry_195483) {
			var result_195484 = null;

				result_195484 = HEX3CHEX3D_191970(eval_arg_infix_192913(spry_195483), eval_arg_192974(spry_195483));

			return result_195484;

		}

		function HEX3Aanonymous_195498(spry_195500) {
			var result_195501 = null;

				result_195501 = HEX3CHEX3D_191970(eval_arg_192974(spry_195500), eval_arg_infix_192913(spry_195500));

			return result_195501;

		}

		function HEX3Aanonymous_195515(spry_195517) {
			var result_195518 = null;

				result_195518 = eq_192081(eval_arg_infix_192913(spry_195517), eval_arg_192974(spry_195517));

			return result_195518;

		}

		function HEX3Aanonymous_195532(spry_195534) {
			var result_195535 = null;

				result_195535 = new_value_186616((eval_arg_infix_192913(spry_195534) == eval_arg_192974(spry_195534)));

			return result_195535;

		}

		function HEX3Aanonymous_195556(spry_195558) {
			var result_195559 = null;

				result_195559 = new_value_186616(!(value_172612(eq_192081(eval_arg_infix_192913(spry_195558), eval_arg_192974(spry_195558)))));

			return result_195559;

		}

		function HEX3Aanonymous_195573(spry_195575) {
			var result_195576 = null;

				result_195576 = new_value_186616(!((eval_arg_infix_192913(spry_195575) == eval_arg_192974(spry_195575))));

			return result_195576;

		}

		function HEX3Aanonymous_195597(spry_195599) {
			var result_195600 = null;

				result_195600 = new_value_186616(!(value_172612(eval_arg_infix_192913(spry_195599))));

			return result_195600;

		}

		function HEX3Aanonymous_195614(spry_195616) {
				var Tmp1;

			var result_195617 = null;

				var arg1_195618 = value_172612(eval_arg_infix_192913(spry_195616));
				var arg2_195619 = arg_192896(spry_195616);
				if (!arg1_195618) Tmp1 = false; else {					Tmp1 = value_172612(eval_190559(arg2_195619, spry_195616));				}				result_195617 = new_value_186616(Tmp1);

			return result_195617;

		}

		function HEX3Aanonymous_195633(spry_195635) {
				var Tmp1;

			var result_195636 = null;

				var arg1_195637 = value_172612(eval_arg_infix_192913(spry_195635));
				var arg2_195638 = arg_192896(spry_195635);
				if (arg1_195637) Tmp1 = true; else {					Tmp1 = value_172612(eval_190559(arg2_195638, spry_195635));				}				result_195636 = new_value_186616(Tmp1);

			return result_195636;

		}

		function HEX3Aanonymous_195652(spry_195654) {
			var result_195655 = null;

			BeforeRet: do {
				var val_195656 = eval_arg_infix_192913(spry_195654);
				if (isObj(val_195656.m_type, NTI170194)) {
				result_195655 = HEX26_192266(val_195656, eval_arg_192974(spry_195654));
				break BeforeRet;
				}
				else {
				if (isObj(val_195656.m_type, NTI170220)) {
				result_195655 = concat_187088(val_195656, eval_arg_192974(spry_195654).nodes);
				break BeforeRet;
				}
				else {
				if (isObj(val_195656.m_type, NTI170216)) {
				result_195655 = concat_187088(val_195656, eval_arg_192974(spry_195654).nodes);
				break BeforeRet;
				}
				else {
				if (isObj(val_195656.m_type, NTI170218)) {
				result_195655 = concat_187088(val_195656, eval_arg_192974(spry_195654).nodes);
				break BeforeRet;
				}
				}}}
			} while (false);

			return result_195655;

		}

		function HEX3Aanonymous_195702(spry_195704) {
			var result_195705 = null;

				result_195705 = new_value_186552(print_174068(eval_arg_infix_192913(spry_195704)));

			return result_195705;

		}

		function HEX3Aanonymous_195719(spry_195721) {
			var result_195722 = null;

			BeforeRet: do {
				var val_195723 = eval_arg_infix_192913(spry_195721);
				if (isObj(val_195723.m_type, NTI170191)) {
				result_195722 = val_195723;
				break BeforeRet;
				}
				else {
				if (isObj(val_195723.m_type, NTI170188)) {
				result_195722 = new_value_186520(val_195723.value);
				break BeforeRet;
				}
				else {
				raise_runtime_exception_170382(makeNimstrLit("Can not convert to float"));
				}
				}
			} while (false);

			return result_195722;

		}

		function HEX3Aanonymous_195753(spry_195755) {
			var result_195756 = null;

			BeforeRet: do {
				var val_195757 = eval_arg_infix_192913(spry_195755);
				if (isObj(val_195757.m_type, NTI170188)) {
				result_195756 = val_195757;
				break BeforeRet;
				}
				else {
				if (isObj(val_195757.m_type, NTI170191)) {
				result_195756 = new_value_186488(Math.trunc(val_195757.value));
				break BeforeRet;
				}
				else {
				raise_runtime_exception_170382(makeNimstrLit("Can not convert to int"));
				}
				}
			} while (false);

			return result_195756;

		}

		function HEX3Aanonymous_195787(spry_195789) {
			var result_195790 = null;

				result_195790 = new_value_186552(HEX24_170617(eval_arg_192974(spry_195789)));

			return result_195790;

		}

		function HEX3Aanonymous_195804(spry_195806) {
			var result_195807 = null;

				result_195807 = parse_190275(spry_195806.parser, eval_arg_192974(spry_195806).value);

			return result_195807;

		}

		function HEX3Aanonymous_195821(spry_195823) {
				var Tmp1;

			var result_195824 = null;

			BeforeRet: do {
				var comp_195825 = eval_arg_infix_192913(spry_195823);
				if (isObj(comp_195825.m_type, NTI170194)) {
				result_195824 = new_value_186488((comp_195825.value != null ? comp_195825.value.length : 0));
				}
				else {
				if (isObj(comp_195825.m_type, NTI170212)) {
				result_195824 = new_value_186488(((Tmp1 = eval_arg_infix_192913(spry_195823).nodes, Tmp1) != null ? Tmp1.length : 0));
				break BeforeRet;
				}
				else {
				if (isObj(comp_195825.m_type, NTI170223)) {
				result_195824 = new_value_186488(len_170785(eval_arg_infix_192913(spry_195823).bindings));
				break BeforeRet;
				}
				}}
			} while (false);

			return result_195824;

		}

		function HEX3Aanonymous_196000(spry_196002) {
			var result_196003 = null;

			BeforeRet: do {
				var comp_196004 = eval_arg_infix_192913(spry_196002);
				if (isObj(comp_196004.m_type, NTI170212)) {
				result_196003 = HEX5BHEX5D_190871(comp_196004, eval_arg_192974(spry_196002));
				break BeforeRet;
				}
				else {
				if (isObj(comp_196004.m_type, NTI170223)) {
				var hit_196021 = HEX5BHEX5D_190654(comp_196004, eval_arg_192974(spry_196002));
				if ((hit_196021 == null)) {
				result_196003 = spry_196002.undefVal;
				break BeforeRet;
				}
				else {
					result_196003 = hit_196021;
					break BeforeRet;
				}
				
				}
				}
			} while (false);

			return result_196003;

		}

		function HEX3Aanonymous_196040(spry_196042) {
			var result_196043 = null;

			BeforeRet: do {
				var comp_196044 = eval_arg_infix_192913(spry_196042);
				var key_196045 = eval_arg_192974(spry_196042);
				var val_196046 = eval_arg_192974(spry_196042);
				if (isObj(comp_196044.m_type, NTI170212)) {
				HEX5BHEX5DHEX3D_190943(comp_196044, key_196045, val_196046);
				}
				else {
				if (isObj(comp_196044.m_type, NTI170223)) {
				HEX5BHEX5DHEX3D_190925(comp_196044, key_196045, val_196046);
				}
				}
				result_196043 = comp_196044;
				break BeforeRet;
			} while (false);

			return result_196043;

		}

		function HEX3Aanonymous_196076(spry_196078) {
				var Tmp1;

			var result_196079 = null;

				var comp_196080 = eval_arg_infix_192913(spry_196078);
				var word_196081 = arg_192896(spry_196078);
				var hit_196082 = HEX5BHEX5D_190654(comp_196080, word_196081);
				if ((hit_196082 == null)) {
				Tmp1 = spry_196078.undefVal;
				}
				else {
				Tmp1 = hit_196082;
				}
				
				result_196079 = Tmp1;

			return result_196079;

		}

		function HEX3Aanonymous_196101(spry_196103) {
			var result_196104 = null;

			BeforeRet: do {
				var comp_196105 = eval_arg_infix_192913(spry_196103);
				var word_196106 = arg_192896(spry_196103);
				var val_196107 = eval_arg_192974(spry_196103);
				HEX5BHEX5DHEX3D_190925(comp_196105, word_196106, val_196107);
				result_196104 = comp_196105;
				break BeforeRet;
			} while (false);

			return result_196104;

		}

		function HEX3Aanonymous_196121(spry_196123) {
			var result_196124 = null;

			BeforeRet: do {
				var comp_196125 = eval_arg_infix_192913(spry_196123);
				var key_196126 = eval_arg_192974(spry_196123);
				if (isObj(comp_196125.m_type, NTI170212)) {
				result_196124 = new_value_186616(contains_186806(comp_196125, key_196126));
				break BeforeRet;
				}
				else {
				if (isObj(comp_196125.m_type, NTI170223)) {
				result_196124 = new_value_186616(contains_186904(comp_196125, key_196126));
				break BeforeRet;
				}
				}
				result_196124 = comp_196125;
				break BeforeRet;
			} while (false);

			return result_196124;

		}

		function HEX3Aanonymous_196156(spry_196158) {
			var result_196159 = null;

				result_196159 = eval_arg_infix_192913(spry_196158);
				var comp_196160 = result_196159;
				add_186711(comp_196160, eval_arg_192974(spry_196158));

			return result_196159;

		}

		function HEX3Aanonymous_196174(spry_196176) {
			var result_196177 = null;

				result_196177 = eval_arg_infix_192913(spry_196176);
				var comp_196178 = result_196177;
				remove_last_187532(comp_196178);

			return result_196177;

		}

		function HEX3Aanonymous_196192(spry_196194) {
			var result_196195 = null;

				var comp_196196 = eval_arg_infix_192913(spry_196194);
				var frm_196197 = eval_arg_192974(spry_196194).value;
				var to_196198 = eval_arg_192974(spry_196194).value;
				if (isObj(comp_196196.m_type, NTI170194)) {
				result_196195 = new_value_186552(HEX5BHEX5D_74681(comp_196196.value, HEX2EHEX2E_74620(frm_196197, to_196198)));
				}
				else {
				if (isObj(comp_196196.m_type, NTI170220)) {
				result_196195 = new_blok_186293(HEX5BHEX5D_196265(comp_196196.nodes, HEX2EHEX2E_74620(frm_196197, to_196198)));
				}
				else {
				if (isObj(comp_196196.m_type, NTI170216)) {
				result_196195 = new_paren_186358(HEX5BHEX5D_196265(comp_196196.nodes, HEX2EHEX2E_74620(frm_196197, to_196198)));
				}
				else {
				if (isObj(comp_196196.m_type, NTI170218)) {
				result_196195 = new_curly_186423(HEX5BHEX5D_196265(comp_196196.nodes, HEX2EHEX2E_74620(frm_196197, to_196198)));
				}
				}}}
				if (!((comp_196196.tags == null))) {
				result_196195.tags = comp_196196.tags;
				}
				

			return result_196195;

		}

		function HEX3Aanonymous_196723(spry_196725) {
			var result_196726 = null;

			BeforeRet: do {
				var blk1_196727 = eval_arg_infix_192913(spry_196725);
				var blk2_196728 = eval_arg_192974(spry_196725);
				var current_196729 = spry_196725.currentActivation;
				var orig_196730 = current_196729.body.nodes[chckIndx(0, 0, current_196729.body.nodes.length+0-1)-0];
				var oldpos_196731 = current_196729.pos;
				current_196729.pos = 0;
				var activation_196732 = new_activation_191231(blk2_196728);
				L1: do {
					var each_196739 = null;
					var colontmp__198329 = null;
					colontmp__198329 = blk1_196727.nodes;
					var i_198330 = 0;
					var l_198331 = (colontmp__198329 != null ? colontmp__198329.length : 0);
					L2: do {
							L3: while (true) {
							if (!(i_198330 < l_198331)) break L3;
								each_196739 = colontmp__198329[chckIndx(i_198330, 0, colontmp__198329.length+0-1)-0];
								current_196729.body.nodes[chckIndx(0, 0, current_196729.body.nodes.length+0-1)-0] = each_196739;
								result_196726 = eval_193668(activation_196732, spry_196725);
								reset_191355(activation_196732);
								if (current_196729.returned) {
								current_196729.body.nodes[chckIndx(0, 0, current_196729.body.nodes.length+0-1)-0] = orig_196730;
								current_196729.pos = oldpos_196731;
								break BeforeRet;
								}
								
								current_196729.pos = 0;
								i_198330 = addInt(i_198330, 1);
								if (!(((colontmp__198329 != null ? colontmp__198329.length : 0) == l_198331))) {
								failed_assert_impl_15051(makeNimstrLit("iterators.nim(190, 11) `len(a) == L` the length of the seq changed while iterating over it"));
								}
								
							}
					} while(false);
				} while(false);
				current_196729.body.nodes[chckIndx(0, 0, current_196729.body.nodes.length+0-1)-0] = orig_196730;
				current_196729.pos = oldpos_196731;
				result_196726 = blk1_196727;
				break BeforeRet;
			} while (false);

			return result_196726;

		}

		function HEX3Aanonymous_196753(spry_196755) {
			var result_196756 = null;

				exit(eval_arg_192974(spry_196755).value);

			return result_196756;

		}

		function HEX3Aanonymous_196770(spry_196772) {
			var result_196773 = null;

				result_196773 = funk_190543(spry_196772, eval_arg_192974(spry_196772));

			return result_196773;

		}

		function HEX3Aanonymous_196787(spry_196789) {
			var result_196790 = null;

				result_196790 = meth_190547(spry_196789, eval_arg_192974(spry_196789));

			return result_196790;

		}

		function HEX3Aanonymous_196804(spry_196806) {
			var result_196807 = null;

				result_196807 = eval_do_190565(eval_arg_192974(spry_196806), spry_196806);

			return result_196807;

		}

		function HEX3Aanonymous_196821(spry_196823) {
			var result_196824 = null;

				result_196824 = arg_192896(spry_196823);

			return result_196824;

		}

		function HEX3Aanonymous_196838(spry_196840) {
			var result_196841 = null;

				result_196841 = eval_arg_192974(spry_196840);

			return result_196841;

		}

		function HEX3Aanonymous_196855(spry_196857) {
			var result_196858 = null;

				result_196858 = eval_190559(eval_arg_192974(spry_196857), spry_196857);

			return result_196858;

		}

		function HEX3Aanonymous_196872(spry_196874) {
			var result_196875 = null;

				result_196875 = reify_193027(eval_arg_192974(spry_196874));

			return result_196875;

		}

		function HEX3Aanonymous_196889(spry_196891) {
			var result_196892 = null;

				result_196892 = litify_193994(spry_196891, eval_arg_192974(spry_196891));

			return result_196892;

		}

		function HEX3Aanonymous_196906(spry_196908) {
			var result_196909 = null;

				result_196909 = new_or_get_lit_word_182107(spry_196908.parser, HEX24_170617(arg_192896(spry_196908)));

			return result_196909;

		}

		function HEX3Aanonymous_196923(spry_196925) {
			var result_196926 = null;

				result_196926 = new_or_get_lit_word_182107(spry_196925.parser, eval_arg_192974(spry_196925).value);

			return result_196926;

		}

		function HEX3Aanonymous_196940(spry_196942) {
			var result_196943 = null;

				result_196943 = new_word_189553(null, eval_arg_192974(spry_196942).value);

			return result_196943;

		}

		function HEX3Aanonymous_196957(spry_196959) {
			var result_196960 = null;

				result_196960 = clone_188045(eval_arg_infix_192913(spry_196959));

			return result_196960;

		}

		function HEX3Aanonymous_196974(spry_196976) {
			var result_196977 = null;

				result_196977 = eval_arg_192974(spry_196976);
				spry_196976.currentActivation.returned = true;

			return result_196977;

		}

		function HEX3Aanonymous_196991(spry_196993) {
			var result_196994 = null;

			BeforeRet: do {
				if (value_172612(eval_arg_infix_192913(spry_196993))) {
				result_196994 = eval_do_190565(eval_arg_192974(spry_196993), spry_196993);
				break BeforeRet;
				}
				else {
					arg_192896(spry_196993);
					result_196994 = spry_196993.nilVal;
					break BeforeRet;
				}
				
			} while (false);

			return result_196994;

		}

		function HEX3Aanonymous_197008(spry_197010) {
			var result_197011 = null;

			BeforeRet: do {
				if (value_172612(eval_arg_infix_192913(spry_197010))) {
				arg_192896(spry_197010);
				result_197011 = spry_197010.nilVal;
				break BeforeRet;
				}
				else {
					result_197011 = eval_do_190565(eval_arg_192974(spry_197010), spry_197010);
					break BeforeRet;
				}
				
			} while (false);

			return result_197011;

		}

		function HEX3Aanonymous_197025(spry_197027) {
			var result_197028 = null;

			BeforeRet: do {
				if (value_172612(eval_arg_infix_192913(spry_197027))) {
				var res_197029 = eval_do_190565(eval_arg_192974(spry_197027), spry_197027);
				arg_192896(spry_197027);
				result_197028 = res_197029;
				break BeforeRet;
				}
				else {
					arg_192896(spry_197027);
					result_197028 = eval_do_190565(eval_arg_192974(spry_197027), spry_197027);
					break BeforeRet;
				}
				
			} while (false);

			return result_197028;

		}

		function HEX3Aanonymous_197043(spry_197045) {
			var result_197046 = null;

			BeforeRet: do {
				if (value_172612(eval_arg_infix_192913(spry_197045))) {
				arg_192896(spry_197045);
				result_197046 = eval_do_190565(eval_arg_192974(spry_197045), spry_197045);
				break BeforeRet;
				}
				else {
					var res_197047 = eval_do_190565(eval_arg_192974(spry_197045), spry_197045);
					arg_192896(spry_197045);
					result_197046 = res_197047;
					break BeforeRet;
				}
				
			} while (false);

			return result_197046;

		}

		function HEX3Aanonymous_197061(spry_197063) {
			var result_197064 = null;

			BeforeRet: do {
				var times_197065 = eval_arg_infix_192913(spry_197063).value;
				var fn_197066 = eval_arg_192974(spry_197063);
				L1: do {
					var i_197075 = 0;
					var res_198339 = 1;
					L2: do {
							L3: while (true) {
							if (!(res_198339 <= times_197065)) break L3;
								i_197075 = res_198339;
								result_197064 = eval_do_190565(fn_197066, spry_197063);
								if (spry_197063.currentActivation.returned) {
								break BeforeRet;
								}
								
								res_198339 = addInt(res_198339, 1);
							}
					} while(false);
				} while(false);
			} while (false);

			return result_197064;

		}

		function HEX3Aanonymous_197089(spry_197091) {
			var result_197092 = null;

			BeforeRet: do {
				var self_197093 = eval_arg_infix_192913(spry_197091);
				var frm_197094 = self_197093.value;
				var to_197095 = eval_arg_192974(spry_197091).value;
				var fn_197096 = eval_arg_192974(spry_197091);
				var current_197097 = spry_197091.currentActivation;
				var orig_197098 = current_197097.body.nodes[chckIndx(0, 0, current_197097.body.nodes.length+0-1)-0];
				var oldpos_197099 = current_197097.pos;
				current_197097.pos = 0;
				var activation_197100 = new_activation_191231(fn_197096);
				L1: do {
					var i_197106 = 0;
					var res_198345 = frm_197094;
					L2: do {
							L3: while (true) {
							if (!(res_198345 <= to_197095)) break L3;
								i_197106 = res_198345;
								current_197097.body.nodes[chckIndx(0, 0, current_197097.body.nodes.length+0-1)-0] = new_value_186488(i_197106);
								result_197092 = eval_193668(activation_197100, spry_197091);
								reset_191355(activation_197100);
								current_197097.pos = 0;
								if (current_197097.returned) {
								current_197097.body.nodes[chckIndx(0, 0, current_197097.body.nodes.length+0-1)-0] = orig_197098;
								current_197097.pos = oldpos_197099;
								break BeforeRet;
								}
								
								res_198345 = addInt(res_198345, 1);
							}
					} while(false);
				} while(false);
				current_197097.body.nodes[chckIndx(0, 0, current_197097.body.nodes.length+0-1)-0] = orig_197098;
				current_197097.pos = oldpos_197099;
				result_197092 = self_197093;
				break BeforeRet;
			} while (false);

			return result_197092;

		}

		function HEX3Aanonymous_197120(spry_197122) {
			var result_197123 = null;

			BeforeRet: do {
				var blk1_197124 = eval_arg_infix_192913(spry_197122);
				var blk2_197125 = eval_arg_192974(spry_197122);
				result_197123 = eval_do_190565(blk1_197124, spry_197122);
				if (spry_197122.currentActivation.returned) {
				break BeforeRet;
				}
				
				L1: do {
						L2: while (true) {
						if (!value_172612(result_197123)) break L2;
							result_197123 = eval_do_190565(blk2_197125, spry_197122);
							if (spry_197122.currentActivation.returned) {
							break BeforeRet;
							}
							
							result_197123 = eval_do_190565(blk1_197124, spry_197122);
							if (spry_197122.currentActivation.returned) {
							break BeforeRet;
							}
							
						}
				} while(false);
			} while (false);

			return result_197123;

		}

		function HEX3Aanonymous_197139(spry_197141) {
			var result_197142 = null;

			BeforeRet: do {
				var blk1_197143 = eval_arg_infix_192913(spry_197141);
				var blk2_197144 = eval_arg_192974(spry_197141);
				result_197142 = eval_do_190565(blk1_197143, spry_197141);
				if (spry_197141.currentActivation.returned) {
				break BeforeRet;
				}
				
				L1: do {
						L2: while (true) {
						if (!!(value_172612(result_197142))) break L2;
							result_197142 = eval_do_190565(blk2_197144, spry_197141);
							if (spry_197141.currentActivation.returned) {
							break BeforeRet;
							}
							
							result_197142 = eval_do_190565(blk1_197143, spry_197141);
							if (spry_197141.currentActivation.returned) {
							break BeforeRet;
							}
							
						}
				} while(false);
			} while (false);

			return result_197142;

		}

		make_word_192991(spry_195030, makeNimstrLit("root"), new_prim_func_191037(HEX3Aanonymous_195031));
		make_word_192991(spry_195030, makeNimstrLit("activation"), new_prim_func_191037(HEX3Aanonymous_195048));
		make_word_192991(spry_195030, makeNimstrLit("locals"), new_prim_func_191037(HEX3Aanonymous_195065));
		make_word_192991(spry_195030, makeNimstrLit("node"), new_prim_func_191037(HEX3Aanonymous_195088));
		make_word_192991(spry_195030, makeNimstrLit("self"), new_prim_func_191037(HEX3Aanonymous_195117));
		make_word_192991(spry_195030, makeNimstrLit(";"), new_prim_func_191037(HEX3Aanonymous_195134));
		make_word_192991(spry_195030, makeNimstrLit("tag:"), new_prim_meth_191069(HEX3Aanonymous_195156));
		make_word_192991(spry_195030, makeNimstrLit("tag?"), new_prim_meth_191069(HEX3Aanonymous_195202));
		make_word_192991(spry_195030, makeNimstrLit("tags"), new_prim_meth_191069(HEX3Aanonymous_195234));
		make_word_192991(spry_195030, makeNimstrLit("tags:"), new_prim_meth_191069(HEX3Aanonymous_195257));
		make_word_192991(spry_195030, makeNimstrLit("="), new_prim_meth_191069(HEX3Aanonymous_195274));
		make_word_192991(spry_195030, makeNimstrLit("set:"), new_prim_meth_191069(HEX3Aanonymous_195291));
		make_word_192991(spry_195030, makeNimstrLit("?"), new_prim_meth_191069(HEX3Aanonymous_195308));
		make_word_192991(spry_195030, makeNimstrLit("nil?"), new_prim_meth_191069(HEX3Aanonymous_195331));
		make_word_192991(spry_195030, makeNimstrLit("set?"), new_prim_meth_191069(HEX3Aanonymous_195354));
		make_word_192991(spry_195030, makeNimstrLit("+"), new_prim_meth_191069(HEX3Aanonymous_195379));
		make_word_192991(spry_195030, makeNimstrLit("-"), new_prim_meth_191069(HEX3Aanonymous_195396));
		make_word_192991(spry_195030, makeNimstrLit("*"), new_prim_meth_191069(HEX3Aanonymous_195413));
		make_word_192991(spry_195030, makeNimstrLit("/"), new_prim_meth_191069(HEX3Aanonymous_195430));
		make_word_192991(spry_195030, makeNimstrLit("<"), new_prim_meth_191069(HEX3Aanonymous_195447));
		make_word_192991(spry_195030, makeNimstrLit(">"), new_prim_meth_191069(HEX3Aanonymous_195464));
		make_word_192991(spry_195030, makeNimstrLit("<="), new_prim_meth_191069(HEX3Aanonymous_195481));
		make_word_192991(spry_195030, makeNimstrLit(">="), new_prim_meth_191069(HEX3Aanonymous_195498));
		make_word_192991(spry_195030, makeNimstrLit("=="), new_prim_meth_191069(HEX3Aanonymous_195515));
		make_word_192991(spry_195030, makeNimstrLit("==="), new_prim_meth_191069(HEX3Aanonymous_195532));
		make_word_192991(spry_195030, makeNimstrLit("!="), new_prim_meth_191069(HEX3Aanonymous_195556));
		make_word_192991(spry_195030, makeNimstrLit("!=="), new_prim_meth_191069(HEX3Aanonymous_195573));
		make_word_192991(spry_195030, makeNimstrLit("not"), new_prim_meth_191069(HEX3Aanonymous_195597));
		make_word_192991(spry_195030, makeNimstrLit("and"), new_prim_meth_191069(HEX3Aanonymous_195614));
		make_word_192991(spry_195030, makeNimstrLit("or"), new_prim_meth_191069(HEX3Aanonymous_195633));
		make_word_192991(spry_195030, makeNimstrLit(","), new_prim_meth_191069(HEX3Aanonymous_195652));
		make_word_192991(spry_195030, makeNimstrLit("print"), new_prim_meth_191069(HEX3Aanonymous_195702));
		make_word_192991(spry_195030, makeNimstrLit("asFloat"), new_prim_meth_191069(HEX3Aanonymous_195719));
		make_word_192991(spry_195030, makeNimstrLit("asInt"), new_prim_meth_191069(HEX3Aanonymous_195753));
		make_word_192991(spry_195030, makeNimstrLit("serialize"), new_prim_func_191037(HEX3Aanonymous_195787));
		make_word_192991(spry_195030, makeNimstrLit("parse"), new_prim_func_191037(HEX3Aanonymous_195804));
		make_word_192991(spry_195030, makeNimstrLit("size"), new_prim_meth_191069(HEX3Aanonymous_195821));
		make_word_192991(spry_195030, makeNimstrLit("at:"), new_prim_meth_191069(HEX3Aanonymous_196000));
		make_word_192991(spry_195030, makeNimstrLit("at:put:"), new_prim_meth_191069(HEX3Aanonymous_196040));
		make_word_192991(spry_195030, makeNimstrLit("get:"), new_prim_meth_191069(HEX3Aanonymous_196076));
		make_word_192991(spry_195030, makeNimstrLit("set:to:"), new_prim_meth_191069(HEX3Aanonymous_196101));
		make_word_192991(spry_195030, makeNimstrLit("contains:"), new_prim_meth_191069(HEX3Aanonymous_196121));
		make_word_192991(spry_195030, makeNimstrLit("add:"), new_prim_meth_191069(HEX3Aanonymous_196156));
		make_word_192991(spry_195030, makeNimstrLit("removeLast"), new_prim_meth_191069(HEX3Aanonymous_196174));
		make_word_192991(spry_195030, makeNimstrLit("copyFrom:to:"), new_prim_meth_191069(HEX3Aanonymous_196192));
		make_word_192991(spry_195030, makeNimstrLit("do:"), new_prim_meth_191069(HEX3Aanonymous_196723));
		make_word_192991(spry_195030, makeNimstrLit("quit"), new_prim_func_191037(HEX3Aanonymous_196753));
		make_word_192991(spry_195030, makeNimstrLit("func"), new_prim_func_191037(HEX3Aanonymous_196770));
		make_word_192991(spry_195030, makeNimstrLit("method"), new_prim_func_191037(HEX3Aanonymous_196787));
		make_word_192991(spry_195030, makeNimstrLit("do"), new_prim_func_191037(HEX3Aanonymous_196804));
		make_word_192991(spry_195030, makeNimstrLit("$"), new_prim_func_191037(HEX3Aanonymous_196821));
		make_word_192991(spry_195030, makeNimstrLit("eva"), new_prim_func_191037(HEX3Aanonymous_196838));
		make_word_192991(spry_195030, makeNimstrLit("eval"), new_prim_func_191037(HEX3Aanonymous_196855));
		make_word_192991(spry_195030, makeNimstrLit("reify"), new_prim_func_191037(HEX3Aanonymous_196872));
		make_word_192991(spry_195030, makeNimstrLit("litify"), new_prim_func_191037(HEX3Aanonymous_196889));
		make_word_192991(spry_195030, makeNimstrLit("quote"), new_prim_func_191037(HEX3Aanonymous_196906));
		make_word_192991(spry_195030, makeNimstrLit("litword"), new_prim_func_191037(HEX3Aanonymous_196923));
		make_word_192991(spry_195030, makeNimstrLit("word"), new_prim_func_191037(HEX3Aanonymous_196940));
		make_word_192991(spry_195030, makeNimstrLit("clone"), new_prim_meth_191069(HEX3Aanonymous_196957));
		make_word_192991(spry_195030, makeNimstrLit("^"), new_prim_func_191037(HEX3Aanonymous_196974));
		make_word_192991(spry_195030, makeNimstrLit("then:"), new_prim_meth_191069(HEX3Aanonymous_196991));
		make_word_192991(spry_195030, makeNimstrLit("else:"), new_prim_meth_191069(HEX3Aanonymous_197008));
		make_word_192991(spry_195030, makeNimstrLit("then:else:"), new_prim_meth_191069(HEX3Aanonymous_197025));
		make_word_192991(spry_195030, makeNimstrLit("else:then:"), new_prim_meth_191069(HEX3Aanonymous_197043));
		make_word_192991(spry_195030, makeNimstrLit("repeat:"), new_prim_meth_191069(HEX3Aanonymous_197061));
		make_word_192991(spry_195030, makeNimstrLit("to:do:"), new_prim_meth_191069(HEX3Aanonymous_197089));
		make_word_192991(spry_195030, makeNimstrLit("whileTrue:"), new_prim_meth_191069(HEX3Aanonymous_197120));
		make_word_192991(spry_195030, makeNimstrLit("whileFalse:"), new_prim_meth_191069(HEX3Aanonymous_197139));

	
}

function eval_193925(spry_193927, code_193928) {
	var result_193929 = null;

		result_193929 = eval_do_190565(parse_190275(spry_193927.parser, code_193928), spry_193927);

	return result_193929;

}

function factorial(n_198016) {
	var result_198017 = 0;

		var vm_198018 = new_interpreter_194012();
		add_core_195028(vm_198018);
		result_198017 = eval_193925(vm_198018, (makeNimstrLit("[\x0A    factorial = func [:n > 0 then: [n * factorial (n - 1)] else: [1]]\x0A    factorial ") || []).concat(cstrToNimstr((n_198016)+"") || [],makeNimstrLit("]") || [])).value;

	return result_198017;

}

function sys_fatal_24041(message_24045) {
		var e_24203 = null;
		e_24203 = {m_type: NTI4086, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		e_24203.message = nimCopy(null, message_24045, NTI138);
		raiseException(e_24203, "NilAccessError");

	
}

function chckNilDisp(p_24039, p_24039_Idx) {
		if ((p_24039 == null && p_24039_Idx == 0)) {
		sys_fatal_24041(makeNimstrLit("cannot dispatch; dispatcher is nil"));
		}
		

	
}

function map_171910(s_171915, op_171918) {
	var result_171920 = null;

		result_171920 = new Array(chckRange((s_171915 != null ? s_171915.length : 0), 0, 2147483647)); for (var i=0;i<chckRange((s_171915 != null ? s_171915.length : 0), 0, 2147483647);++i) {result_171920[i]=null;}		L1: do {
			var i_171943 = 0;
			var colontmp__198354 = 0;
			colontmp__198354 = (s_171915 != null ? s_171915.length : 0);
			var i_198355 = 0;
			L2: do {
					L3: while (true) {
					if (!(i_198355 < colontmp__198354)) break L3;
						i_171943 = i_198355;
						result_171920[chckIndx(i_171943, 0, result_171920.length+0-1)-0] = nimCopy(null, op_171918(s_171915[chckIndx(i_171943, 0, s_171915.length+0-1)-0]), NTI138);
						i_198355 = addInt(i_198355, 1);
					}
			} while(false);
		} while(false);

	return result_171920;

}

function HEX24_171885(self_171888) {

		function HEX3Aanonymous_171891(n_171893) {
			var result_171894 = null;

				result_171894 = nimCopy(null, HEX24_170617(n_171893), NTI138);

			return result_171894;

		}

	var result_171889 = null;

		result_171889 = nimCopy(null, nsuJoinSep(map_171910(self_171888, HEX3Aanonymous_171891), makeNimstrLit(" ")), NTI138);

	return result_171889;

}

function HEX24_172246(self_172248) {
	var result_172249 = null;

		result_172249 = nimCopy(null, (makeNimstrLit("{") || []).concat(HEX24_171885(self_172248.nodes) || [],makeNimstrLit("}") || []), NTI138);

	return result_172249;

}

function HEX24_172228(self_172230) {
	var result_172231 = null;

		result_172231 = nimCopy(null, (makeNimstrLit("(") || []).concat(HEX24_171885(self_172230.nodes) || [],makeNimstrLit(")") || []), NTI138);

	return result_172231;

}

function HEX24_190584(self_190586) {
	var result_190587 = null;

		result_190587 = nimCopy(null, makeNimstrLit("primitive-method"), NTI138);

	return result_190587;

}

function HEX24_190567(self_190569) {
	var result_190570 = null;

		result_190570 = nimCopy(null, makeNimstrLit("primitive-func"), NTI138);

	return result_190570;

}

function HEX24_190637(self_190639) {
	var result_190640 = null;

	BeforeRet: do {
		result_190640 = nimCopy(null, (makeNimstrLit("activation [") || []).concat(HEX24_170617(self_190639.body) || [],makeNimstrLit(" ") || [],cstrToNimstr((self_190639.pos)+"") || [],makeNimstrLit("]") || []), NTI138);
		break BeforeRet;
	} while (false);

	return result_190640;

}

function HEX24_172264(self_172266) {
	var result_172267 = null;

		result_172267 = nimCopy(null, [], NTI138);
		L1: do {
			var i_172281 = 0;
			var colontmp__198359 = 0;
			colontmp__198359 = subInt((self_172266.keys != null ? self_172266.keys.length : 0), 1);
			var res_198360 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_198360 <= colontmp__198359)) break L3;
						i_172281 = res_198360;
						result_172267 = nimCopy(null, (result_172267 || []).concat(self_172266.keys[chckIndx(i_172281, 0, self_172266.keys.length+0-1)-0] || [],makeNimstrLit(" ") || [],HEX24_170617(self_172266.args[chckIndx(i_172281, 0, self_172266.args.length+0-1)-0]) || []), NTI138);
						res_198360 = addInt(res_198360, 1);
					}
			} while(false);
		} while(false);

	return result_172267;

}

function HEX24_172159(self_172161) {
	var result_172162 = null;

		result_172162 = nimCopy(null, (makeNimstrLit("\'") || []).concat(self_172161.word || []), NTI138);

	return result_172162;

}

function HEX24_172193(self_172195) {
	var result_172196 = null;

		result_172196 = nimCopy(null, (makeNimstrLit(":$") || []).concat(self_172195.word || []), NTI138);

	return result_172196;

}

function HEX24_190619(self_190621) {
	var result_190622 = null;

	BeforeRet: do {
		result_190622 = nimCopy(null, (makeNimstrLit("method [") || []).concat(HEX24_171885(self_190621.nodes) || [],makeNimstrLit("]") || []), NTI138);
		break BeforeRet;
	} while (false);

	return result_190622;

}

function HEX24_190601(self_190603) {
	var result_190604 = null;

	BeforeRet: do {
		result_190604 = nimCopy(null, (makeNimstrLit("func [") || []).concat(HEX24_171885(self_190603.nodes) || [],makeNimstrLit("]") || []), NTI138);
		break BeforeRet;
	} while (false);

	return result_190604;

}

function HEX24_172142(self_172144) {
	var result_172145 = null;

		result_172145 = nimCopy(null, (makeNimstrLit("$..") || []).concat(self_172144.word || []), NTI138);

	return result_172145;

}

function HEX24_172040(self_172042) {
	var result_172043 = null;

		result_172043 = nimCopy(null, (makeNimstrLit(".") || []).concat(self_172042.word || []), NTI138);

	return result_172043;

}

function HEX24_172176(self_172178) {
	var result_172179 = null;

		result_172179 = nimCopy(null, (makeNimstrLit(":") || []).concat(self_172178.word || []), NTI138);

	return result_172179;

}

function HEX24_172006(self_172008) {
	var result_172009 = null;

		result_172009 = nimCopy(null, (HEX24_170617(self_172008.module) || []).concat(makeNimstrLit("::") || [],self_172008.word || []), NTI138);

	return result_172009;

}

function HEX24_171989(self_171991) {
	var result_171992 = null;

		result_171992 = nimCopy(null, self_171991.word, NTI138);

	return result_171992;

}

function HEX24_172210(self_172212) {
	var result_172213 = null;

		result_172213 = nimCopy(null, (makeNimstrLit("[") || []).concat(HEX24_171885(self_172212.nodes) || [],makeNimstrLit("]") || []), NTI138);

	return result_172213;

}

function HEX24_172108(self_172110) {
	var result_172111 = null;

		result_172111 = nimCopy(null, (makeNimstrLit("$@") || []).concat(self_172110.word || []), NTI138);

	return result_172111;

}

function HEX24_172023(self_172025) {
	var result_172026 = null;

		result_172026 = nimCopy(null, (makeNimstrLit("@") || []).concat(self_172025.word || []), NTI138);

	return result_172026;

}

function HEX24_172057(self_172059) {
	var result_172060 = null;

		result_172060 = nimCopy(null, (makeNimstrLit("..") || []).concat(self_172059.word || []), NTI138);

	return result_172060;

}

function HEX24_171868(self_171870) {
	var result_171871 = null;

		result_171871 = nimCopy(null, makeNimstrLit("undef"), NTI138);

	return result_171871;

}

function HEX24_172091(self_172093) {
	var result_172094 = null;

		result_172094 = nimCopy(null, (makeNimstrLit("$") || []).concat(HEX24_170617(self_172093.module) || [],makeNimstrLit("::") || [],self_172093.word || []), NTI138);

	return result_172094;

}

function HEX24_172074(self_172076) {
	var result_172077 = null;

		result_172077 = nimCopy(null, (makeNimstrLit("$") || []).concat(self_172076.word || []), NTI138);

	return result_172077;

}

function HEX24_171834(self_171836) {
	var result_171837 = null;

		result_171837 = nimCopy(null, makeNimstrLit("false"), NTI138);

	return result_171837;

}

function HEX24_172125(self_172127) {
	var result_172128 = null;

		result_172128 = nimCopy(null, (makeNimstrLit("$.") || []).concat(self_172127.word || []), NTI138);

	return result_172128;

}

function HEX24_171972(self_171974) {
	var result_171975 = null;

		result_171975 = nimCopy(null, self_171974.word, NTI138);

	return result_171975;

}

function HEX24_170620(self_170622) {
	var result_170623 = null;

	BeforeRet: do {
		if ((self_170622.key == null)) {
		result_170623 = nimCopy(null, (makeNimstrLit("nil = ") || []).concat(HEX24_170617(self_170622.val) || []), NTI138);
		break BeforeRet;
		}
		
		if ((self_170622.val == null)) {
		result_170623 = nimCopy(null, (HEX24_170617(self_170622.key) || []).concat(makeNimstrLit(" = nil") || []), NTI138);
		break BeforeRet;
		}
		
		result_170623 = nimCopy(null, (HEX24_170617(self_170622.key) || []).concat(makeNimstrLit(" = ") || [],HEX24_170617(self_170622.val) || []), NTI138);
	} while (false);

	return result_170623;

}

function HEX24_171851(self_171853) {
	var result_171854 = null;

		result_171854 = nimCopy(null, makeNimstrLit("nil"), NTI138);

	return result_171854;

}

function HEX24_171689(self_171691) {
	var result_171692 = null;

		result_171692 = nimCopy(null, cstrToNimstr((self_171691.value)+""), NTI138);

	return result_171692;

}

function HEX24_170647(self_170649) {
	var result_170650 = null;

	BeforeRet: do {
		result_170650 = nimCopy(null, makeNimstrLit("{"), NTI138);
		var first_170651 = true;
		L1: do {
			var k_171614 = null;
			var v_171615 = null;
			var colontmp__198366 = {data: null, counter: 0};
			nimCopy(colontmp__198366, self_170649.bindings, NTI170233);
			var l_198374 = len_170785(colontmp__198366);
			L2: do {
				var h_198376 = 0;
				var colontmp__198377 = 0;
				colontmp__198377 = (colontmp__198366.data != null ? (colontmp__198366.data.length-1) : -1);
				var res_198378 = 0;
				L3: do {
						L4: while (true) {
						if (!(res_198378 <= colontmp__198377)) break L4;
							h_198376 = res_198378;
							if (is_filled_166418(colontmp__198366.data[chckIndx(h_198376, 0, colontmp__198366.data.length+0-1)-0].Field0)) {
							k_171614 = colontmp__198366.data[chckIndx(h_198376, 0, colontmp__198366.data.length+0-1)-0].Field1;
							v_171615 = colontmp__198366.data[chckIndx(h_198376, 0, colontmp__198366.data.length+0-1)-0].Field2;
							if (first_170651) {
							if (result_170650 != null) { result_170650 = (result_170650).concat(HEX24_170617(v_171615)); } else { result_170650 = HEX24_170617(v_171615).slice(); };
							first_170651 = false;
							}
							else {
							if (result_170650 != null) { result_170650 = (result_170650).concat((makeNimstrLit(" ") || []).concat(HEX24_170617(v_171615) || [])); } else { result_170650 = (makeNimstrLit(" ") || []).concat(HEX24_170617(v_171615) || []).slice(); };
							}
							
							if (!((len_170785(colontmp__198366) == l_198374))) {
							failed_assert_impl_15051(makeNimstrLit("tables.nim(669, 13) `len(t) == L` the length of the table changed while iterating over it"));
							}
							
							}
							
							res_198378 = addInt(res_198378, 1);
						}
				} while(false);
			} while(false);
		} while(false);
		result_170650 = nimCopy(null, (result_170650 || []).concat(makeNimstrLit("}") || []), NTI138);
		break BeforeRet;
	} while (false);

	return result_170650;

}

function nsuToHex(x_150450, len_150451) {
	var result_150452 = null;

		var n_150454 = x_150450;
		result_150452 = nimCopy(null, mnewString(len_150451), NTI138);
		L1: do {
			var j_150461 = 0;
			var colontmp__198388 = 0;
			colontmp__198388 = subInt(len_150451, 1);
			var res_198389 = colontmp__198388;
			L2: do {
					L3: while (true) {
					if (!(0 <= res_198389)) break L3;
						j_150461 = res_198389;
						result_150452[chckIndx(j_150461, 0, result_150452.length+0-1)-0] = makeNimstrLit("0123456789ABCDEF")[chckIndx((n_150454 & 15), 0, makeNimstrLit("0123456789ABCDEF").length+0-1)-0];
						n_150454 = (n_150454 >> 4);
						if (((n_150454 == 0) && (x_150450 < 0))) {
						n_150454 = -1;
						}
						
						res_198389 = subInt(res_198389, 1);
					}
			} while(false);
		} while(false);

	return result_150452;

}

function nsuEscape(s_156000, prefix_156001, suffix_156002) {
	var result_156003 = null;

		result_156003 = nimCopy(null, mnewString(0), NTI138);
		if (result_156003 != null) { result_156003 = (result_156003).concat(prefix_156001); } else { result_156003 = prefix_156001.slice(); };
		L1: do {
			var c_156012 = 0;
			var i_198384 = 0;
			var l_198385 = (s_156000 != null ? s_156000.length : 0);
			L2: do {
					L3: while (true) {
					if (!(i_198384 < l_198385)) break L3;
						c_156012 = s_156000[chckIndx(i_198384, 0, s_156000.length+0-1)-0];
						switch (c_156012) {
						case 0:
						case 1:
						case 2:
						case 3:
						case 4:
						case 5:
						case 6:
						case 7:
						case 8:
						case 9:
						case 10:
						case 11:
						case 12:
						case 13:
						case 14:
						case 15:
						case 16:
						case 17:
						case 18:
						case 19:
						case 20:
						case 21:
						case 22:
						case 23:
						case 24:
						case 25:
						case 26:
						case 27:
						case 28:
						case 29:
						case 30:
						case 31:
						case 127:
						case 128:
						case 129:
						case 130:
						case 131:
						case 132:
						case 133:
						case 134:
						case 135:
						case 136:
						case 137:
						case 138:
						case 139:
						case 140:
						case 141:
						case 142:
						case 143:
						case 144:
						case 145:
						case 146:
						case 147:
						case 148:
						case 149:
						case 150:
						case 151:
						case 152:
						case 153:
						case 154:
						case 155:
						case 156:
						case 157:
						case 158:
						case 159:
						case 160:
						case 161:
						case 162:
						case 163:
						case 164:
						case 165:
						case 166:
						case 167:
						case 168:
						case 169:
						case 170:
						case 171:
						case 172:
						case 173:
						case 174:
						case 175:
						case 176:
						case 177:
						case 178:
						case 179:
						case 180:
						case 181:
						case 182:
						case 183:
						case 184:
						case 185:
						case 186:
						case 187:
						case 188:
						case 189:
						case 190:
						case 191:
						case 192:
						case 193:
						case 194:
						case 195:
						case 196:
						case 197:
						case 198:
						case 199:
						case 200:
						case 201:
						case 202:
						case 203:
						case 204:
						case 205:
						case 206:
						case 207:
						case 208:
						case 209:
						case 210:
						case 211:
						case 212:
						case 213:
						case 214:
						case 215:
						case 216:
						case 217:
						case 218:
						case 219:
						case 220:
						case 221:
						case 222:
						case 223:
						case 224:
						case 225:
						case 226:
						case 227:
						case 228:
						case 229:
						case 230:
						case 231:
						case 232:
						case 233:
						case 234:
						case 235:
						case 236:
						case 237:
						case 238:
						case 239:
						case 240:
						case 241:
						case 242:
						case 243:
						case 244:
						case 245:
						case 246:
						case 247:
						case 248:
						case 249:
						case 250:
						case 251:
						case 252:
						case 253:
						case 254:
						case 255:
							if (result_156003 != null) { result_156003 = (result_156003).concat(makeNimstrLit("\\x")); } else { result_156003 = makeNimstrLit("\\x"); };
							if (result_156003 != null) { result_156003 = (result_156003).concat(nsuToHex(c_156012, 2)); } else { result_156003 = nsuToHex(c_156012, 2).slice(); };
							break;
						case 92:
							if (result_156003 != null) { result_156003 = (result_156003).concat(makeNimstrLit("\\\\")); } else { result_156003 = makeNimstrLit("\\\\"); };
							break;
						case 39:
							if (result_156003 != null) { result_156003 = (result_156003).concat(makeNimstrLit("\\\'")); } else { result_156003 = makeNimstrLit("\\\'"); };
							break;
						case 34:
							if (result_156003 != null) { result_156003 = (result_156003).concat(makeNimstrLit("\\\"")); } else { result_156003 = makeNimstrLit("\\\""); };
							break;
						default: 
							if (result_156003 != null) { addChar(result_156003, c_156012); } else { result_156003 = [c_156012]; };
							break;
						}
						i_198384 = addInt(i_198384, 1);
						if (!(((s_156000 != null ? s_156000.length : 0) == l_198385))) {
						failed_assert_impl_15051(makeNimstrLit("iterators.nim(208, 11) `len(a) == L` the length of the string changed while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		if (result_156003 != null) { result_156003 = (result_156003).concat(suffix_156002); } else { result_156003 = suffix_156002.slice(); };

	return result_156003;

}

function HEX24_171723(self_171725) {
	var result_171726 = null;

		result_171726 = nimCopy(null, nsuEscape(self_171725.value, makeNimstrLit("\""), makeNimstrLit("\"")), NTI138);

	return result_171726;

}

function HEX24_171706(self_171708) {
	var result_171709 = null;

		result_171709 = nimCopy(null, cstrToNimstr((self_171708.value)+""), NTI138);

	return result_171709;

}

function HEX24_171817(self_171819) {
	var result_171820 = null;

		result_171820 = nimCopy(null, makeNimstrLit("true"), NTI138);

	return result_171820;

}

function HEX24_171740(self_171742) {
	var result_171743 = null;

		rawEcho(makeNimstrLit("repr not available in js"));

	return result_171743;

}

function HEX24_170558(self_170560) {
	var result_170561 = null;

		rawEcho(makeNimstrLit("repr not available in js"));

	return result_170561;

}

function HEX24_170617(self_170560) {
	var result_170619 = null;

	BeforeRet: do {
		chckNilDisp(self_170560);
		if (isObj(self_170560.m_type, NTI170218)) {
		result_170619 = HEX24_172246(self_170560);
		break BeforeRet;
		}
		else {
		if (isObj(self_170560.m_type, NTI170216)) {
		result_170619 = HEX24_172228(self_170560);
		break BeforeRet;
		}
		else {
		if (isObj(self_170560.m_type, NTI190468)) {
		result_170619 = HEX24_190584(self_170560);
		break BeforeRet;
		}
		else {
		if (isObj(self_170560.m_type, NTI190465)) {
		result_170619 = HEX24_190567(self_170560);
		break BeforeRet;
		}
		else {
		if (isObj(self_170560.m_type, NTI190476)) {
		result_170619 = HEX24_190637(self_170560);
		break BeforeRet;
		}
		else {
		if (isObj(self_170560.m_type, NTI170180)) {
		result_170619 = HEX24_172264(self_170560);
		break BeforeRet;
		}
		else {
		if (isObj(self_170560.m_type, NTI170152)) {
		result_170619 = HEX24_172159(self_170560);
		break BeforeRet;
		}
		else {
		if (isObj(self_170560.m_type, NTI170178)) {
		result_170619 = HEX24_172193(self_170560);
		break BeforeRet;
		}
		else {
		if (isObj(self_170560.m_type, NTI190474)) {
		result_170619 = HEX24_190619(self_170560);
		break BeforeRet;
		}
		else {
		if (isObj(self_170560.m_type, NTI190470)) {
		result_170619 = HEX24_190601(self_170560);
		break BeforeRet;
		}
		else {
		if (isObj(self_170560.m_type, NTI170176)) {
		result_170619 = HEX24_172142(self_170560);
		break BeforeRet;
		}
		else {
		if (isObj(self_170560.m_type, NTI170161)) {
		result_170619 = HEX24_172040(self_170560);
		break BeforeRet;
		}
		else {
		if (isObj(self_170560.m_type, NTI170165)) {
		result_170619 = HEX24_172176(self_170560);
		break BeforeRet;
		}
		else {
		if (isObj(self_170560.m_type, NTI170156)) {
		result_170619 = HEX24_172006(self_170560);
		break BeforeRet;
		}
		else {
		if (isObj(self_170560.m_type, NTI170154)) {
		result_170619 = HEX24_171989(self_170560);
		break BeforeRet;
		}
		else {
		if (isObj(self_170560.m_type, NTI170220)) {
		result_170619 = HEX24_172210(self_170560);
		break BeforeRet;
		}
		else {
		if (isObj(self_170560.m_type, NTI170172)) {
		result_170619 = HEX24_172108(self_170560);
		break BeforeRet;
		}
		else {
		if (isObj(self_170560.m_type, NTI170159)) {
		result_170619 = HEX24_172023(self_170560);
		break BeforeRet;
		}
		else {
		if (isObj(self_170560.m_type, NTI170163)) {
		result_170619 = HEX24_172057(self_170560);
		break BeforeRet;
		}
		else {
		if (isObj(self_170560.m_type, NTI170206)) {
		result_170619 = HEX24_171868(self_170560);
		break BeforeRet;
		}
		else {
		if (isObj(self_170560.m_type, NTI170169)) {
		result_170619 = HEX24_172091(self_170560);
		break BeforeRet;
		}
		else {
		if (isObj(self_170560.m_type, NTI170167)) {
		result_170619 = HEX24_172074(self_170560);
		break BeforeRet;
		}
		else {
		if (isObj(self_170560.m_type, NTI170204)) {
		result_170619 = HEX24_171834(self_170560);
		break BeforeRet;
		}
		else {
		if (isObj(self_170560.m_type, NTI170174)) {
		result_170619 = HEX24_172125(self_170560);
		break BeforeRet;
		}
		else {
		if (isObj(self_170560.m_type, NTI170145)) {
		result_170619 = HEX24_171972(self_170560);
		break BeforeRet;
		}
		else {
		if (isObj(self_170560.m_type, NTI170248)) {
		result_170619 = HEX24_170620(self_170560);
		break BeforeRet;
		}
		else {
		if (isObj(self_170560.m_type, NTI170208)) {
		result_170619 = HEX24_171851(self_170560);
		break BeforeRet;
		}
		else {
		if (isObj(self_170560.m_type, NTI170188)) {
		result_170619 = HEX24_171689(self_170560);
		break BeforeRet;
		}
		else {
		if (isObj(self_170560.m_type, NTI170223)) {
		result_170619 = HEX24_170647(self_170560);
		break BeforeRet;
		}
		else {
		if (isObj(self_170560.m_type, NTI170194)) {
		result_170619 = HEX24_171723(self_170560);
		break BeforeRet;
		}
		else {
		if (isObj(self_170560.m_type, NTI170191)) {
		result_170619 = HEX24_171706(self_170560);
		break BeforeRet;
		}
		else {
		if (isObj(self_170560.m_type, NTI170202)) {
		result_170619 = HEX24_171817(self_170560);
		break BeforeRet;
		}
		else {
		if (isObj(self_170560.m_type, NTI170197)) {
		result_170619 = HEX24_171740(self_170560);
		break BeforeRet;
		}
		else {
		if (isObj(self_170560.m_type, NTI170142)) {
		result_170619 = HEX24_170558(self_170560);
		break BeforeRet;
		}
		}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}
	} while (false);

	return result_170619;

}

function hash_162896(x_162898) {
	var result_162899 = 0;

		var y_162900 = [(x_162898 + 1.0000000000000000e+00)];
		result_162899 = y_162900[0];

	return result_162899;

}

function hash_172383(self_172385) {
	var result_172386 = 0;

		result_172386 = hash_162896(self_172385.value);

	return result_172386;

}

function hash_172336(self_172338) {
	var result_172339 = 0;

		result_172339 = hash_162980(self_172338.word);

	return result_172339;

}

function hash_162801(x_162803) {
	var result_162804 = 0;

		result_162804 = x_162803;

	return result_162804;

}

function hash_172400(self_172402) {
	var result_172403 = 0;

		result_172403 = hash_162801(self_172402.value);

	return result_172403;

}

function hash_172559(self_172561) {
	var result_172562 = 0;

		result_172562 = hash_162801(1);

	return result_172562;

}

function hash_162414(x_162416, x_162416_Idx) {
	var result_162417 = 0;

		      if (typeof x_162416 == "object") {
        if ("_NimID" in x_162416)
          result_162417 = x_162416["_NimID"];
        else {
          result_162417 = ++object_id_162237[0];
          x_162416["_NimID"] = result_162417;
        }
      }
    

	return result_162417;

}

function hash_172436(self_172438) {
	var result_172439 = 0;

		result_172439 = hash_162414(self_172438.value[0], self_172438.value[1]);

	return result_172439;

}

function hash_172417(self_172419) {
	var result_172420 = 0;

		result_172420 = hash_162980(self_172419.value);

	return result_172420;

}

function hash_172577(self_172579) {
	var result_172580 = 0;

		result_172580 = hash_162801(0);

	return result_172580;

}

function hash_172798(x_172802) {
	var result_172803 = 0;

		L1: do {
			var i_173006 = 0;
			var colontmp__198396 = 0;
			colontmp__198396 = (x_172802 != null ? (x_172802.length-1) : -1);
			var res_198397 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_198397 <= colontmp__198396)) break L3;
						i_173006 = res_198397;
						result_172803 = HEX21HEX26_162059(result_172803, hash_172312(x_172802[chckIndx(i_173006, 0, x_172802.length+0-1)-0]));
						res_198397 = addInt(res_198397, 1);
					}
			} while(false);
		} while(false);
		result_172803 = HEX21HEX24_162109(result_172803);

	return result_172803;

}

function hash_172792(self_172794) {
	var result_172795 = 0;

		result_172795 = hash_172798(self_172794.nodes);

	return result_172795;

}

function hash_172748(self_172750) {
	var result_172751 = 0;

		result_172751 = hash_162801(2);

	return result_172751;

}

function hash_172704(self_172706) {
	var result_172707 = 0;

		result_172707 = hash_162801(1);

	return result_172707;

}

function hash_172295(self_172297) {
	var result_172298 = 0;

		raise_runtime_exception_170382(makeNimstrLit("Nodes need to implement hash"));

	return result_172298;

}

function hash_172312(self_172297) {
	var result_172314 = 0;

	BeforeRet: do {
		chckNilDisp(self_172297);
		if (isObj(self_172297.m_type, NTI170191)) {
		result_172314 = hash_172383(self_172297);
		break BeforeRet;
		}
		else {
		if (isObj(self_172297.m_type, NTI170145)) {
		result_172314 = hash_172336(self_172297);
		break BeforeRet;
		}
		else {
		if (isObj(self_172297.m_type, NTI170188)) {
		result_172314 = hash_172400(self_172297);
		break BeforeRet;
		}
		else {
		if (isObj(self_172297.m_type, NTI170202)) {
		result_172314 = hash_172559(self_172297);
		break BeforeRet;
		}
		else {
		if (isObj(self_172297.m_type, NTI170197)) {
		result_172314 = hash_172436(self_172297);
		break BeforeRet;
		}
		else {
		if (isObj(self_172297.m_type, NTI170194)) {
		result_172314 = hash_172417(self_172297);
		break BeforeRet;
		}
		else {
		if (isObj(self_172297.m_type, NTI170204)) {
		result_172314 = hash_172577(self_172297);
		break BeforeRet;
		}
		else {
		if (isObj(self_172297.m_type, NTI170220)) {
		result_172314 = hash_172792(self_172297);
		break BeforeRet;
		}
		else {
		if (isObj(self_172297.m_type, NTI170206)) {
		result_172314 = hash_172748(self_172297);
		break BeforeRet;
		}
		else {
		if (isObj(self_172297.m_type, NTI170208)) {
		result_172314 = hash_172704(self_172297);
		break BeforeRet;
		}
		else {
		if (isObj(self_172297.m_type, NTI170142)) {
		result_172314 = hash_172295(self_172297);
		break BeforeRet;
		}
		}}}}}}}}}}
	} while (false);

	return result_172314;

}

function HEX3DHEX3D_172650(self_172652, other_172653) {
	var result_172654 = false;

		result_172654 = true;

	return result_172654;

}

function HEX3DHEX3D_172632(self_172634, other_172635) {
	var result_172636 = false;

		result_172636 = true;

	return result_172636;

}

function HEX3DHEX3D_172686(self_172688, other_172689) {
	var result_172690 = false;

		result_172690 = false;

	return result_172690;

}

function HEX3DHEX3D_172668(self_172670, other_172671) {
	var result_172672 = false;

		result_172672 = false;

	return result_172672;

}

function HEX3DHEX3D_172479(self_172481, other_172482) {
		var Tmp1;

	var result_172483 = false;

		if (!isObj(other_172482.m_type, NTI170191)) Tmp1 = false; else {			Tmp1 = (self_172481.value == other_172482.value);		}		result_172483 = Tmp1;

	return result_172483;

}

function HEX3DHEX3D_172453(self_172455, other_172456) {
		var Tmp1;

	var result_172457 = false;

		if (!isObj(other_172456.m_type, NTI170188)) Tmp1 = false; else {			Tmp1 = (self_172455.value == other_172456.value);		}		result_172457 = Tmp1;

	return result_172457;

}

function HEX3DHEX3D_172355(self_172357, other_172358) {
		var Tmp1;

	var result_172359 = false;

		if (!isObj(other_172358.m_type, NTI170145)) Tmp1 = false; else {			Tmp1 = eqStrings(self_172357.word, other_172358.word);		}		result_172359 = Tmp1;

	return result_172359;

}

function HEX3DHEX3D_172505(self_172507, other_172508) {
		var Tmp1;

	var result_172509 = false;

		if (!isObj(other_172508.m_type, NTI170194)) Tmp1 = false; else {			Tmp1 = eqStrings(self_172507.value, other_172508.value);		}		result_172509 = Tmp1;

	return result_172509;

}

function HEX3DHEX3D_172766(self_172768, other_172769) {
	var result_172770 = false;

		result_172770 = isObj(other_172769.m_type, NTI170206);

	return result_172770;

}

function HEX3DHEX3D_172722(self_172724, other_172725) {
	var result_172726 = false;

		result_172726 = isObj(other_172725.m_type, NTI170208);

	return result_172726;

}

function HEX3DHEX3D_172533(self_172535, other_172536) {
		var Tmp1;

	var result_172537 = false;

		if (!isObj(other_172536.m_type, NTI170197)) Tmp1 = false; else {			Tmp1 = (self_172535.value[0] == other_172536.value[0] && self_172535.value[1] == other_172536.value[1]);		}		result_172537 = Tmp1;

	return result_172537;

}

function HEX3DHEX3D_173056(x_173060, y_173062) {
	var result_173063 = false;

	BeforeRet: do {
		var same_object_173601 = false;
		same_object_173601 = x_173060 === y_173062
		if (same_object_173601) {
		result_173063 = true;
		break BeforeRet;
		}
		
		if (!(((x_173060 != null ? x_173060.length : 0) == (y_173062 != null ? y_173062.length : 0)))) {
		result_173063 = false;
		break BeforeRet;
		}
		
		L1: do {
			var i_174024 = 0;
			var colontmp__198411 = 0;
			colontmp__198411 = subInt((x_173060 != null ? x_173060.length : 0), 1);
			var res_198412 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_198412 <= colontmp__198411)) break L3;
						i_174024 = res_198412;
						if (!(HEX3DHEX3D_172333(x_173060[chckIndx(i_174024, 0, x_173060.length+0-1)-0], y_173062[chckIndx(i_174024, 0, y_173062.length+0-1)-0]))) {
						result_173063 = false;
						break BeforeRet;
						}
						
						res_198412 = addInt(res_198412, 1);
					}
			} while(false);
		} while(false);
		result_173063 = true;
		break BeforeRet;
	} while (false);

	return result_173063;

}

function HEX3DHEX3D_173041(self_173043, other_173044) {
		var Tmp1;

	var result_173045 = false;

		if (!isObj(other_173044.m_type, NTI170220)) Tmp1 = false; else {			Tmp1 = HEX3DHEX3D_173056(self_173043.nodes, other_173044.nodes);		}		result_173045 = Tmp1;

	return result_173045;

}

function HEX3DHEX3D_172315(self_172317, other_172318) {
	var result_172319 = false;

		raise_runtime_exception_170382(makeNimstrLit("Nodes need to implement =="));

	return result_172319;

}

function HEX3DHEX3D_172333(self_172317, other_172318) {
	var result_172335 = false;

	BeforeRet: do {
		chckNilDisp(self_172317);
		chckNilDisp(other_172318);
		if ((isObj(self_172317.m_type, NTI170204) && isObj(other_172318.m_type, NTI170204))) {
		result_172335 = HEX3DHEX3D_172650(self_172317, other_172318);
		break BeforeRet;
		}
		else {
		if ((isObj(self_172317.m_type, NTI170202) && isObj(other_172318.m_type, NTI170202))) {
		result_172335 = HEX3DHEX3D_172632(self_172317, other_172318);
		break BeforeRet;
		}
		else {
		if ((isObj(self_172317.m_type, NTI170204) && isObj(other_172318.m_type, NTI170202))) {
		result_172335 = HEX3DHEX3D_172686(self_172317, other_172318);
		break BeforeRet;
		}
		else {
		if ((isObj(self_172317.m_type, NTI170202) && isObj(other_172318.m_type, NTI170204))) {
		result_172335 = HEX3DHEX3D_172668(self_172317, other_172318);
		break BeforeRet;
		}
		else {
		if ((isObj(self_172317.m_type, NTI170191) && isObj(other_172318.m_type, NTI170142))) {
		result_172335 = HEX3DHEX3D_172479(self_172317, other_172318);
		break BeforeRet;
		}
		else {
		if ((isObj(self_172317.m_type, NTI170188) && isObj(other_172318.m_type, NTI170142))) {
		result_172335 = HEX3DHEX3D_172453(self_172317, other_172318);
		break BeforeRet;
		}
		else {
		if ((isObj(self_172317.m_type, NTI170145) && isObj(other_172318.m_type, NTI170142))) {
		result_172335 = HEX3DHEX3D_172355(self_172317, other_172318);
		break BeforeRet;
		}
		else {
		if ((isObj(self_172317.m_type, NTI170194) && isObj(other_172318.m_type, NTI170142))) {
		result_172335 = HEX3DHEX3D_172505(self_172317, other_172318);
		break BeforeRet;
		}
		else {
		if ((isObj(self_172317.m_type, NTI170206) && isObj(other_172318.m_type, NTI170142))) {
		result_172335 = HEX3DHEX3D_172766(self_172317, other_172318);
		break BeforeRet;
		}
		else {
		if ((isObj(self_172317.m_type, NTI170208) && isObj(other_172318.m_type, NTI170142))) {
		result_172335 = HEX3DHEX3D_172722(self_172317, other_172318);
		break BeforeRet;
		}
		else {
		if ((isObj(self_172317.m_type, NTI170197) && isObj(other_172318.m_type, NTI170142))) {
		result_172335 = HEX3DHEX3D_172533(self_172317, other_172318);
		break BeforeRet;
		}
		else {
		if ((isObj(self_172317.m_type, NTI170220) && isObj(other_172318.m_type, NTI170142))) {
		result_172335 = HEX3DHEX3D_173041(self_172317, other_172318);
		break BeforeRet;
		}
		else {
		if ((isObj(self_172317.m_type, NTI170142) && isObj(other_172318.m_type, NTI170142))) {
		result_172335 = HEX3DHEX3D_172315(self_172317, other_172318);
		break BeforeRet;
		}
		}}}}}}}}}}}}
	} while (false);

	return result_172335;

}

function value_172615(self_172617) {
	var result_172618 = false;

		result_172618 = false;

	return result_172618;

}

function value_172595(self_172597) {
	var result_172598 = false;

		result_172598 = true;

	return result_172598;

}

function value_172612(self_172597) {
	var result_172614 = false;

	BeforeRet: do {
		chckNilDisp(self_172597);
		if (isObj(self_172597.m_type, NTI170204)) {
		result_172614 = value_172615(self_172597);
		break BeforeRet;
		}
		else {
		if (isObj(self_172597.m_type, NTI170200)) {
		result_172614 = value_172595(self_172597);
		break BeforeRet;
		}
		}
	} while (false);

	return result_172614;

}

function print_174089(self_174092) {

		function HEX3Aanonymous_174095(n_174097) {
			var result_174098 = null;

				result_174098 = nimCopy(null, print_174068(n_174097), NTI138);

			return result_174098;

		}

	var result_174093 = null;

		result_174093 = nimCopy(null, nsuJoinSep(map_171910(self_174092, HEX3Aanonymous_174095), makeNimstrLit(" ")), NTI138);

	return result_174093;

}

function print_174137(self_174139) {
	var result_174140 = null;

		result_174140 = nimCopy(null, print_174089(self_174139.nodes), NTI138);

	return result_174140;

}

function print_174071(self_174073) {
	var result_174074 = null;

		result_174074 = nimCopy(null, self_174073.value, NTI138);

	return result_174074;

}

function print_174051(self_174053) {
	var result_174054 = null;

		result_174054 = nimCopy(null, HEX24_170617(self_174053), NTI138);

	return result_174054;

}

function print_174068(self_174053) {
	var result_174070 = null;

	BeforeRet: do {
		chckNilDisp(self_174053);
		if (isObj(self_174053.m_type, NTI170220)) {
		result_174070 = print_174137(self_174053);
		break BeforeRet;
		}
		else {
		if (isObj(self_174053.m_type, NTI170194)) {
		result_174070 = print_174071(self_174053);
		break BeforeRet;
		}
		else {
		if (isObj(self_174053.m_type, NTI170142)) {
		result_174070 = print_174051(self_174053);
		break BeforeRet;
		}
		}}
	} while (false);

	return result_174070;

}

function concat_187105(seqs_187110) {
	var result_187112 = null;

		var l_187114 = 0;
		L1: do {
			var seqitm_187145 = null;
			var i_198419 = 0;
			L2: do {
					L3: while (true) {
					if (!(i_198419 < (seqs_187110 != null ? seqs_187110.length : 0))) break L3;
						seqitm_187145 = seqs_187110[chckIndx(i_198419, 0, seqs_187110.length+0-1)-0];
						l_187114 = addInt(l_187114, (seqitm_187145 != null ? seqitm_187145.length : 0));
						i_198419 = addInt(i_198419, 1);
					}
			} while(false);
		} while(false);
		result_187112 = new Array(chckRange(l_187114, 0, 2147483647)); for (var i=0;i<chckRange(l_187114, 0, 2147483647);++i) {result_187112[i]=null;}		var i_187165 = 0;
		L4: do {
			var s_187171 = null;
			var i_198426 = 0;
			L5: do {
					L6: while (true) {
					if (!(i_198426 < (seqs_187110 != null ? seqs_187110.length : 0))) break L6;
						s_187171 = seqs_187110[chckIndx(i_198426, 0, seqs_187110.length+0-1)-0];
						L7: do {
							var itm_187414 = null;
							var i_198423 = 0;
							var l_198424 = (s_187171 != null ? s_187171.length : 0);
							L8: do {
									L9: while (true) {
									if (!(i_198423 < l_198424)) break L9;
										itm_187414 = s_187171[chckIndx(i_198423, 0, s_187171.length+0-1)-0];
										result_187112[chckIndx(i_187165, 0, result_187112.length+0-1)-0] = itm_187414;
										i_187165 = addInt(i_187165, 1);
										i_198423 = addInt(i_198423, 1);
										if (!(((s_187171 != null ? s_187171.length : 0) == l_198424))) {
										failed_assert_impl_15051(makeNimstrLit("iterators.nim(190, 11) `len(a) == L` the length of the seq changed while iterating over it"));
										}
										
									}
							} while(false);
						} while(false);
						i_198426 = addInt(i_198426, 1);
					}
			} while(false);
		} while(false);

	return result_187112;

}

function concat_187498(self_187500, nodes_187502) {
	var result_187503 = null;

		result_187503 = new_curly_186423(concat_187105([nimCopy(null, self_187500.nodes, NTI187504), nimCopy(null, nodes_187502, NTI187509)]));

	return result_187503;

}

function concat_187464(self_187466, nodes_187468) {
	var result_187469 = null;

		result_187469 = new_paren_186358(concat_187105([nimCopy(null, self_187466.nodes, NTI187470), nimCopy(null, nodes_187468, NTI187475)]));

	return result_187469;

}

function concat_187091(self_187093, nodes_187095) {
	var result_187096 = null;

		result_187096 = new_blok_186293(concat_187105([nimCopy(null, self_187093.nodes, NTI187097), nimCopy(null, nodes_187095, NTI187102)]));

	return result_187096;

}

function concat_187068(self_187070, nodes_187072) {
	var result_187073 = null;

		raise_runtime_exception_170382((makeNimstrLit("Should not happen...") || []).concat(HEX24_170617(self_187070) || [],makeNimstrLit(" ") || [],HEX24_171885(nodes_187072) || []));

	return result_187073;

}

function concat_187088(self_187070, nodes_187072) {
	var result_187090 = null;

	BeforeRet: do {
		chckNilDisp(self_187070);
		if (isObj(self_187070.m_type, NTI170218)) {
		result_187090 = concat_187498(self_187070, nodes_187072);
		break BeforeRet;
		}
		else {
		if (isObj(self_187070.m_type, NTI170216)) {
		result_187090 = concat_187464(self_187070, nodes_187072);
		break BeforeRet;
		}
		else {
		if (isObj(self_187070.m_type, NTI170220)) {
		result_187090 = concat_187091(self_187070, nodes_187072);
		break BeforeRet;
		}
		else {
		if (isObj(self_187070.m_type, NTI170212)) {
		result_187090 = concat_187068(self_187070, nodes_187072);
		break BeforeRet;
		}
		}}}
	} while (false);

	return result_187090;

}

function clone_188065(self_188067) {
	var result_188068 = null;

		result_188068 = new_value_186552(self_188067.value);

	return result_188068;

}

function clone_188048(self_188050) {
	var result_188051 = null;

		result_188051 = self_188050;

	return result_188051;

}

function new_map_182042(bindings_182051) {
	var result_182052 = null;

		result_182052 = new_map_181637();
		L1: do {
			var key_182060 = null;
			var binding_182061 = null;
			var l_198429 = len_170785(bindings_182051);
			L2: do {
				var h_198431 = 0;
				var colontmp__198432 = 0;
				colontmp__198432 = (bindings_182051.data != null ? (bindings_182051.data.length-1) : -1);
				var res_198433 = 0;
				L3: do {
						L4: while (true) {
						if (!(res_198433 <= colontmp__198432)) break L4;
							h_198431 = res_198433;
							if (is_filled_166418(bindings_182051.data[chckIndx(h_198431, 0, bindings_182051.data.length+0-1)-0].Field0)) {
							key_182060 = bindings_182051.data[chckIndx(h_198431, 0, bindings_182051.data.length+0-1)-0].Field1;
							binding_182061 = bindings_182051.data[chckIndx(h_198431, 0, bindings_182051.data.length+0-1)-0].Field2;
							make_binding_177643(result_182052, key_182060, binding_182061.val);
							if (!((len_170785(bindings_182051) == l_198429))) {
							failed_assert_impl_15051(makeNimstrLit("tables.nim(669, 13) `len(t) == L` the length of the table changed while iterating over it"));
							}
							
							}
							
							res_198433 = addInt(res_198433, 1);
						}
				} while(false);
			} while(false);
		} while(false);

	return result_182052;

}

function clone_188082(self_188084) {
	var result_188085 = null;

		result_188085 = new_map_182042(self_188084.bindings);

	return result_188085;

}

function clone_188133(self_188135) {
	var result_188136 = null;

		result_188136 = new_curly_186423(self_188135.nodes);

	return result_188136;

}

function clone_188116(self_188118) {
	var result_188119 = null;

		result_188119 = new_paren_186358(self_188118.nodes);

	return result_188119;

}

function clone_188099(self_188101) {
	var result_188102 = null;

		result_188102 = new_blok_186293(self_188101.nodes);

	return result_188102;

}

function clone_188028(self_188030) {
	var result_188031 = null;

		raise_runtime_exception_170382((makeNimstrLit("Should not happen...") || []).concat(HEX24_170617(self_188030) || []));

	return result_188031;

}

function clone_188045(self_188030) {
	var result_188047 = null;

	BeforeRet: do {
		chckNilDisp(self_188030);
		if (isObj(self_188030.m_type, NTI170194)) {
		result_188047 = clone_188065(self_188030);
		break BeforeRet;
		}
		else {
		if (isObj(self_188030.m_type, NTI170186)) {
		result_188047 = clone_188048(self_188030);
		break BeforeRet;
		}
		else {
		if (isObj(self_188030.m_type, NTI170223)) {
		result_188047 = clone_188082(self_188030);
		break BeforeRet;
		}
		else {
		if (isObj(self_188030.m_type, NTI170218)) {
		result_188047 = clone_188133(self_188030);
		break BeforeRet;
		}
		else {
		if (isObj(self_188030.m_type, NTI170216)) {
		result_188047 = clone_188116(self_188030);
		break BeforeRet;
		}
		else {
		if (isObj(self_188030.m_type, NTI170220)) {
		result_188047 = clone_188099(self_188030);
		break BeforeRet;
		}
		else {
		if (isObj(self_188030.m_type, NTI170142)) {
		result_188047 = clone_188028(self_188030);
		break BeforeRet;
		}
		}}}}}}
	} while (false);

	return result_188047;

}

function nsuStartsWith(s_153721, prefix_153722) {
						var Tmp3;

	var result_153723 = false;

	BeforeRet: do {
		var i_153725 = 0;
		L1: do {
				L2: while (true) {
				if (!true) break L2;
					if (((prefix_153722 != null ? prefix_153722.length : 0) <= i_153725)) {
					result_153723 = true;
					break BeforeRet;
					}
					
						if (((s_153721 != null ? s_153721.length : 0) <= i_153725)) Tmp3 = true; else {							Tmp3 = !((s_153721[chckIndx(i_153725, 0, s_153721.length+0-1)-0] == prefix_153722[chckIndx(i_153725, 0, prefix_153722.length+0-1)-0]));						}					if (Tmp3) {
					result_153723 = false;
					break BeforeRet;
					}
					
					i_153725 = addInt(i_153725, 1);
				}
		} while(false);
	} while (false);

	return result_153723;

}

function parse_hex_152026(s_152029, number_152031, number_152031_Idx, start_152032, max_len_152033) {
		var Tmp1;

	var result_152034 = 0;

		var i_152035 = start_152032;
		var output_152036 = 0;
		var found_digit_152037 = false;
		if ((max_len_152033 == 0)) {
		Tmp1 = (s_152029 != null ? s_152029.length : 0);
		}
		else {
		Tmp1 = addInt(i_152035, max_len_152033);
		}
		
		var last_152038 = nimMin((s_152029 != null ? s_152029.length : 0), Tmp1);
		if ((((addInt(i_152035, 1) < last_152038) && (s_152029[chckIndx(i_152035, 0, s_152029.length+0-1)-0] == 48)) && (ConstSet5[s_152029[chckIndx(addInt(i_152035, 1), 0, s_152029.length+0-1)-0]] != undefined))) {
		i_152035 = addInt(i_152035, 2);
		}
		else {
		if (((i_152035 < last_152038) && (s_152029[chckIndx(i_152035, 0, s_152029.length+0-1)-0] == 35))) {
		i_152035 = addInt(i_152035, 1);
		}
		}
		L2: do {
				L3: while (true) {
				if (!(i_152035 < last_152038)) break L3;
					switch (s_152029[chckIndx(i_152035, 0, s_152029.length+0-1)-0]) {
					case 95:
						break;
					case 48:
					case 49:
					case 50:
					case 51:
					case 52:
					case 53:
					case 54:
					case 55:
					case 56:
					case 57:
						output_152036 = ((output_152036 << 4) | subInt(s_152029[chckIndx(i_152035, 0, s_152029.length+0-1)-0], 48));
						found_digit_152037 = true;
						break;
					case 97:
					case 98:
					case 99:
					case 100:
					case 101:
					case 102:
						output_152036 = ((output_152036 << 4) | addInt(subInt(s_152029[chckIndx(i_152035, 0, s_152029.length+0-1)-0], 97), 10));
						found_digit_152037 = true;
						break;
					case 65:
					case 66:
					case 67:
					case 68:
					case 69:
					case 70:
						output_152036 = ((output_152036 << 4) | addInt(subInt(s_152029[chckIndx(i_152035, 0, s_152029.length+0-1)-0], 65), 10));
						found_digit_152037 = true;
						break;
					default: 
						break L2;
						break;
					}
					i_152035 = addInt(i_152035, 1);
				}
		} while(false);
		if (found_digit_152037) {
		number_152031[number_152031_Idx] = output_152036;
		result_152034 = subInt(i_152035, start_152032);
		}
		

	return result_152034;

}

function nsuEndsWith(s_153768, suffix_153769) {
					var Tmp3;

	var result_153770 = false;

	BeforeRet: do {
		var i_153772 = 0;
		var j_153773 = subInt((s_153768 != null ? s_153768.length : 0), (suffix_153769 != null ? suffix_153769.length : 0));
		L1: do {
				L2: while (true) {
					if (!(0 <= addInt(i_153772, j_153773))) Tmp3 = false; else {						Tmp3 = (addInt(i_153772, j_153773) < (s_153768 != null ? s_153768.length : 0));					}				if (!Tmp3) break L2;
					if (!((s_153768[chckIndx(addInt(i_153772, j_153773), 0, s_153768.length+0-1)-0] == suffix_153769[chckIndx(i_153772, 0, suffix_153769.length+0-1)-0]))) {
					result_153770 = false;
					break BeforeRet;
					}
					
					i_153772 = addInt(i_153772, 1);
				}
		} while(false);
		if (((suffix_153769 != null ? suffix_153769.length : 0) <= i_153772)) {
		result_153770 = true;
		break BeforeRet;
		}
		
	} while (false);

	return result_153770;

}

function nsuUnescape(s_156032, prefix_156033, suffix_156034) {
	var result_156035 = null;

		result_156035 = nimCopy(null, mnewString(0), NTI138);
		var i_156036 = (prefix_156033 != null ? prefix_156033.length : 0);
		if (!(nsuStartsWith(s_156032, prefix_156033))) {
		var e_156039 = null;
		e_156039 = {m_type: NTI4052, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		e_156039.message = nimCopy(null, (makeNimstrLit("String does not start with: ") || []).concat(prefix_156033 || []), NTI138);
		e_156039.parent = null;
		raiseException(e_156039, "ValueError");
		}
		
		L1: do {
				L2: while (true) {
				if (!true) break L2;
					if ((subInt((s_156032 != null ? s_156032.length : 0), (suffix_156034 != null ? suffix_156034.length : 0)) <= i_156036)) {
					break L1;
					}
					
					if ((s_156032[chckIndx(i_156036, 0, s_156032.length+0-1)-0] == 92)) {
					if (((s_156032 != null ? s_156032.length : 0) <= addInt(i_156036, 1))) {
					if (result_156035 != null) { addChar(result_156035, 92); } else { result_156035 = [92]; };
					break L1;
					}
					
					switch (s_156032[chckIndx(addInt(i_156036, 1), 0, s_156032.length+0-1)-0]) {
					case 120:
						i_156036 = addInt(i_156036, 2);
						var c_156215 = [0];
						i_156036 = addInt(i_156036, parse_hex_152026(s_156032, c_156215, 0, i_156036, 2));
						if (result_156035 != null) { addChar(result_156035, chckRange(c_156215[0], 0, 255)); } else { result_156035 = [chckRange(c_156215[0], 0, 255)]; };
						i_156036 = subInt(i_156036, 2);
						break;
					case 92:
						if (result_156035 != null) { addChar(result_156035, 92); } else { result_156035 = [92]; };
						break;
					case 39:
						if (result_156035 != null) { addChar(result_156035, 39); } else { result_156035 = [39]; };
						break;
					case 34:
						if (result_156035 != null) { addChar(result_156035, 34); } else { result_156035 = [34]; };
						break;
					default: 
						if (result_156035 != null) { result_156035 = (result_156035).concat((makeNimstrLit("\\") || []).concat([s_156032[chckIndx(addInt(i_156036, 1), 0, s_156032.length+0-1)-0]])); } else { result_156035 = (makeNimstrLit("\\") || []).concat([s_156032[chckIndx(addInt(i_156036, 1), 0, s_156032.length+0-1)-0]]).slice(); };
						break;
					}
					i_156036 = addInt(i_156036, 2);
					}
					else {
						if (result_156035 != null) { addChar(result_156035, s_156032[chckIndx(i_156036, 0, s_156032.length+0-1)-0]); } else { result_156035 = [s_156032[chckIndx(i_156036, 0, s_156032.length+0-1)-0]]; };
						i_156036 = addInt(i_156036, 1);
					}
					
				}
		} while(false);
		if (!(nsuEndsWith(s_156032, suffix_156034))) {
		var e_156251 = null;
		e_156251 = {m_type: NTI4052, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		e_156251.message = nimCopy(null, (makeNimstrLit("String does not end in: ") || []).concat(suffix_156034 || []), NTI138);
		e_156251.parent = null;
		raiseException(e_156251, "ValueError");
		}
		

	return result_156035;

}

function parse_value_188211(self_188213, s_188214) {
			var Tmp1;
			var Tmp2;

	var result_188215 = null;

			if (!(1 < (s_188214 != null ? s_188214.length : 0))) Tmp2 = false; else {				Tmp2 = (s_188214[chckIndx(0, 0, s_188214.length+0-1)-0] == 34);			}			if (!Tmp2) Tmp1 = false; else {				Tmp1 = (HEX5BHEX5D_26798(s_188214, 1) == 34);			}		if (Tmp1) {
		result_188215 = new_value_186552(nsuUnescape(s_188214, makeNimstrLit("\""), makeNimstrLit("\"")));
		}
		

	return result_188215;

}

function nsuIsDigitChar(c_148686) {
	var result_148687 = false;

	BeforeRet: do {
		result_148687 = (ConstSet6[c_148686] != undefined);
		break BeforeRet;
	} while (false);

	return result_148687;

}

function ten_to_the_power_of_24910(b_24912) {
	var result_24913 = 0.0;

		var b_24914 = b_24912;
		var a_24915 = 1.0000000000000000e+01;
		result_24913 = 1.0000000000000000e+00;
		L1: do {
				L2: while (true) {
				if (!true) break L2;
					if (((b_24914 & 1) == 1)) {
					result_24913 = (result_24913 * a_24915);
					}
					
					b_24914 = (b_24914 >> 1);
					if ((b_24914 == 0)) {
					break L1;
					}
					
					a_24915 = (a_24915 * a_24915);
				}
		} while(false);

	return result_24913;

}

function npuParseFloat(s_45023, number_45025, number_45025_Idx, start_45026) {
	var result_45028 = 0;

		var bf_45029 = [0.0];
		result_45028 = nimParseBiggestFloat(s_45023, bf_45029, 0, start_45026);
		if (!((result_45028 == 0))) {
		number_45025[number_45025_Idx] = bf_45029[0];
		}
		

	return result_45028;

}

function nsuParseFloat(s_151424) {
			var Tmp1;

	var result_151425 = [0.0];

		var l_151427 = npuParseFloat(s_151424, result_151425, 0, 0);
			if (!((l_151427 == (s_151424 != null ? s_151424.length : 0)))) Tmp1 = true; else {				Tmp1 = (l_151427 == 0);			}		if (Tmp1) {
		var e_151430 = null;
		e_151430 = {m_type: NTI4052, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		e_151430.message = nimCopy(null, (makeNimstrLit("invalid float: ") || []).concat(s_151424 || []), NTI138);
		e_151430.parent = null;
		raiseException(e_151430, "ValueError");
		}
		

	return result_151425[0];

}

function is_nim_exception_21077() {
		return lastJSError && lastJSError.m_type;

	
}

function parse_value_188191(self_188193, s_188194) {
			var Tmp1;
		var Tmp3;

	var result_188195 = null;

	BeforeRet: do {
			if (!(0 < (s_188194 != null ? s_188194.length : 0))) Tmp1 = false; else {				Tmp1 = ((nsuIsDigitChar(s_188194[chckIndx(0, 0, s_188194.length+0-1)-0]) || (s_188194[chckIndx(0, 0, s_188194.length+0-1)-0] == 43)) || (s_188194[chckIndx(0, 0, s_188194.length+0-1)-0] == 45));			}		if (Tmp1) {
++excHandler;
		Tmp3 = framePtr;
		try {
		result_188195 = new_value_186520(nsuParseFloat(s_188194));
		break BeforeRet;
--excHandler;
} catch (EXC) {
 var prevJSError = lastJSError;
 lastJSError = EXC;
 --excHandler;
		framePtr = Tmp3;
		if (lastJSError && (isObj(lastJSError.m_type, NTI4052))) {
		result_188195 = null;
		break BeforeRet;
		}
		else {
			reraiseException();
		}
		lastJSError = prevJSError;
		} finally {
		framePtr = Tmp3;
		}
		}
		
	} while (false);

	return result_188195;

}

function integer_out_of_range_error_43814() {
		var e_43818 = null;
		e_43818 = {m_type: NTI4052, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		e_43818.message = nimCopy(null, makeNimstrLit("Parsed integer outside of valid range"), NTI138);
		e_43818.parent = null;
		raiseException(e_43818, "ValueError");

	
}

function raw_parse_int_44201(s_44203, b_44205, b_44205_Idx, start_44206) {
			var Tmp1;
					var Tmp4;
			var Tmp7;

	var result_44208 = 0;

		var sign_44210 = -1;
		var i_44211 = start_44206;
		if ((i_44211 < (s_44203 != null ? s_44203.length : 0))) {
		if ((s_44203[chckIndx(i_44211, 0, s_44203.length+0-1)-0] == 43)) {
		i_44211 += 1;
		}
		else {
		if ((s_44203[chckIndx(i_44211, 0, s_44203.length+0-1)-0] == 45)) {
		i_44211 += 1;
		sign_44210 = 1;
		}
		}
		}
		
			if (!(i_44211 < (s_44203 != null ? s_44203.length : 0))) Tmp1 = false; else {				Tmp1 = (ConstSet14[s_44203[chckIndx(i_44211, 0, s_44203.length+0-1)-0]] != undefined);			}		if (Tmp1) {
		b_44205[b_44205_Idx] = 0;
		L2: do {
				L3: while (true) {
					if (!(i_44211 < (s_44203 != null ? s_44203.length : 0))) Tmp4 = false; else {						Tmp4 = (ConstSet15[s_44203[chckIndx(i_44211, 0, s_44203.length+0-1)-0]] != undefined);					}				if (!Tmp4) break L3;
					var c_44246 = (s_44203[chckIndx(i_44211, 0, s_44203.length+0-1)-0] - 48);
					if ((Math.trunc((-9223372036854775808 + c_44246) / 10) <= b_44205[b_44205_Idx])) {
					b_44205[b_44205_Idx] = ((b_44205[b_44205_Idx] * 10) - c_44246);
					}
					else {
					integer_out_of_range_error_43814();
					}
					
					i_44211 += 1;
					L5: do {
							L6: while (true) {
							if (!((i_44211 < (s_44203 != null ? s_44203.length : 0)) && (s_44203[chckIndx(i_44211, 0, s_44203.length+0-1)-0] == 95))) break L6;
								i_44211 += 1;
							}
					} while(false);
				}
		} while(false);
			if (!(sign_44210 == -1)) Tmp7 = false; else {				Tmp7 = (b_44205[b_44205_Idx] == -9223372036854775808);			}		if (Tmp7) {
		integer_out_of_range_error_43814();
		}
		else {
			b_44205[b_44205_Idx] = (b_44205[b_44205_Idx] * sign_44210);
			result_44208 = (i_44211 - start_44206);
		}
		
		}
		

	return result_44208;

}

function npuParseBiggestInt(s_44403, number_44405, number_44405_Idx, start_44406) {
	var result_44408 = 0;

		var res_44409 = [0];
		result_44408 = raw_parse_int_44201(s_44403, res_44409, 0, start_44406);
		if (!((result_44408 == 0))) {
		number_44405[number_44405_Idx] = res_44409[0];
		}
		

	return result_44408;

}

function npuParseInt(s_44426, number_44428, number_44428_Idx, start_44429) {
			var Tmp1;

	var result_44431 = 0;

		var res_44432 = [0];
		result_44431 = npuParseBiggestInt(s_44426, res_44432, 0, start_44429);
			if ((res_44432[0] < -2147483648)) Tmp1 = true; else {				Tmp1 = (2147483647 < res_44432[0]);			}		if (Tmp1) {
		integer_out_of_range_error_43814();
		}
		
		if (!((result_44431 == 0))) {
		number_44428[number_44428_Idx] = chckRange(res_44432[0], -2147483648, 2147483647);
		}
		

	return result_44431;

}

function nsuParseInt(s_150642) {
			var Tmp1;

	var result_150643 = [0];

		var l_150645 = npuParseInt(s_150642, result_150643, 0, 0);
			if (!((l_150645 == (s_150642 != null ? s_150642.length : 0)))) Tmp1 = true; else {				Tmp1 = (l_150645 == 0);			}		if (Tmp1) {
		var e_150648 = null;
		e_150648 = {m_type: NTI4052, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		e_150648.message = nimCopy(null, (makeNimstrLit("invalid integer: ") || []).concat(s_150642 || []), NTI138);
		e_150648.parent = null;
		raiseException(e_150648, "ValueError");
		}
		

	return result_150643[0];

}

function parse_value_188171(self_188173, s_188174) {
			var Tmp1;
		var Tmp3;

	var result_188175 = null;

	BeforeRet: do {
			if (!(0 < (s_188174 != null ? s_188174.length : 0))) Tmp1 = false; else {				Tmp1 = ((nsuIsDigitChar(s_188174[chckIndx(0, 0, s_188174.length+0-1)-0]) || (s_188174[chckIndx(0, 0, s_188174.length+0-1)-0] == 43)) || (s_188174[chckIndx(0, 0, s_188174.length+0-1)-0] == 45));			}		if (Tmp1) {
++excHandler;
		Tmp3 = framePtr;
		try {
		result_188175 = new_value_186488(nsuParseInt(s_188174));
		break BeforeRet;
--excHandler;
} catch (EXC) {
 var prevJSError = lastJSError;
 lastJSError = EXC;
 --excHandler;
		framePtr = Tmp3;
		if (lastJSError && (isObj(lastJSError.m_type, NTI4052))) {
		result_188175 = null;
		break BeforeRet;
		}
		else {
			reraiseException();
		}
		lastJSError = prevJSError;
		} finally {
		framePtr = Tmp3;
		}
		}
		
	} while (false);

	return result_188175;

}

function parse_value_188150(self_188152, s_188153) {
	var result_188154 = null;

	return result_188154;

}

function parse_value_188168(self_188152, s_188153) {
	var result_188170 = null;

	BeforeRet: do {
		chckNilDisp(self_188152);
		if (isObj(self_188152.m_type, NTI170140)) {
		result_188170 = parse_value_188211(self_188152, s_188153);
		break BeforeRet;
		}
		else {
		if (isObj(self_188152.m_type, NTI170138)) {
		result_188170 = parse_value_188191(self_188152, s_188153);
		break BeforeRet;
		}
		else {
		if (isObj(self_188152.m_type, NTI170136)) {
		result_188170 = parse_value_188171(self_188152, s_188153);
		break BeforeRet;
		}
		else {
		if (isObj(self_188152.m_type, NTI170133)) {
		result_188170 = parse_value_188150(self_188152, s_188153);
		break BeforeRet;
		}
		}}}
	} while (false);

	return result_188170;

}

function prefix_length_188299(self_188301) {
	var result_188302 = 0;

		result_188302 = 1;

	return result_188302;

}

function prefix_length_188235(self_188237) {
	var result_188238 = 0;

		result_188238 = 0;

	return result_188238;

}

function prefix_length_188252(self_188237) {
	var result_188254 = 0;

	BeforeRet: do {
		chckNilDisp(self_188237);
		if (isObj(self_188237.m_type, NTI170140)) {
		result_188254 = prefix_length_188299(self_188237);
		break BeforeRet;
		}
		else {
		if (isObj(self_188237.m_type, NTI170133)) {
		result_188254 = prefix_length_188235(self_188237);
		break BeforeRet;
		}
		}
	} while (false);

	return result_188254;

}

function token_ready_188335(self_188337, token_188338, ch_188339) {
			var Tmp1;

	var result_188340 = null;

	BeforeRet: do {
			if (!(ch_188339 == 34)) Tmp1 = false; else {				Tmp1 = !((HEX5BHEX5D_26798(token_188338, 1) == 92));			}		if (Tmp1) {
		result_188340 = nimCopy(null, (token_188338 || []).concat([ch_188339]), NTI138);
		break BeforeRet;
		}
		else {
			result_188340 = nimCopy(null, null, NTI138);
			break BeforeRet;
		}
		
	} while (false);

	return result_188340;

}

function token_ready_188255(self_188257, token_188258, ch_188259) {
	var result_188260 = null;

	return result_188260;

}

function token_ready_188274(self_188257, token_188258, ch_188259) {
	var result_188276 = null;

	BeforeRet: do {
		chckNilDisp(self_188257);
		if (isObj(self_188257.m_type, NTI170140)) {
		result_188276 = token_ready_188335(self_188257, token_188258, ch_188259);
		break BeforeRet;
		}
		else {
		if (isObj(self_188257.m_type, NTI170133)) {
		result_188276 = token_ready_188255(self_188257, token_188258, ch_188259);
		break BeforeRet;
		}
		}
	} while (false);

	return result_188276;

}

function token_start_188316(self_188318, token_188319, ch_188320) {
	var result_188321 = false;

		result_188321 = (ch_188320 == 34);

	return result_188321;

}

function token_start_188277(self_188279, token_188280, ch_188281) {
	var result_188282 = false;

		result_188282 = false;

	return result_188282;

}

function token_start_188296(self_188279, token_188280, ch_188281) {
	var result_188298 = false;

	BeforeRet: do {
		chckNilDisp(self_188279);
		if (isObj(self_188279.m_type, NTI170140)) {
		result_188298 = token_start_188316(self_188279, token_188280, ch_188281);
		break BeforeRet;
		}
		else {
		if (isObj(self_188279.m_type, NTI170133)) {
		result_188298 = token_start_188277(self_188279, token_188280, ch_188281);
		break BeforeRet;
		}
		}
	} while (false);

	return result_188298;

}

function make_binding_192698(self_192700, key_192701, val_192702) {
	var result_192703 = null;

		if ((self_192700.locals == null)) {
		self_192700.locals = new_map_181637();
		}
		
		result_192703 = make_binding_177643(self_192700.locals, key_192701, val_192702);

	return result_192703;

}

function make_binding_192676(self_192678, key_192679, val_192680) {
	var result_192681 = null;

		raise_runtime_exception_170382(makeNimstrLit("This activation should not be called with makeBinding"));

	return result_192681;

}

function make_binding_192695(self_192678, key_192679, val_192680) {
	var result_192697 = null;

	BeforeRet: do {
		chckNilDisp(self_192678);
		if (isObj(self_192678.m_type, NTI190484)) {
		result_192697 = make_binding_192698(self_192678, key_192679, val_192680);
		break BeforeRet;
		}
		else {
		if (isObj(self_192678.m_type, NTI190476)) {
		result_192697 = make_binding_192676(self_192678, key_192679, val_192680);
		break BeforeRet;
		}
		}
	} while (false);

	return result_192697;

}

function make_local_binding_192841(spry_192843, key_192844, val_192845) {
									var Tmp6;
						var Tmp7;

	var result_192846 = null;

	BeforeRet: do {
		L1: do {
			var activation_192847 = null;
			var colontmp__198464 = null;
			colontmp__198464 = spry_192843.currentActivation;
			var activation_198465 = colontmp__198464;
			L2: do {
					L3: while (true) {
					if (!!((activation_198465 == null))) break L3;
						L4: do {
								L5: while (true) {
								if (!!(!(isObj(activation_198465.m_type, NTI190489)))) break L5;
									if (isObj(activation_198465.m_type, NTI190487)) {
									Tmp6 = activation_198465.body.parent;
									}
									else {
									Tmp6 = activation_198465.parent;
									}
									
									activation_198465 = Tmp6;
								}
						} while(false);
						activation_192847 = activation_198465;
						result_192846 = make_binding_192695(activation_192847, key_192844, val_192845);
						break BeforeRet;
						if (isObj(activation_198465.m_type, NTI190487)) {
						Tmp7 = activation_198465.body.parent;
						}
						else {
						Tmp7 = activation_198465.parent;
						}
						
						activation_198465 = Tmp7;
					}
			} while(false);
		} while(false);
	} while (false);

	return result_192846;

}

function eval_193631(self_193633, spry_193634) {
	var result_193635 = null;

		result_193635 = next_192331(arg_parent_192604(spry_193634));
		make_local_binding_192841(spry_193634, self_193633, result_193635);

	return result_193635;

}

function new_activation_191199(funk_191201) {
	var result_191202 = null;

		result_191202 = {body: funk_191201, m_type: NTI190487, locals: null, last: null, self: null, returned: false, parent: null, pos: 0, tags: null};

	return result_191202;

}

function set_self_192952(spry_192954) {
	var result_192955 = null;

		result_192955 = eval_arg_infix_192913(spry_192954);
		if ((result_192955 == null)) {
		spry_192954.currentActivation.self = spry_192954.nilVal;
		result_192955 = spry_192954.nilVal;
		}
		else {
			spry_192954.currentActivation.self = result_192955;
		}
		

	return result_192955;

}

function eval_193725(self_193727, spry_193728) {
	var result_193729 = null;

		var act_193730 = new_activation_191199(self_193727);
		set_self_192952(spry_193728);
		result_193729 = eval_193668(act_193730, spry_193728);

	return result_193729;

}

function eval_193649(self_193651, spry_193652) {
	var result_193653 = null;

		result_193653 = self_193651.primitive(spry_193652);

	return result_193653;

}

function new_activation_191263(body_191265) {
	var result_191266 = null;

		result_191266 = {body: body_191265, m_type: NTI190489, last: null, self: null, returned: false, parent: null, pos: 0, tags: null};

	return result_191266;

}

function eval_193744(self_193746, spry_193747) {
	var result_193748 = null;

		result_193748 = eval_193668(new_activation_191263(self_193746), spry_193747);

	return result_193748;

}

function eval_193799(self_193801, spry_193802) {
	var result_193803 = null;

		result_193803 = self_193801;

	return result_193803;

}

function eval_193707(self_193709, spry_193710) {
	var result_193711 = null;

		result_193711 = eval_193668(new_activation_191199(self_193709), spry_193710);

	return result_193711;

}

function eval_193781(self_193783, spry_193784) {
	var result_193785 = null;

		result_193785 = self_193783;

	return result_193785;

}

function new_activation_191295(body_191297) {
	var result_191298 = null;

		result_191298 = {body: body_191297, m_type: NTI190491, locals: null, last: null, self: null, returned: false, parent: null, pos: 0, tags: null};
		result_191298.locals = new_map_181637();

	return result_191298;

}

function eval_193762(self_193764, spry_193765) {
	var result_193766 = null;

	BeforeRet: do {
		var activation_193767 = new_activation_191295(self_193764);
		eval_193668(activation_193767, spry_193765);
		activation_193767.returned = true;
		result_193766 = activation_193767.locals;
		break BeforeRet;
	} while (false);

	return result_193766;

}

function eval_193817(self_193819, spry_193820) {
	var result_193821 = null;

		result_193821 = self_193819;

	return result_193821;

}

function lookup_192496(self_192498, key_192499) {
	var result_192500 = null;

	BeforeRet: do {
		if (!((self_192498.locals == null))) {
		result_192500 = lookup_174154(self_192498.locals, key_192499);
		break BeforeRet;
		}
		
	} while (false);

	return result_192500;

}

function lookup_192475(self_192477, key_192478) {
	var result_192479 = null;

	return result_192479;

}

function lookup_192493(self_192477, key_192478) {
	var result_192495 = null;

	BeforeRet: do {
		chckNilDisp(self_192477);
		if (isObj(self_192477.m_type, NTI190484)) {
		result_192495 = lookup_192496(self_192477, key_192478);
		break BeforeRet;
		}
		else {
		if (isObj(self_192477.m_type, NTI190476)) {
		result_192495 = lookup_192475(self_192477, key_192478);
		break BeforeRet;
		}
		}
	} while (false);

	return result_192495;

}

function lookup_parent_192649(spry_192651, key_192652) {
									var Tmp6;
						var Tmp7;

	var result_192653 = null;

	BeforeRet: do {
		var in_parent_192654 = false;
		L1: do {
			var activation_192655 = null;
			var colontmp__198475 = null;
			colontmp__198475 = spry_192651.currentActivation;
			var activation_198476 = colontmp__198475;
			L2: do {
					L3: while (true) {
					if (!!((activation_198476 == null))) break L3;
						L4: do {
								L5: while (true) {
								if (!!(!(isObj(activation_198476.m_type, NTI190489)))) break L5;
									if (isObj(activation_198476.m_type, NTI190487)) {
									Tmp6 = activation_198476.body.parent;
									}
									else {
									Tmp6 = activation_198476.parent;
									}
									
									activation_198476 = Tmp6;
								}
						} while(false);
						activation_192655 = activation_198476;
						if (in_parent_192654) {
						var hit_192656 = lookup_192493(activation_192655, key_192652);
						if (!((hit_192656 == null))) {
						result_192653 = hit_192656;
						break BeforeRet;
						}
						
						}
						else {
							in_parent_192654 = true;
						}
						
						if (isObj(activation_198476.m_type, NTI190487)) {
						Tmp7 = activation_198476.body.parent;
						}
						else {
						Tmp7 = activation_198476.parent;
						}
						
						activation_198476 = Tmp7;
					}
			} while(false);
		} while(false);
	} while (false);

	return result_192653;

}

function eval_193568(self_193570, spry_193571) {
		var Tmp1;

	var result_193572 = null;

		var hit_193573 = lookup_parent_192649(spry_193571, self_193570);
		if ((hit_193573 == null)) {
		Tmp1 = spry_193571.undefVal;
		}
		else {
		Tmp1 = eval_190559(hit_193573.val, spry_193571);
		}
		
		result_193572 = Tmp1;

	return result_193572;

}

function eval_193835(self_193837, spry_193838) {
	var result_193839 = null;

		result_193839 = eval_190559(self_193837.val, spry_193838);

	return result_193839;

}

function eval_193610(self_193612, spry_193613) {
	var result_193614 = null;

		var previous_activation_193615 = arg_parent_192604(spry_193613);
		var arg_193616 = next_192331(previous_activation_193615);
		var here_193617 = spry_193613.currentActivation;
		spry_193613.currentActivation = previous_activation_193615;
		result_193614 = eval_190559(arg_193616, spry_193613);
		spry_193613.currentActivation = here_193617;
		make_local_binding_192841(spry_193613, self_193612, result_193614);

	return result_193614;

}

function eval_193592(self_193594, spry_193595) {
	var result_193596 = null;

		result_193596 = self_193594;

	return result_193596;

}

function lookup_self_192622(spry_192624, key_192625) {
	var result_192626 = null;

	BeforeRet: do {
		var self_192627 = spry_192624.currentActivation.self;
		if (isObj(self_192627.m_type, NTI170223)) {
		result_192626 = lookup_174154(self_192627, key_192625);
		break BeforeRet;
		}
		
	} while (false);

	return result_192626;

}

function eval_193448(self_193450, spry_193451) {
		var Tmp1;

	var result_193452 = null;

		var hit_193453 = lookup_self_192622(spry_193451, self_193450);
		if ((hit_193453 == null)) {
		Tmp1 = spry_193451.undefVal;
		}
		else {
		Tmp1 = hit_193453.val;
		}
		
		result_193452 = Tmp1;

	return result_193452;

}

function eval_193400(self_193402, spry_193403) {
		var Tmp1;

	var result_193404 = null;

		var hit_193405 = lookup_192520(spry_193403, self_193402);
		if ((hit_193405 == null)) {
		Tmp1 = spry_193403.undefVal;
		}
		else {
		Tmp1 = hit_193405.val;
		}
		
		result_193404 = Tmp1;

	return result_193404;

}

function eval_193424(self_193426, spry_193427) {
		var Tmp1;

	var result_193428 = null;

		var hit_193429 = lookup_192520(spry_193427, self_193426);
		if ((hit_193429 == null)) {
		Tmp1 = spry_193427.undefVal;
		}
		else {
		Tmp1 = hit_193429.val;
		}
		
		result_193428 = Tmp1;

	return result_193428;

}

function eval_193472(self_193474, spry_193475) {
		var Tmp1;

	var result_193476 = null;

		var hit_193477 = lookup_parent_192649(spry_193475, self_193474);
		if ((hit_193477 == null)) {
		Tmp1 = spry_193475.undefVal;
		}
		else {
		Tmp1 = hit_193477.val;
		}
		
		result_193476 = Tmp1;

	return result_193476;

}

function eval_193544(self_193546, spry_193547) {
		var Tmp1;

	var result_193548 = null;

		var hit_193549 = lookup_self_192622(spry_193547, self_193546);
		if ((hit_193549 == null)) {
		Tmp1 = spry_193547.undefVal;
		}
		else {
		Tmp1 = eval_190559(hit_193549.val, spry_193547);
		}
		
		result_193548 = Tmp1;

	return result_193548;

}

function eval_193496(self_193498, spry_193499) {
		var Tmp1;

	var result_193500 = null;

		var hit_193501 = lookup_192520(spry_193499, self_193498);
		if ((hit_193501 == null)) {
		Tmp1 = spry_193499.undefVal;
		}
		else {
		Tmp1 = eval_190559(hit_193501.val, spry_193499);
		}
		
		result_193500 = Tmp1;

	return result_193500;

}

function eval_193520(self_193522, spry_193523) {
		var Tmp1;

	var result_193524 = null;

		var hit_193525 = lookup_192520(spry_193523, self_193522);
		if ((hit_193525 == null)) {
		Tmp1 = spry_193523.undefVal;
		}
		else {
		Tmp1 = eval_190559(hit_193525.val, spry_193523);
		}
		
		result_193524 = Tmp1;

	return result_193524;

}

function eval_193376(self_193378, spry_193379) {
	var result_193380 = null;

	BeforeRet: do {
		var binding_193381 = lookup_192520(spry_193379, self_193378);
		if ((binding_193381 == null)) {
		raise_runtime_exception_170382((makeNimstrLit("Word not found: ") || []).concat(HEX24_170617(self_193378) || []));
		}
		
		result_193380 = eval_190559(binding_193381.val, spry_193379);
		break BeforeRet;
	} while (false);

	return result_193380;

}

function eval_190555(self_190557, spry_190558) {
	var result_193362 = null;

		raise_runtime_exception_170382((makeNimstrLit("Should not happen ") || []).concat(HEX24_170617(self_190557) || []));

	return result_193362;

}

function eval_190559(self_190557, spry_190558) {
	var result_193362 = null;

	BeforeRet: do {
		chckNilDisp(self_190557);
		if (isObj(self_190557.m_type, NTI170178)) {
		result_193362 = eval_193631(self_190557, spry_190558);
		break BeforeRet;
		}
		else {
		if (isObj(self_190557.m_type, NTI190474)) {
		result_193362 = eval_193725(self_190557, spry_190558);
		break BeforeRet;
		}
		else {
		if (isObj(self_190557.m_type, NTI190465)) {
		result_193362 = eval_193649(self_190557, spry_190558);
		break BeforeRet;
		}
		else {
		if (isObj(self_190557.m_type, NTI170216)) {
		result_193362 = eval_193744(self_190557, spry_190558);
		break BeforeRet;
		}
		else {
		if (isObj(self_190557.m_type, NTI170186)) {
		result_193362 = eval_193799(self_190557, spry_190558);
		break BeforeRet;
		}
		else {
		if (isObj(self_190557.m_type, NTI190470)) {
		result_193362 = eval_193707(self_190557, spry_190558);
		break BeforeRet;
		}
		else {
		if (isObj(self_190557.m_type, NTI170220)) {
		result_193362 = eval_193781(self_190557, spry_190558);
		break BeforeRet;
		}
		else {
		if (isObj(self_190557.m_type, NTI170218)) {
		result_193362 = eval_193762(self_190557, spry_190558);
		break BeforeRet;
		}
		else {
		if (isObj(self_190557.m_type, NTI170223)) {
		result_193362 = eval_193817(self_190557, spry_190558);
		break BeforeRet;
		}
		else {
		if (isObj(self_190557.m_type, NTI170163)) {
		result_193362 = eval_193568(self_190557, spry_190558);
		break BeforeRet;
		}
		else {
		if (isObj(self_190557.m_type, NTI170248)) {
		result_193362 = eval_193835(self_190557, spry_190558);
		break BeforeRet;
		}
		else {
		if (isObj(self_190557.m_type, NTI170165)) {
		result_193362 = eval_193610(self_190557, spry_190558);
		break BeforeRet;
		}
		else {
		if (isObj(self_190557.m_type, NTI170152)) {
		result_193362 = eval_193592(self_190557, spry_190558);
		break BeforeRet;
		}
		else {
		if (isObj(self_190557.m_type, NTI170172)) {
		result_193362 = eval_193448(self_190557, spry_190558);
		break BeforeRet;
		}
		else {
		if (isObj(self_190557.m_type, NTI170169)) {
		result_193362 = eval_193400(self_190557, spry_190558);
		break BeforeRet;
		}
		else {
		if (isObj(self_190557.m_type, NTI170167)) {
		result_193362 = eval_193424(self_190557, spry_190558);
		break BeforeRet;
		}
		else {
		if (isObj(self_190557.m_type, NTI170176)) {
		result_193362 = eval_193472(self_190557, spry_190558);
		break BeforeRet;
		}
		else {
		if (isObj(self_190557.m_type, NTI170159)) {
		result_193362 = eval_193544(self_190557, spry_190558);
		break BeforeRet;
		}
		else {
		if (isObj(self_190557.m_type, NTI170156)) {
		result_193362 = eval_193496(self_190557, spry_190558);
		break BeforeRet;
		}
		else {
		if (isObj(self_190557.m_type, NTI170154)) {
		result_193362 = eval_193520(self_190557, spry_190558);
		break BeforeRet;
		}
		else {
		if (isObj(self_190557.m_type, NTI170145)) {
		result_193362 = eval_193376(self_190557, spry_190558);
		break BeforeRet;
		}
		else {
		if (isObj(self_190557.m_type, NTI170142)) {
		result_193362 = eval_190555(self_190557, spry_190558);
		break BeforeRet;
		}
		else {
		if (isObj(self_190557.m_type, NTI170142)) {
		result_193362 = eval_190555(self_190557, spry_190558);
		break BeforeRet;
		}
		}}}}}}}}}}}}}}}}}}}}}}
	} while (false);

	return result_193362;

}

function eval_do_193889(self_193891, spry_193892) {
	var result_193893 = null;

		result_193893 = eval_193668(new_activation_191263(self_193891), spry_193892);

	return result_193893;

}

function eval_do_193871(self_193873, spry_193874) {
	var result_193875 = null;

		result_193875 = eval_193668(new_activation_191231(self_193873), spry_193874);

	return result_193875;

}

function eval_do_193907(self_193909, spry_193910) {
	var result_193911 = null;

		result_193911 = eval_193668(new_activation_191295(self_193909), spry_193910);

	return result_193911;

}

function eval_do_190561(self_190563, spry_190564) {
	var result_193857 = null;

		raise_runtime_exception_170382(makeNimstrLit("Do only works for sequences"));

	return result_193857;

}

function eval_do_190565(self_190563, spry_190564) {
	var result_193857 = null;

	BeforeRet: do {
		chckNilDisp(self_190563);
		if (isObj(self_190563.m_type, NTI170216)) {
		result_193857 = eval_do_193889(self_190563, spry_190564);
		break BeforeRet;
		}
		else {
		if (isObj(self_190563.m_type, NTI170220)) {
		result_193857 = eval_do_193871(self_190563, spry_190564);
		break BeforeRet;
		}
		else {
		if (isObj(self_190563.m_type, NTI170218)) {
		result_193857 = eval_do_193907(self_190563, spry_190564);
		break BeforeRet;
		}
		else {
		if (isObj(self_190563.m_type, NTI170142)) {
		result_193857 = eval_do_190561(self_190563, spry_190564);
		break BeforeRet;
		}
		else {
		if (isObj(self_190563.m_type, NTI170142)) {
		result_193857 = eval_do_190561(self_190563, spry_190564);
		break BeforeRet;
		}
		}}}}
	} while (false);

	return result_193857;

}

function HEX2B_191526(a_191528, b_191529) {
	var result_191530 = null;

		result_191530 = new_value_186520((a_191528.value + b_191529.value));

	return result_191530;

}

function HEX2B_191508(a_191510, b_191511) {
	var result_191512 = null;

		result_191512 = new_value_186520((a_191510.value + b_191511.value));

	return result_191512;

}

function HEX2B_191490(a_191492, b_191493) {
	var result_191494 = null;

		result_191494 = new_value_186488(addInt(a_191492.value, b_191493.value));

	return result_191494;

}

function HEX2B_191544(a_191546, b_191547) {
	var result_191548 = null;

		result_191548 = new_value_186520((a_191546.value + b_191547.value));

	return result_191548;

}

function HEX2B_191469(a_191471, b_191472) {
	var result_191473 = null;

		raise_runtime_exception_170382((makeNimstrLit("Can not evaluate ") || []).concat(HEX24_170617(a_191471) || [],makeNimstrLit(" + ") || [],HEX24_170617(b_191472) || []));

	return result_191473;

}

function HEX2B_191487(a_191471, b_191472) {
	var result_191489 = null;

	BeforeRet: do {
		chckNilDisp(a_191471);
		chckNilDisp(b_191472);
		if ((isObj(a_191471.m_type, NTI170191) && isObj(b_191472.m_type, NTI170188))) {
		result_191489 = HEX2B_191526(a_191471, b_191472);
		break BeforeRet;
		}
		else {
		if ((isObj(a_191471.m_type, NTI170188) && isObj(b_191472.m_type, NTI170191))) {
		result_191489 = HEX2B_191508(a_191471, b_191472);
		break BeforeRet;
		}
		else {
		if ((isObj(a_191471.m_type, NTI170188) && isObj(b_191472.m_type, NTI170188))) {
		result_191489 = HEX2B_191490(a_191471, b_191472);
		break BeforeRet;
		}
		else {
		if ((isObj(a_191471.m_type, NTI170191) && isObj(b_191472.m_type, NTI170191))) {
		result_191489 = HEX2B_191544(a_191471, b_191472);
		break BeforeRet;
		}
		else {
		if ((isObj(a_191471.m_type, NTI170142) && isObj(b_191472.m_type, NTI170142))) {
		result_191489 = HEX2B_191469(a_191471, b_191472);
		break BeforeRet;
		}
		}}}}
	} while (false);

	return result_191489;

}

function HEX2D_191619(a_191621, b_191622) {
	var result_191623 = null;

		result_191623 = new_value_186520((a_191621.value - b_191622.value));

	return result_191623;

}

function HEX2D_191601(a_191603, b_191604) {
	var result_191605 = null;

		result_191605 = new_value_186520((a_191603.value - b_191604.value));

	return result_191605;

}

function HEX2D_191583(a_191585, b_191586) {
	var result_191587 = null;

		result_191587 = new_value_186488(subInt(a_191585.value, b_191586.value));

	return result_191587;

}

function HEX2D_191637(a_191639, b_191640) {
	var result_191641 = null;

		result_191641 = new_value_186520((a_191639.value - b_191640.value));

	return result_191641;

}

function HEX2D_191562(a_191564, b_191565) {
	var result_191566 = null;

		raise_runtime_exception_170382((makeNimstrLit("Can not evaluate ") || []).concat(HEX24_170617(a_191564) || [],makeNimstrLit(" - ") || [],HEX24_170617(b_191565) || []));

	return result_191566;

}

function HEX2D_191580(a_191564, b_191565) {
	var result_191582 = null;

	BeforeRet: do {
		chckNilDisp(a_191564);
		chckNilDisp(b_191565);
		if ((isObj(a_191564.m_type, NTI170191) && isObj(b_191565.m_type, NTI170188))) {
		result_191582 = HEX2D_191619(a_191564, b_191565);
		break BeforeRet;
		}
		else {
		if ((isObj(a_191564.m_type, NTI170188) && isObj(b_191565.m_type, NTI170191))) {
		result_191582 = HEX2D_191601(a_191564, b_191565);
		break BeforeRet;
		}
		else {
		if ((isObj(a_191564.m_type, NTI170188) && isObj(b_191565.m_type, NTI170188))) {
		result_191582 = HEX2D_191583(a_191564, b_191565);
		break BeforeRet;
		}
		else {
		if ((isObj(a_191564.m_type, NTI170191) && isObj(b_191565.m_type, NTI170191))) {
		result_191582 = HEX2D_191637(a_191564, b_191565);
		break BeforeRet;
		}
		else {
		if ((isObj(a_191564.m_type, NTI170142) && isObj(b_191565.m_type, NTI170142))) {
		result_191582 = HEX2D_191562(a_191564, b_191565);
		break BeforeRet;
		}
		}}}}
	} while (false);

	return result_191582;

}

function HEX2A_191712(a_191714, b_191715) {
	var result_191716 = null;

		result_191716 = new_value_186520((a_191714.value * b_191715.value));

	return result_191716;

}

function HEX2A_191694(a_191696, b_191697) {
	var result_191698 = null;

		result_191698 = new_value_186520((a_191696.value * b_191697.value));

	return result_191698;

}

function HEX2A_191676(a_191678, b_191679) {
	var result_191680 = null;

		result_191680 = new_value_186488(mulInt(a_191678.value, b_191679.value));

	return result_191680;

}

function HEX2A_191730(a_191732, b_191733) {
	var result_191734 = null;

		result_191734 = new_value_186520((a_191732.value * b_191733.value));

	return result_191734;

}

function HEX2A_191655(a_191657, b_191658) {
	var result_191659 = null;

		raise_runtime_exception_170382((makeNimstrLit("Can not evaluate ") || []).concat(HEX24_170617(a_191657) || [],makeNimstrLit(" * ") || [],HEX24_170617(b_191658) || []));

	return result_191659;

}

function HEX2A_191673(a_191657, b_191658) {
	var result_191675 = null;

	BeforeRet: do {
		chckNilDisp(a_191657);
		chckNilDisp(b_191658);
		if ((isObj(a_191657.m_type, NTI170191) && isObj(b_191658.m_type, NTI170188))) {
		result_191675 = HEX2A_191712(a_191657, b_191658);
		break BeforeRet;
		}
		else {
		if ((isObj(a_191657.m_type, NTI170188) && isObj(b_191658.m_type, NTI170191))) {
		result_191675 = HEX2A_191694(a_191657, b_191658);
		break BeforeRet;
		}
		else {
		if ((isObj(a_191657.m_type, NTI170188) && isObj(b_191658.m_type, NTI170188))) {
		result_191675 = HEX2A_191676(a_191657, b_191658);
		break BeforeRet;
		}
		else {
		if ((isObj(a_191657.m_type, NTI170191) && isObj(b_191658.m_type, NTI170191))) {
		result_191675 = HEX2A_191730(a_191657, b_191658);
		break BeforeRet;
		}
		else {
		if ((isObj(a_191657.m_type, NTI170142) && isObj(b_191658.m_type, NTI170142))) {
		result_191675 = HEX2A_191655(a_191657, b_191658);
		break BeforeRet;
		}
		}}}}
	} while (false);

	return result_191675;

}

function HEX2F_191805(a_191807, b_191808) {
	var result_191809 = null;

		result_191809 = new_value_186520((a_191807.value / b_191808.value));

	return result_191809;

}

function HEX2F_191787(a_191789, b_191790) {
	var result_191791 = null;

		result_191791 = new_value_186520((a_191789.value / b_191790.value));

	return result_191791;

}

function HEX2F_26417(x_26419, y_26420) {
	var result_26421 = 0.0;

		result_26421 = (x_26419 / y_26420);

	return result_26421;

}

function HEX2F_191769(a_191771, b_191772) {
	var result_191773 = null;

		result_191773 = new_value_186520(HEX2F_26417(a_191771.value, b_191772.value));

	return result_191773;

}

function HEX2F_191823(a_191825, b_191826) {
	var result_191827 = null;

		result_191827 = new_value_186520((a_191825.value / b_191826.value));

	return result_191827;

}

function HEX2F_191748(a_191750, b_191751) {
	var result_191752 = null;

		raise_runtime_exception_170382((makeNimstrLit("Can not evaluate ") || []).concat(HEX24_170617(a_191750) || [],makeNimstrLit(" / ") || [],HEX24_170617(b_191751) || []));

	return result_191752;

}

function HEX2F_191766(a_191750, b_191751) {
	var result_191768 = null;

	BeforeRet: do {
		chckNilDisp(a_191750);
		chckNilDisp(b_191751);
		if ((isObj(a_191750.m_type, NTI170191) && isObj(b_191751.m_type, NTI170188))) {
		result_191768 = HEX2F_191805(a_191750, b_191751);
		break BeforeRet;
		}
		else {
		if ((isObj(a_191750.m_type, NTI170188) && isObj(b_191751.m_type, NTI170191))) {
		result_191768 = HEX2F_191787(a_191750, b_191751);
		break BeforeRet;
		}
		else {
		if ((isObj(a_191750.m_type, NTI170188) && isObj(b_191751.m_type, NTI170188))) {
		result_191768 = HEX2F_191769(a_191750, b_191751);
		break BeforeRet;
		}
		else {
		if ((isObj(a_191750.m_type, NTI170191) && isObj(b_191751.m_type, NTI170191))) {
		result_191768 = HEX2F_191823(a_191750, b_191751);
		break BeforeRet;
		}
		else {
		if ((isObj(a_191750.m_type, NTI170142) && isObj(b_191751.m_type, NTI170142))) {
		result_191768 = HEX2F_191748(a_191750, b_191751);
		break BeforeRet;
		}
		}}}}
	} while (false);

	return result_191768;

}

function HEX3C_191862(a_191864, b_191865) {
	var result_191866 = null;

		result_191866 = new_value_186616((a_191864.value < b_191865.value));

	return result_191866;

}

function HEX3C_191898(a_191900, b_191901) {
	var result_191902 = null;

		result_191902 = new_value_186616((a_191900.value < b_191901.value));

	return result_191902;

}

function HEX3C_191880(a_191882, b_191883) {
	var result_191884 = null;

		result_191884 = new_value_186616((a_191882.value < b_191883.value));

	return result_191884;

}

function HEX3C_191934(a_191936, b_191937) {
	var result_191938 = null;

		result_191938 = new_value_186616((cmpStrings(a_191936.value, b_191937.value) < 0));

	return result_191938;

}

function HEX3C_191916(a_191918, b_191919) {
	var result_191920 = null;

		result_191920 = new_value_186616((a_191918.value < b_191919.value));

	return result_191920;

}

function HEX3C_191841(a_191843, b_191844) {
	var result_191845 = null;

		raise_runtime_exception_170382((makeNimstrLit("Can not evaluate ") || []).concat(HEX24_170617(a_191843) || [],makeNimstrLit(" < ") || [],HEX24_170617(b_191844) || []));

	return result_191845;

}

function HEX3C_191859(a_191843, b_191844) {
	var result_191861 = null;

	BeforeRet: do {
		chckNilDisp(a_191843);
		chckNilDisp(b_191844);
		if ((isObj(a_191843.m_type, NTI170188) && isObj(b_191844.m_type, NTI170188))) {
		result_191861 = HEX3C_191862(a_191843, b_191844);
		break BeforeRet;
		}
		else {
		if ((isObj(a_191843.m_type, NTI170191) && isObj(b_191844.m_type, NTI170188))) {
		result_191861 = HEX3C_191898(a_191843, b_191844);
		break BeforeRet;
		}
		else {
		if ((isObj(a_191843.m_type, NTI170188) && isObj(b_191844.m_type, NTI170191))) {
		result_191861 = HEX3C_191880(a_191843, b_191844);
		break BeforeRet;
		}
		else {
		if ((isObj(a_191843.m_type, NTI170194) && isObj(b_191844.m_type, NTI170194))) {
		result_191861 = HEX3C_191934(a_191843, b_191844);
		break BeforeRet;
		}
		else {
		if ((isObj(a_191843.m_type, NTI170191) && isObj(b_191844.m_type, NTI170191))) {
		result_191861 = HEX3C_191916(a_191843, b_191844);
		break BeforeRet;
		}
		else {
		if ((isObj(a_191843.m_type, NTI170142) && isObj(b_191844.m_type, NTI170142))) {
		result_191861 = HEX3C_191841(a_191843, b_191844);
		break BeforeRet;
		}
		}}}}}
	} while (false);

	return result_191861;

}

function HEX3CHEX3D_191973(a_191975, b_191976) {
	var result_191977 = null;

		result_191977 = new_value_186616((a_191975.value <= b_191976.value));

	return result_191977;

}

function HEX3CHEX3D_192009(a_192011, b_192012) {
	var result_192013 = null;

		result_192013 = new_value_186616((a_192011.value <= b_192012.value));

	return result_192013;

}

function HEX3CHEX3D_191991(a_191993, b_191994) {
	var result_191995 = null;

		result_191995 = new_value_186616((a_191993.value <= b_191994.value));

	return result_191995;

}

function HEX3CHEX3D_192045(a_192047, b_192048) {
	var result_192049 = null;

		result_192049 = new_value_186616((cmpStrings(a_192047.value, b_192048.value) <= 0));

	return result_192049;

}

function HEX3CHEX3D_192027(a_192029, b_192030) {
	var result_192031 = null;

		result_192031 = new_value_186616((a_192029.value <= b_192030.value));

	return result_192031;

}

function HEX3CHEX3D_191952(a_191954, b_191955) {
	var result_191956 = null;

		raise_runtime_exception_170382((makeNimstrLit("Can not evaluate ") || []).concat(HEX24_170617(a_191954) || [],makeNimstrLit(" <= ") || [],HEX24_170617(b_191955) || []));

	return result_191956;

}

function HEX3CHEX3D_191970(a_191954, b_191955) {
	var result_191972 = null;

	BeforeRet: do {
		chckNilDisp(a_191954);
		chckNilDisp(b_191955);
		if ((isObj(a_191954.m_type, NTI170188) && isObj(b_191955.m_type, NTI170188))) {
		result_191972 = HEX3CHEX3D_191973(a_191954, b_191955);
		break BeforeRet;
		}
		else {
		if ((isObj(a_191954.m_type, NTI170191) && isObj(b_191955.m_type, NTI170188))) {
		result_191972 = HEX3CHEX3D_192009(a_191954, b_191955);
		break BeforeRet;
		}
		else {
		if ((isObj(a_191954.m_type, NTI170188) && isObj(b_191955.m_type, NTI170191))) {
		result_191972 = HEX3CHEX3D_191991(a_191954, b_191955);
		break BeforeRet;
		}
		else {
		if ((isObj(a_191954.m_type, NTI170194) && isObj(b_191955.m_type, NTI170194))) {
		result_191972 = HEX3CHEX3D_192045(a_191954, b_191955);
		break BeforeRet;
		}
		else {
		if ((isObj(a_191954.m_type, NTI170191) && isObj(b_191955.m_type, NTI170191))) {
		result_191972 = HEX3CHEX3D_192027(a_191954, b_191955);
		break BeforeRet;
		}
		else {
		if ((isObj(a_191954.m_type, NTI170142) && isObj(b_191955.m_type, NTI170142))) {
		result_191972 = HEX3CHEX3D_191952(a_191954, b_191955);
		break BeforeRet;
		}
		}}}}}
	} while (false);

	return result_191972;

}

function eq_192102(a_192104, b_192105) {
	var result_192106 = null;

		result_192106 = new_value_186616((a_192104.value == b_192105.value));

	return result_192106;

}

function eq_192084(a_192086, b_192087) {
	var result_192088 = null;

		result_192088 = new_value_186616((a_192086.value == b_192087.value));

	return result_192088;

}

function eq_192120(a_192122, b_192123) {
	var result_192124 = null;

		result_192124 = new_value_186616((a_192122.value == b_192123.value));

	return result_192124;

}

function eq_192176(a_192178, b_192179) {
	var result_192180 = null;

		result_192180 = new_value_186616((value_172612(a_192178) == value_172612(b_192179)));

	return result_192180;

}

function eq_192156(a_192158, b_192159) {
	var result_192160 = null;

		result_192160 = new_value_186616(eqStrings(a_192158.value, b_192159.value));

	return result_192160;

}

function eq_192138(a_192140, b_192141) {
	var result_192142 = null;

		result_192142 = new_value_186616((a_192140.value == b_192141.value));

	return result_192142;

}

function eq_192194(a_192196, b_192197) {
		var Tmp1;

	var result_192198 = null;

		if (!isObj(b_192197.m_type, NTI170220)) Tmp1 = false; else {			Tmp1 = HEX3DHEX3D_172333(a_192196, b_192197);		}		result_192198 = new_value_186616(Tmp1);

	return result_192198;

}

function eq_192220(a_192222, b_192223) {
		var Tmp1;

	var result_192224 = null;

		if (!isObj(b_192223.m_type, NTI170145)) Tmp1 = false; else {			Tmp1 = eqStrings(a_192222.word, b_192223.word);		}		result_192224 = new_value_186616(Tmp1);

	return result_192224;

}

function eq_192063(a_192065, b_192066) {
	var result_192067 = null;

		raise_runtime_exception_170382((makeNimstrLit("Can not evaluate ") || []).concat(HEX24_170617(a_192065) || [],makeNimstrLit(" == ") || [],HEX24_170617(b_192066) || []));

	return result_192067;

}

function eq_192081(a_192065, b_192066) {
	var result_192083 = null;

	BeforeRet: do {
		chckNilDisp(a_192065);
		chckNilDisp(b_192066);
		if ((isObj(a_192065.m_type, NTI170188) && isObj(b_192066.m_type, NTI170191))) {
		result_192083 = eq_192102(a_192065, b_192066);
		break BeforeRet;
		}
		else {
		if ((isObj(a_192065.m_type, NTI170188) && isObj(b_192066.m_type, NTI170188))) {
		result_192083 = eq_192084(a_192065, b_192066);
		break BeforeRet;
		}
		else {
		if ((isObj(a_192065.m_type, NTI170191) && isObj(b_192066.m_type, NTI170188))) {
		result_192083 = eq_192120(a_192065, b_192066);
		break BeforeRet;
		}
		else {
		if ((isObj(a_192065.m_type, NTI170200) && isObj(b_192066.m_type, NTI170200))) {
		result_192083 = eq_192176(a_192065, b_192066);
		break BeforeRet;
		}
		else {
		if ((isObj(a_192065.m_type, NTI170194) && isObj(b_192066.m_type, NTI170194))) {
		result_192083 = eq_192156(a_192065, b_192066);
		break BeforeRet;
		}
		else {
		if ((isObj(a_192065.m_type, NTI170191) && isObj(b_192066.m_type, NTI170191))) {
		result_192083 = eq_192138(a_192065, b_192066);
		break BeforeRet;
		}
		else {
		if ((isObj(a_192065.m_type, NTI170220) && isObj(b_192066.m_type, NTI170142))) {
		result_192083 = eq_192194(a_192065, b_192066);
		break BeforeRet;
		}
		else {
		if ((isObj(a_192065.m_type, NTI170145) && isObj(b_192066.m_type, NTI170142))) {
		result_192083 = eq_192220(a_192065, b_192066);
		break BeforeRet;
		}
		else {
		if ((isObj(a_192065.m_type, NTI170142) && isObj(b_192066.m_type, NTI170142))) {
		result_192083 = eq_192063(a_192065, b_192066);
		break BeforeRet;
		}
		}}}}}}}}
	} while (false);

	return result_192083;

}

function HEX26_192287(a_192289, b_192290) {
	var result_192291 = null;

	BeforeRet: do {
		add_186735(a_192289, b_192290.nodes);
		result_192291 = a_192289;
		break BeforeRet;
	} while (false);

	return result_192291;

}

function HEX26_192269(a_192271, b_192272) {
	var result_192273 = null;

		result_192273 = new_value_186552((a_192271.value || []).concat(b_192272.value || []));

	return result_192273;

}

function HEX26_192248(a_192250, b_192251) {
	var result_192252 = null;

		raise_runtime_exception_170382((makeNimstrLit("Can not evaluate ") || []).concat(HEX24_170617(a_192250) || [],makeNimstrLit(" & ") || [],HEX24_170617(b_192251) || []));

	return result_192252;

}

function HEX26_192266(a_192250, b_192251) {
	var result_192268 = null;

	BeforeRet: do {
		chckNilDisp(a_192250);
		chckNilDisp(b_192251);
		if ((isObj(a_192250.m_type, NTI170212) && isObj(b_192251.m_type, NTI170212))) {
		result_192268 = HEX26_192287(a_192250, b_192251);
		break BeforeRet;
		}
		else {
		if ((isObj(a_192250.m_type, NTI170194) && isObj(b_192251.m_type, NTI170194))) {
		result_192268 = HEX26_192269(a_192250, b_192251);
		break BeforeRet;
		}
		else {
		if ((isObj(a_192250.m_type, NTI170142) && isObj(b_192251.m_type, NTI170142))) {
		result_192268 = HEX26_192248(a_192250, b_192251);
		break BeforeRet;
		}
		}}
	} while (false);

	return result_192268;

}

function do_return_192413(self_192415, spry_192416) {
		spry_192416.currentActivation = self_192415.parent;

	
}

function do_return_192388(self_192390, spry_192391) {
		spry_192391.currentActivation = self_192390.parent;
		if (!((spry_192391.currentActivation == null))) {
		spry_192391.currentActivation.returned = true;
		}
		

	
}

function do_return_192411(self_192390, spry_192391) {
		chckNilDisp(self_192390);
		if (isObj(self_192390.m_type, NTI190487)) {
		do_return_192413(self_192390, spry_192391);
		}
		else {
		if (isObj(self_192390.m_type, NTI190476)) {
		do_return_192388(self_192390, spry_192391);
		}
		}

	
}

function is_object_192451(self_192453, spry_192454) {
		var Tmp1;

	var result_192455 = false;

		if (!!((self_192453.tags == null))) Tmp1 = false; else {			Tmp1 = contains_186806(self_192453.tags, spry_192454.objectTag);		}		result_192455 = Tmp1;

	return result_192455;

}

function is_object_192430(self_192432, spry_192433) {
	var result_192434 = false;

		result_192434 = false;

	return result_192434;

}

function is_object_192448(self_192432, spry_192433) {
	var result_192450 = false;

	BeforeRet: do {
		chckNilDisp(self_192432);
		if (isObj(self_192432.m_type, NTI170223)) {
		result_192450 = is_object_192451(self_192432, spry_192433);
		break BeforeRet;
		}
		else {
		if (isObj(self_192432.m_type, NTI170142)) {
		result_192450 = is_object_192430(self_192432, spry_192433);
		break BeforeRet;
		}
		}
	} while (false);

	return result_192450;

}

function make_binding_in_map_192808(spry_192810, key_192811, val_192812) {
	var result_192813 = null;

	BeforeRet: do {
		var binding_192814 = lookup_192520(spry_192810, key_192811.module);
		if (!((binding_192814 == null))) {
		var module_192821 = binding_192814.val;
		if (!((module_192821 == null))) {
		result_192813 = make_binding_177643(module_192821, new_eval_word_182075(key_192811.word), val_192812);
		break BeforeRet;
		}
		
		}
		
	} while (false);

	return result_192813;

}

function make_binding_in_map_192783(spry_192785, key_192786, val_192787) {
									var Tmp6;
						var Tmp7;

	var result_192788 = null;

	BeforeRet: do {
		L1: do {
			var activation_192789 = null;
			var colontmp__198500 = null;
			colontmp__198500 = spry_192785.currentActivation;
			var activation_198501 = colontmp__198500;
			L2: do {
					L3: while (true) {
					if (!!((activation_198501 == null))) break L3;
						L4: do {
								L5: while (true) {
								if (!!(!(isObj(activation_198501.m_type, NTI190489)))) break L5;
									if (isObj(activation_198501.m_type, NTI190487)) {
									Tmp6 = activation_198501.body.parent;
									}
									else {
									Tmp6 = activation_198501.parent;
									}
									
									activation_198501 = Tmp6;
								}
						} while(false);
						activation_192789 = activation_198501;
						if ((activation_192789.locals == null)) {
						activation_192789.locals = new_map_181637();
						}
						
						result_192788 = make_binding_177643(activation_192789.locals, key_192786, val_192787);
						break BeforeRet;
						if (isObj(activation_198501.m_type, NTI190487)) {
						Tmp7 = activation_198501.body.parent;
						}
						else {
						Tmp7 = activation_198501.parent;
						}
						
						activation_198501 = Tmp7;
					}
			} while(false);
		} while(false);
	} while (false);

	return result_192788;

}

function make_binding_in_map_192750(spry_192752, key_192753, val_192754) {
									var Tmp6;
						var Tmp7;

	var result_192755 = null;

	BeforeRet: do {
		var in_parent_192756 = false;
		var fallback_192757 = null;
		L1: do {
			var activation_192758 = null;
			var colontmp__198508 = null;
			colontmp__198508 = spry_192752.currentActivation;
			var activation_198509 = colontmp__198508;
			L2: do {
					L3: while (true) {
					if (!!((activation_198509 == null))) break L3;
						L4: do {
								L5: while (true) {
								if (!!(!(isObj(activation_198509.m_type, NTI190489)))) break L5;
									if (isObj(activation_198509.m_type, NTI190487)) {
									Tmp6 = activation_198509.body.parent;
									}
									else {
									Tmp6 = activation_198509.parent;
									}
									
									activation_198509 = Tmp6;
								}
						} while(false);
						activation_192758 = activation_198509;
						if (in_parent_192756) {
						fallback_192757 = activation_192758;
						if (!((lookup_192493(activation_192758, key_192753) == null))) {
						result_192755 = make_binding_177643(activation_192758.locals, new_eval_word_182075(key_192753.word), val_192754);
						break BeforeRet;
						}
						
						}
						else {
							in_parent_192756 = true;
						}
						
						if (isObj(activation_198509.m_type, NTI190487)) {
						Tmp7 = activation_198509.body.parent;
						}
						else {
						Tmp7 = activation_198509.parent;
						}
						
						activation_198509 = Tmp7;
					}
			} while(false);
		} while(false);
		if ((fallback_192757.locals == null)) {
		fallback_192757.locals = new_map_181637();
		}
		
		result_192755 = make_binding_177643(fallback_192757.locals, new_eval_word_182075(key_192753.word), val_192754);
		break BeforeRet;
	} while (false);

	return result_192755;

}

function make_binding_in_map_192722(spry_192724, key_192725, val_192726) {
									var Tmp6;
						var Tmp7;

	var result_192727 = null;

	BeforeRet: do {
		L1: do {
			var activation_192728 = null;
			var colontmp__198516 = null;
			colontmp__198516 = spry_192724.currentActivation;
			var activation_198517 = colontmp__198516;
			L2: do {
					L3: while (true) {
					if (!!((activation_198517 == null))) break L3;
						L4: do {
								L5: while (true) {
								if (!!(!(isObj(activation_198517.m_type, NTI190489)))) break L5;
									if (isObj(activation_198517.m_type, NTI190487)) {
									Tmp6 = activation_198517.body.parent;
									}
									else {
									Tmp6 = activation_198517.parent;
									}
									
									activation_198517 = Tmp6;
								}
						} while(false);
						activation_192728 = activation_198517;
						if ((activation_192728.locals == null)) {
						activation_192728.locals = new_map_181637();
						}
						
						result_192727 = make_binding_177643(activation_192728.locals, key_192725, val_192726);
						break BeforeRet;
						if (isObj(activation_198517.m_type, NTI190487)) {
						Tmp7 = activation_198517.body.parent;
						}
						else {
						Tmp7 = activation_198517.parent;
						}
						
						activation_198517 = Tmp7;
					}
			} while(false);
		} while(false);
	} while (false);

	return result_192727;

}

function make_binding_in_map_192747(spry_192724, key_192725, val_192726) {
	var result_192749 = null;

	BeforeRet: do {
		chckNilDisp(key_192725);
		if (isObj(key_192725.m_type, NTI170156)) {
		result_192749 = make_binding_in_map_192808(spry_192724, key_192725, val_192726);
		break BeforeRet;
		}
		else {
		if (isObj(key_192725.m_type, NTI170154)) {
		result_192749 = make_binding_in_map_192783(spry_192724, key_192725, val_192726);
		break BeforeRet;
		}
		else {
		if (isObj(key_192725.m_type, NTI170163)) {
		result_192749 = make_binding_in_map_192750(spry_192724, key_192725, val_192726);
		break BeforeRet;
		}
		else {
		if (isObj(key_192725.m_type, NTI170142)) {
		result_192749 = make_binding_in_map_192722(spry_192724, key_192725, val_192726);
		break BeforeRet;
		}
		}}}
	} while (false);

	return result_192749;

}

function is_method_193145(self_193147, spry_193148) {
	var result_193149 = false;

	BeforeRet: do {
		result_193149 = is_method_193106(self_193147.val, spry_193148);
		break BeforeRet;
	} while (false);

	return result_193149;

}

function is_method_193127(self_193129, spry_193130) {
	var result_193131 = false;

		result_193131 = true;

	return result_193131;

}

function is_method_193109(self_193111, spry_193112) {
	var result_193113 = false;

		result_193113 = true;

	return result_193113;

}

function is_method_193163(self_193165, spry_193166) {
	var result_193167 = false;

	BeforeRet: do {
		var binding_193168 = lookup_192520(spry_193166, self_193165);
		if ((binding_193168 == null)) {
		result_193167 = false;
		break BeforeRet;
		}
		else {
			result_193167 = is_method_193106(binding_193168.val, spry_193166);
			break BeforeRet;
		}
		
	} while (false);

	return result_193167;

}

function is_method_193088(self_193090, spry_193091) {
	var result_193092 = false;

		result_193092 = false;

	return result_193092;

}

function is_method_193106(self_193090, spry_193091) {
	var result_193108 = false;

	BeforeRet: do {
		chckNilDisp(self_193090);
		if (isObj(self_193090.m_type, NTI170248)) {
		result_193108 = is_method_193145(self_193090, spry_193091);
		break BeforeRet;
		}
		else {
		if (isObj(self_193090.m_type, NTI190474)) {
		result_193108 = is_method_193127(self_193090, spry_193091);
		break BeforeRet;
		}
		else {
		if (isObj(self_193090.m_type, NTI190468)) {
		result_193108 = is_method_193109(self_193090, spry_193091);
		break BeforeRet;
		}
		else {
		if (isObj(self_193090.m_type, NTI170154)) {
		result_193108 = is_method_193163(self_193090, spry_193091);
		break BeforeRet;
		}
		else {
		if (isObj(self_193090.m_type, NTI170142)) {
		result_193108 = is_method_193088(self_193090, spry_193091);
		break BeforeRet;
		}
		}}}}
	} while (false);

	return result_193108;

}

function can_eval_193250(self_193252, spry_193253) {
	var result_193254 = false;

		result_193254 = true;

	return result_193254;

}

function can_eval_193232(self_193234, spry_193235) {
	var result_193236 = false;

	BeforeRet: do {
		result_193236 = can_eval_193205(self_193234.val, spry_193235);
		break BeforeRet;
	} while (false);

	return result_193236;

}

function can_eval_193208(self_193210, spry_193211) {
	var result_193212 = false;

	BeforeRet: do {
		var binding_193213 = lookup_192520(spry_193211, self_193210);
		if ((binding_193213 == null)) {
		result_193212 = false;
		break BeforeRet;
		}
		else {
			result_193212 = can_eval_193205(binding_193213.val, spry_193211);
			break BeforeRet;
		}
		
	} while (false);

	return result_193212;

}

function can_eval_193268(self_193270, spry_193271) {
	var result_193272 = false;

		result_193272 = true;

	return result_193272;

}

function can_eval_193322(self_193324, spry_193325) {
	var result_193326 = false;

		result_193326 = true;

	return result_193326;

}

function can_eval_193304(self_193306, spry_193307) {
	var result_193308 = false;

		result_193308 = true;

	return result_193308;

}

function can_eval_193286(self_193288, spry_193289) {
	var result_193290 = false;

		result_193290 = true;

	return result_193290;

}

function can_eval_193340(self_193342, spry_193343) {
	var result_193344 = false;

		result_193344 = true;

	return result_193344;

}

function can_eval_193187(self_193189, spry_193190) {
	var result_193191 = false;

		result_193191 = false;

	return result_193191;

}

function can_eval_193205(self_193189, spry_193190) {
	var result_193207 = false;

	BeforeRet: do {
		chckNilDisp(self_193189);
		if (isObj(self_193189.m_type, NTI190470)) {
		result_193207 = can_eval_193250(self_193189, spry_193190);
		break BeforeRet;
		}
		else {
		if (isObj(self_193189.m_type, NTI170248)) {
		result_193207 = can_eval_193232(self_193189, spry_193190);
		break BeforeRet;
		}
		else {
		if (isObj(self_193189.m_type, NTI170154)) {
		result_193207 = can_eval_193208(self_193189, spry_193190);
		break BeforeRet;
		}
		else {
		if (isObj(self_193189.m_type, NTI190465)) {
		result_193207 = can_eval_193268(self_193189, spry_193190);
		break BeforeRet;
		}
		else {
		if (isObj(self_193189.m_type, NTI170216)) {
		result_193207 = can_eval_193322(self_193189, spry_193190);
		break BeforeRet;
		}
		else {
		if (isObj(self_193189.m_type, NTI170178)) {
		result_193207 = can_eval_193304(self_193189, spry_193190);
		break BeforeRet;
		}
		else {
		if (isObj(self_193189.m_type, NTI170165)) {
		result_193207 = can_eval_193286(self_193189, spry_193190);
		break BeforeRet;
		}
		else {
		if (isObj(self_193189.m_type, NTI170218)) {
		result_193207 = can_eval_193340(self_193189, spry_193190);
		break BeforeRet;
		}
		else {
		if (isObj(self_193189.m_type, NTI170142)) {
		result_193207 = can_eval_193187(self_193189, spry_193190);
		break BeforeRet;
		}
		}}}}}}}}
	} while (false);

	return result_193207;

}
