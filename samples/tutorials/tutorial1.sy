#!/usr/bin/env ispry
#
# Spry is a crazy little mix of Rebol/Smalltalk/Self/Lisp/Forth and Nim. Kinda.
#
# This tutorial is a valid Spry program with interspersed "# pause" lines that
# ispry will detect and pause. You can hit "s" to suspend and do what
# you wish, and then later type in a single "c" to continue. Any command
# or Spry code will be executed when you enter an empty line (hit enter twice).
#
# pause
# But hey, let's get cracking with some code...
#
# Spry is homoiconic which means that code and data share the same syntax.
# Spry code consists of tokens separated by whitespace and nested using the
# three symmetrical pairs of (), [] and {}.
#
# A token is either a literal Value or a Word. Literal Values are actually
# pluggable in the parser so we can easily add more kinds of literals but
# the core language only has three different literals:
#
#    integers
#    floats
#    strings
#
# Here is a Word followed by a string Value.
echo "Hello"
# pause

# The word "echo" is not a keyword in the language, in fact, Spry has no keywords
# at all. If a token is not recognized as a literal value, it's considered to
# be a word.
# The most common kind of word behaves much like a variable in other languages.
# When it is evaluated it fetches the node it is bound to and evaluates that
# instead.
#
# In the case of echo, if the spryio module is loaded, the word is bound to a
# primitive function that prints out its argument to stdout.
# Since no words are built into the language, they are all defined in
# modules and they can all be redefined.
#
# There are four singleton values bound to four words: true, false, nil, undef
# Just as in Smalltalk we only need one of each of these four values.
# That's why we have them created once and bound to these words for reuse. 
# pause

# This means that these are not keywords nor are they literals.
# We can in Spry redefine even these words if we like to.
#
# Spry uses square brackets a lot (just like Smalltalk/Self) for control structures
# but also for making ordered sequences like "[1 2 3]" and such a sequence is
# called a Block.
#
# Functions can be prefix, infix or use keyword syntax. Here the word size is
# bound to an infix function (so it get's its argument from the left) that
# returns the size of the block. Infix functions thus behaves much like
# messages in Smalltalk where the receiver is on the left.
[1 2 3] size
# pause

# The echo function used earlier is a regular prefix function and takes a single
# argument from the right, as expected.
echo 3.14

# Here is a block with all core Spry value types.
echo [3 4.0 true false nil "hey" undef]
# pause

# Running quit without any argument will fail because it needs one argument.
quit
# pause

# But with an exit code int it works fine
quit 0
# pause
